import{strictEqual as e,notStrictEqual as t}from"node:assert";import r,{resolve as s,dirname as o,normalize as n,join as i,relative as a,extname as u,basename as c}from"node:path";import l,{statSync as p,readdirSync as h,readFileSync as d,writeFile as g}from"node:fs";import f,{format as m,inspect as D}from"node:util";import{fileURLToPath as E}from"node:url";import{createRequire as y}from"node:module";import b from"node:os";import _ from"node:crypto";function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,s=Array(t);r<t;r++)s[r]=e[r];return s}function F(e,t,r,s,o,n,i){try{var a=e[n](i),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(s,o)}function w(e){return function(){var t=this,r=arguments;return new Promise(function(s,o){var n=e.apply(t,r);function i(e){F(n,s,o,i,a,"next",e)}function a(e){F(n,s,o,i,a,"throw",e)}i(void 0)})}}function T(e,t,r){return t&&function(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,S(s.key),s)}}(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function C(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=P(e))||t){r&&(e=r);var s=0,o=function(){};return{s:o,n:function(){return s>=e.length?{done:!0}:{done:!1,value:e[s++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,i=!0,a=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){a=!0,n=e},f:function(){try{i||null==r.return||r.return()}finally{if(a)throw n}}}}function A(){
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
var e,t,r="function"==typeof Symbol?Symbol:{},s=r.iterator||"@@iterator",o=r.toStringTag||"@@toStringTag";function n(r,s,o,n){var u=s&&s.prototype instanceof a?s:a,c=Object.create(u.prototype);return O(c,"_invoke",function(r,s,o){var n,a,u,c=0,l=o||[],p=!1,h={p:0,n:0,v:e,a:d,f:d.bind(e,4),d:function(t,r){return n=t,a=0,u=e,h.n=r,i}};function d(r,s){for(a=r,u=s,t=0;!p&&c&&!o&&t<l.length;t++){var o,n=l[t],d=h.p,g=n[2];r>3?(o=g===s)&&(u=n[(a=n[4])?5:(a=3,3)],n[4]=n[5]=e):n[0]<=d&&((o=r<2&&d<n[1])?(a=0,h.v=s,h.n=n[1]):d<g&&(o=r<3||n[0]>s||s>g)&&(n[4]=r,n[5]=s,h.n=g,a=0))}if(o||r>1)return i;throw p=!0,s}return function(o,l,g){if(c>1)throw TypeError("Generator is already running");for(p&&1===l&&d(l,g),a=l,u=g;(t=a<2?e:u)||!p;){n||(a?a<3?(a>1&&(h.n=-1),d(a,u)):h.n=u:h.v=u);try{if(c=2,n){if(a||(o="next"),t=n[o]){if(!(t=t.call(n,u)))throw TypeError("iterator result is not an object");if(!t.done)return t;u=t.value,a<2&&(a=0)}else 1===a&&(t=n.return)&&t.call(n),a<2&&(u=TypeError("The iterator does not provide a '"+o+"' method"),a=1);n=e}else if((t=(p=h.n<0)?u:r.call(s,h))!==i)break}catch(t){n=e,a=1,u=t}finally{c=1}}return{value:t,done:p}}}(r,o,n),!0),c}var i={};function a(){}function u(){}function c(){}t=Object.getPrototypeOf;var l=[][s]?t(t([][s]())):(O(t={},s,function(){return this}),t),p=c.prototype=a.prototype=Object.create(l);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,O(e,o,"GeneratorFunction")),e.prototype=Object.create(p),e}return u.prototype=c,O(p,"constructor",c),O(c,"constructor",u),u.displayName="GeneratorFunction",O(c,o,"GeneratorFunction"),O(p),O(p,o,"Generator"),O(p,s,function(){return this}),O(p,"toString",function(){return"[object Generator]"}),(A=function(){return{w:n,m:h}})()}function O(e,t,r,s){var o=Object.defineProperty;try{o({},"",{})}catch(e){o=0}O=function(e,t,r,s){if(t)o?o(e,t,{value:r,enumerable:!s,configurable:!s,writable:!s}):e[t]=r;else{function n(t,r){O(e,t,function(e){return this._invoke(t,r,e)})}n("next",0),n("throw",1),n("return",2)}},O(e,t,r,s)}function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var s,o,n,i,a=[],u=!0,c=!1;try{if(n=(r=r.call(e)).next,0===t);else for(;!(u=(s=n.call(r)).done)&&(a.push(s.value),a.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(c)throw o}}return a}}(e,t)||P(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(e){return function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||P(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e){var t=function(e,t){if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var s=r.call(e,t);if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"==typeof t?t:t+""}function P(e,t){if(e){if("string"==typeof e)return v(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?v(e,t):void 0}}const G={right:function(e,t){e=e.trim();const r=L.stringWidth(e);if(r<t)return" ".repeat(t-r)+e;return e},center:function(e,t){e=e.trim();const r=L.stringWidth(e);if(r>=t)return e;return" ".repeat(t-r>>1)+e}};class x{constructor(e){var t;this.width=e.width,this.wrap=null===(t=e.wrap)||void 0===t||t,this.rows=[]}span(...e){this.div(...e).span=!0}resetOutput(){this.rows=[]}div(...e){if(0===e.length&&this.div(""),this.wrap&&this.shouldApplyLayoutDSL(...e)&&"string"==typeof e[0])return this.applyLayoutDSL(e[0]);const t=e.map(e=>"string"==typeof e?this.colFromString(e):e);return this.rows.push(t),t}shouldApplyLayoutDSL(...e){return 1===e.length&&"string"==typeof e[0]&&/[\t\n]/.test(e[0])}applyLayoutDSL(e){const t=e.split("\n").map(e=>e.split("\t"));let r=0;return t.forEach(e=>{e.length>1&&L.stringWidth(e[0])>r&&(r=Math.min(Math.floor(.5*this.width),L.stringWidth(e[0])))}),t.forEach(e=>{this.div(...e.map((t,s)=>({text:t.trim(),padding:this.measurePadding(t),width:0===s&&e.length>1?r:void 0})))}),this.rows[this.rows.length-1]}colFromString(e){return{text:e,padding:this.measurePadding(e)}}measurePadding(e){const t=L.stripAnsi(e);return[0,t.match(/\s*$/)[0].length,0,t.match(/^\s*/)[0].length]}toString(){const e=[];return this.rows.forEach(t=>{this.rowToString(t,e)}),e.filter(e=>!e.hidden).map(e=>e.text).join("\n")}rowToString(e,t){return this.rasterize(e).forEach((r,s)=>{let o="";r.forEach((r,n)=>{const{width:i}=e[n],a=this.negatePadding(e[n]);let u=r;if(a>L.stringWidth(r)&&(u+=" ".repeat(a-L.stringWidth(r))),e[n].align&&"left"!==e[n].align&&this.wrap){u=(0,G[e[n].align])(u,a),L.stringWidth(u)<a&&(u+=" ".repeat((i||0)-L.stringWidth(u)-1))}const c=e[n].padding||[0,0,0,0];c[3]&&(o+=" ".repeat(c[3])),o+=B(e[n],u,"| "),o+=u,o+=B(e[n],u," |"),c[1]&&(o+=" ".repeat(c[1])),0===s&&t.length>0&&(o=this.renderInline(o,t[t.length-1]))}),t.push({text:o.replace(/ +$/,""),span:e.span})}),t}renderInline(e,t){const r=e.match(/^ */),s=r?r[0].length:0,o=t.text,n=L.stringWidth(o.trimRight());return t.span?this.wrap?s<n?e:(t.hidden=!0,o.trimRight()+" ".repeat(s-n)+e.trimLeft()):(t.hidden=!0,o+e):e}rasterize(e){const t=[],r=this.columnWidths(e);let s;return e.forEach((e,o)=>{e.width=r[o],s=this.wrap?L.wrap(e.text,this.negatePadding(e),{hard:!0}).split("\n"):e.text.split("\n"),e.border&&(s.unshift("."+"-".repeat(this.negatePadding(e)+2)+"."),s.push("'"+"-".repeat(this.negatePadding(e)+2)+"'")),e.padding&&(s.unshift(...new Array(e.padding[0]||0).fill("")),s.push(...new Array(e.padding[2]||0).fill(""))),s.forEach((e,r)=>{t[r]||t.push([]);const s=t[r];for(let e=0;e<o;e++)void 0===s[e]&&s.push("");s.push(e)})}),t}negatePadding(e){let t=e.width||0;return e.padding&&(t-=(e.padding[3]||0)+(e.padding[1]||0)),e.border&&(t-=4),t}columnWidths(e){if(!this.wrap)return e.map(e=>e.width||L.stringWidth(e.text));let t=e.length,r=this.width;const s=e.map(e=>{if(e.width)return t--,r-=e.width,e.width}),o=t?Math.floor(r/t):0;return s.map((t,r)=>void 0===t?Math.max(o,function(e){const t=e.padding||[],r=1+(t[3]||0)+(t[1]||0);if(e.border)return r+4;return r}(e[r])):t)}}function B(e,t,r){return e.border?/[.']-+[.']/.test(t)?"":0!==t.trim().length?r:"  ":""}let L;const $=function({onlyFirst:e=!1}={}){const t=["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?(?:\\u0007|\\u001B\\u005C|\\u009C))","(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|");return new RegExp(t,e?void 0:"g")}();function j(e){if("string"!=typeof e)throw new TypeError(`Expected a \`string\`, got \`${typeof e}\``);return e.replace($,"")}function U(e,{ambiguousAsWide:t=!1}={}){return function(e){if(!Number.isSafeInteger(e))throw new TypeError(`Expected a code point, got \`${typeof e}\`.`)}(e),12288===(r=e)||r>=65281&&r<=65376||r>=65504&&r<=65510||function(e){return e>=4352&&e<=4447||8986===e||8987===e||9001===e||9002===e||e>=9193&&e<=9196||9200===e||9203===e||9725===e||9726===e||9748===e||9749===e||e>=9776&&e<=9783||e>=9800&&e<=9811||9855===e||e>=9866&&e<=9871||9875===e||9889===e||9898===e||9899===e||9917===e||9918===e||9924===e||9925===e||9934===e||9940===e||9962===e||9970===e||9971===e||9973===e||9978===e||9981===e||9989===e||9994===e||9995===e||10024===e||10060===e||10062===e||e>=10067&&e<=10069||10071===e||e>=10133&&e<=10135||10160===e||10175===e||11035===e||11036===e||11088===e||11093===e||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12773||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||94192===e||94193===e||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101631&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||110589===e||110590===e||e>=110592&&e<=110882||110898===e||e>=110928&&e<=110930||110933===e||e>=110948&&e<=110951||e>=110960&&e<=111355||e>=119552&&e<=119638||e>=119648&&e<=119670||126980===e||127183===e||127374===e||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||127568===e||127569===e||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||127988===e||e>=127992&&e<=128062||128064===e||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||128378===e||128405===e||128406===e||128420===e||e>=128507&&e<=128591||e>=128640&&e<=128709||128716===e||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||128747===e||128748===e||e>=128756&&e<=128764||e>=128992&&e<=129003||129008===e||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129673||e>=129679&&e<=129734||e>=129742&&e<=129756||e>=129759&&e<=129769||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141}(e)||t&&function(e){return 161===e||164===e||167===e||168===e||170===e||173===e||174===e||e>=176&&e<=180||e>=182&&e<=186||e>=188&&e<=191||198===e||208===e||215===e||216===e||e>=222&&e<=225||230===e||e>=232&&e<=234||236===e||237===e||240===e||242===e||243===e||e>=247&&e<=250||252===e||254===e||257===e||273===e||275===e||283===e||294===e||295===e||299===e||e>=305&&e<=307||312===e||e>=319&&e<=322||324===e||e>=328&&e<=331||333===e||338===e||339===e||358===e||359===e||363===e||462===e||464===e||466===e||468===e||470===e||472===e||474===e||476===e||593===e||609===e||708===e||711===e||e>=713&&e<=715||717===e||720===e||e>=728&&e<=731||733===e||735===e||e>=768&&e<=879||e>=913&&e<=929||e>=931&&e<=937||e>=945&&e<=961||e>=963&&e<=969||1025===e||e>=1040&&e<=1103||1105===e||8208===e||e>=8211&&e<=8214||8216===e||8217===e||8220===e||8221===e||e>=8224&&e<=8226||e>=8228&&e<=8231||8240===e||8242===e||8243===e||8245===e||8251===e||8254===e||8308===e||8319===e||e>=8321&&e<=8324||8364===e||8451===e||8453===e||8457===e||8467===e||8470===e||8481===e||8482===e||8486===e||8491===e||8531===e||8532===e||e>=8539&&e<=8542||e>=8544&&e<=8555||e>=8560&&e<=8569||8585===e||e>=8592&&e<=8601||8632===e||8633===e||8658===e||8660===e||8679===e||8704===e||8706===e||8707===e||8711===e||8712===e||8715===e||8719===e||8721===e||8725===e||8730===e||e>=8733&&e<=8736||8739===e||8741===e||e>=8743&&e<=8748||8750===e||e>=8756&&e<=8759||8764===e||8765===e||8776===e||8780===e||8786===e||8800===e||8801===e||e>=8804&&e<=8807||8810===e||8811===e||8814===e||8815===e||8834===e||8835===e||8838===e||8839===e||8853===e||8857===e||8869===e||8895===e||8978===e||e>=9312&&e<=9449||e>=9451&&e<=9547||e>=9552&&e<=9587||e>=9600&&e<=9615||e>=9618&&e<=9621||9632===e||9633===e||e>=9635&&e<=9641||9650===e||9651===e||9654===e||9655===e||9660===e||9661===e||9664===e||9665===e||e>=9670&&e<=9672||9675===e||e>=9678&&e<=9681||e>=9698&&e<=9701||9711===e||9733===e||9734===e||9737===e||9742===e||9743===e||9756===e||9758===e||9792===e||9794===e||9824===e||9825===e||e>=9827&&e<=9829||e>=9831&&e<=9834||9836===e||9837===e||9839===e||9886===e||9887===e||9919===e||e>=9926&&e<=9933||e>=9935&&e<=9939||e>=9941&&e<=9953||9955===e||9960===e||9961===e||e>=9963&&e<=9969||9972===e||e>=9974&&e<=9977||9979===e||9980===e||9982===e||9983===e||10045===e||e>=10102&&e<=10111||e>=11094&&e<=11097||e>=12872&&e<=12879||e>=57344&&e<=63743||e>=65024&&e<=65039||65533===e||e>=127232&&e<=127242||e>=127248&&e<=127277||e>=127280&&e<=127337||e>=127344&&e<=127373||127375===e||127376===e||e>=127387&&e<=127404||e>=917760&&e<=917999||e>=983040&&e<=1048573||e>=1048576&&e<=1114109}(e)?2:1;var r}var I=()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;const H=new Intl.Segmenter,M=/^\p{Default_Ignorable_Code_Point}$/u;function N(e,t={}){if("string"!=typeof e||0===e.length)return 0;const{ambiguousIsNarrow:r=!0,countAnsiEscapeCodes:s=!1}=t;if(s||(e=j(e)),0===e.length)return 0;let o=0;const n={ambiguousAsWide:!r};for(const{segment:t}of H.segment(e)){const e=t.codePointAt(0);e<=31||e>=127&&e<=159||(e>=8203&&e<=8207||65279===e||e>=768&&e<=879||e>=6832&&e<=6911||e>=7616&&e<=7679||e>=8400&&e<=8447||e>=65056&&e<=65071||e>=55296&&e<=57343||e>=65024&&e<=65039||M.test(t)||(I().test(t)?o+=2:o+=U(e,n)))}return o}const q=(e=0)=>t=>`[${t+e}m`,W=(e=0)=>t=>`[${38+e};5;${t}m`,z=(e=0)=>(t,r,s)=>`[${38+e};2;${t};${r};${s}m`,V={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};Object.keys(V.modifier);Object.keys(V.color),Object.keys(V.bgColor);const K=function(){const e=new Map;for(const[t,r]of Object.entries(V)){for(const[t,s]of Object.entries(r))V[t]={open:`[${s[0]}m`,close:`[${s[1]}m`},r[t]=V[t],e.set(s[0],s[1]);Object.defineProperty(V,t,{value:r,enumerable:!1})}return Object.defineProperty(V,"codes",{value:e,enumerable:!1}),V.color.close="[39m",V.bgColor.close="[49m",V.color.ansi=q(),V.color.ansi256=W(),V.color.ansi16m=z(),V.bgColor.ansi=q(10),V.bgColor.ansi256=W(10),V.bgColor.ansi16m=z(10),Object.defineProperties(V,{rgbToAnsi256:{value:(e,t,r)=>e===t&&t===r?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(r/255*5),enumerable:!1},hexToRgb:{value:e=>{const t=/[a-f\d]{6}|[a-f\d]{3}/i.exec(e.toString(16));if(!t)return[0,0,0];let[r]=t;3===r.length&&(r=[...r].map(e=>e+e).join(""));const s=Number.parseInt(r,16);return[s>>16&255,s>>8&255,255&s]},enumerable:!1},hexToAnsi256:{value:e=>V.rgbToAnsi256(...V.hexToRgb(e)),enumerable:!1},ansi256ToAnsi:{value:e=>{if(e<8)return 30+e;if(e<16)return e-8+90;let t,r,s;if(e>=232)t=(10*(e-232)+8)/255,r=t,s=t;else{const o=(e-=16)%36;t=Math.floor(e/36)/5,r=Math.floor(o/6)/5,s=o%6/5}const o=2*Math.max(t,r,s);if(0===o)return 30;let n=30+(Math.round(s)<<2|Math.round(r)<<1|Math.round(t));return 2===o&&(n+=60),n},enumerable:!1},rgbToAnsi:{value:(e,t,r)=>V.ansi256ToAnsi(V.rgbToAnsi256(e,t,r)),enumerable:!1},hexToAnsi:{value:e=>V.ansi256ToAnsi(V.hexToAnsi256(e)),enumerable:!1}}),V}(),Y=new Set(["",""]),Q="]8;;",Z=e=>`${Y.values().next().value}[${e}m`,X=e=>`${Y.values().next().value}${Q}${e}`,J=(e,t,r)=>{const s=[...t];let o=!1,n=!1,i=N(j(e.at(-1)));for(const[t,a]of s.entries()){const u=N(a);if(i+u<=r?e[e.length-1]+=a:(e.push(a),i=0),Y.has(a)){o=!0;n=s.slice(t+1,t+1+4).join("")===Q}o?n?""===a&&(o=!1,n=!1):"m"===a&&(o=!1):(i+=u,i===r&&t<s.length-1&&(e.push(""),i=0))}!i&&e.at(-1).length>0&&e.length>1&&(e[e.length-2]+=e.pop())},ee=(e,t,r={})=>{if(!1!==r.trim&&""===e.trim())return"";let s,o,n="";const i=(e=>e.split(" ").map(e=>N(e)))(e);let a=[""];for(const[s,o]of e.split(" ").entries()){!1!==r.trim&&(a[a.length-1]=a.at(-1).trimStart());let e=N(a.at(-1));if(0!==s&&(e>=t&&(!1===r.wordWrap||!1===r.trim)&&(a.push(""),e=0),(e>0||!1===r.trim)&&(a[a.length-1]+=" ",e++)),r.hard&&i[s]>t){const r=t-e,n=1+Math.floor((i[s]-r-1)/t);Math.floor((i[s]-1)/t)<n&&a.push(""),J(a,o,t);continue}if(e+i[s]>t&&e>0&&i[s]>0){if(!1===r.wordWrap&&e<t){J(a,o,t);continue}a.push("")}e+i[s]>t&&!1===r.wordWrap?J(a,o,t):a[a.length-1]+=o}!1!==r.trim&&(a=a.map(e=>(e=>{const t=e.split(" ");let r=t.length;for(;r>0&&!(N(t[r-1])>0);)r--;return r===t.length?e:t.slice(0,r).join(" ")+t.slice(r).join("")})(e)));const u=a.join("\n"),c=[...u];let l=0;for(const[e,t]of c.entries()){if(n+=t,Y.has(t)){const{groups:e}=new RegExp(`(?:\\[(?<code>\\d+)m|\\${Q}(?<uri>.*))`).exec(u.slice(l))||{groups:{}};if(void 0!==e.code){const t=Number.parseFloat(e.code);s=39===t?void 0:t}else void 0!==e.uri&&(o=0===e.uri.length?void 0:e.uri)}const r=K.codes.get(Number(s));"\n"===c[e+1]?(o&&(n+=X("")),s&&r&&(n+=Z(r))):"\n"===t&&(s&&r&&(n+=Z(s)),o&&(n+=X(o))),l+=t.length}return n};function te(e,t,r){return String(e).normalize().replaceAll("\r\n","\n").split("\n").map(e=>ee(e,t,r)).join("\n")}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
function re(e){if(e!==e.toLowerCase()&&e!==e.toUpperCase()||(e=e.toLowerCase()),-1===e.indexOf("-")&&-1===e.indexOf("_"))return e;{let t="",r=!1;const s=e.match(/^-+/);for(let o=s?s[0].length:0;o<e.length;o++){let s=e.charAt(o);r&&(r=!1,s=s.toUpperCase()),0===o||"-"!==s&&"_"!==s?"-"!==s&&"_"!==s&&(t+=s):r=!0}return t}}function se(e,t){const r=e.toLowerCase();t=t||"-";let s="";for(let o=0;o<e.length;o++){const n=r.charAt(o),i=e.charAt(o);s+=n!==i&&o>0?`${t}${r.charAt(o)}`:i}return s}function oe(e){return null!=e&&("number"==typeof e||(!!/^0x[0-9a-f]+$/i.test(e)||!/^0[^.]/.test(e)&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(e)))}
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var ne;
/**
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
let ie;!function(e){e.BOOLEAN="boolean",e.STRING="string",e.NUMBER="number",e.ARRAY="array"}(ne||(ne={}));function ae(e){return void 0!==e?e+1:1}function ue(e){return"__proto__"===e?"___proto___":e}
/**
 * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js
 *
 * @license
 * Copyright (c) 2016, Contributors
 * SPDX-License-Identifier: ISC
 */
var ce,le,pe;const he=process&&process.env&&process.env.YARGS_MIN_NODE_VERSION?Number(process.env.YARGS_MIN_NODE_VERSION):20,de=null!==(le=null===(ce=null===process||void 0===process?void 0:process.versions)||void 0===ce?void 0:ce.node)&&void 0!==le?le:null===(pe=null===process||void 0===process?void 0:process.version)||void 0===pe?void 0:pe.slice(1);if(de){if(Number(de.match(/^([^.]+)/)[1])<he)throw Error(`yargs parser supports a minimum Node.js version of ${he}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`)}const ge=process?process.env:{},fe=y?y(import.meta.url):void 0,me=new class{constructor(e){ie=e}parse(e,t){const r=Object.assign({alias:void 0,array:void 0,boolean:void 0,config:void 0,configObjects:void 0,configuration:void 0,coerce:void 0,count:void 0,default:void 0,envPrefix:void 0,narg:void 0,normalize:void 0,string:void 0,number:void 0,__:void 0,key:void 0},t),s=function(e){if(Array.isArray(e))return e.map(e=>"string"!=typeof e?e+"":e);e=e.trim();let t=0,r=null,s=null,o=null;const n=[];for(let i=0;i<e.length;i++)r=s,s=e.charAt(i)," "!==s||o?(s===o?o=null:"'"!==s&&'"'!==s||o||(o=s),n[t]||(n[t]=""),n[t]+=s):" "!==r&&t++;return n}(e),o="string"==typeof e,n=function(e){const t=[],r=Object.create(null);let s=!0;Object.keys(e).forEach(function(r){t.push([].concat(e[r],r))});for(;s;){s=!1;for(let e=0;e<t.length;e++)for(let r=e+1;r<t.length;r++){if(t[e].filter(function(e){return-1!==t[r].indexOf(e)}).length){t[e]=t[e].concat(t[r]),t.splice(r,1),s=!0;break}}}return t.forEach(function(e){const t=(e=e.filter(function(e,t,r){return r.indexOf(e)===t})).pop();void 0!==t&&"string"==typeof t&&(r[t]=e)}),r}(Object.assign(Object.create(null),r.alias)),i=Object.assign({"boolean-negation":!0,"camel-case-expansion":!0,"combine-arrays":!1,"dot-notation":!0,"duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"greedy-arrays":!0,"halt-at-non-option":!1,"nargs-eats-options":!1,"negation-prefix":"no-","parse-numbers":!0,"parse-positional-numbers":!0,"populate--":!1,"set-placeholder-key":!1,"short-option-groups":!0,"strip-aliased":!1,"strip-dashed":!1,"unknown-options-as-args":!1},r.configuration),a=Object.assign(Object.create(null),r.default),u=r.configObjects||[],c=r.envPrefix,l=i["populate--"],p=l?"--":"_",h=Object.create(null),d=Object.create(null),g=r.__||ie.format,f={aliases:Object.create(null),arrays:Object.create(null),bools:Object.create(null),strings:Object.create(null),numbers:Object.create(null),counts:Object.create(null),normalize:Object.create(null),configs:Object.create(null),nargs:Object.create(null),coercions:Object.create(null),keys:[]},m=/^-([0-9]+(\.[0-9]+)?|\.[0-9]+)$/,D=new RegExp("^--"+i["negation-prefix"]+"(.+)");[].concat(r.array||[]).filter(Boolean).forEach(function(e){const t="object"==typeof e?e.key:e,r=Object.keys(e).map(function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]}).filter(Boolean).pop();r&&(f[r][t]=!0),f.arrays[t]=!0,f.keys.push(t)}),[].concat(r.boolean||[]).filter(Boolean).forEach(function(e){f.bools[e]=!0,f.keys.push(e)}),[].concat(r.string||[]).filter(Boolean).forEach(function(e){f.strings[e]=!0,f.keys.push(e)}),[].concat(r.number||[]).filter(Boolean).forEach(function(e){f.numbers[e]=!0,f.keys.push(e)}),[].concat(r.count||[]).filter(Boolean).forEach(function(e){f.counts[e]=!0,f.keys.push(e)}),[].concat(r.normalize||[]).filter(Boolean).forEach(function(e){f.normalize[e]=!0,f.keys.push(e)}),"object"==typeof r.narg&&Object.entries(r.narg).forEach(([e,t])=>{"number"==typeof t&&(f.nargs[e]=t,f.keys.push(e))}),"object"==typeof r.coerce&&Object.entries(r.coerce).forEach(([e,t])=>{"function"==typeof t&&(f.coercions[e]=t,f.keys.push(e))}),void 0!==r.config&&(Array.isArray(r.config)||"string"==typeof r.config?[].concat(r.config).filter(Boolean).forEach(function(e){f.configs[e]=!0}):"object"==typeof r.config&&Object.entries(r.config).forEach(([e,t])=>{"boolean"!=typeof t&&"function"!=typeof t||(f.configs[e]=t)})),function(...e){e.forEach(function(e){Object.keys(e||{}).forEach(function(e){f.aliases[e]||(f.aliases[e]=[].concat(n[e]||[]),f.aliases[e].concat(e).forEach(function(t){if(/-/.test(t)&&i["camel-case-expansion"]){const r=re(t);r!==e&&-1===f.aliases[e].indexOf(r)&&(f.aliases[e].push(r),h[r]=!0)}}),f.aliases[e].concat(e).forEach(function(t){if(t.length>1&&/[A-Z]/.test(t)&&i["camel-case-expansion"]){const r=se(t,"-");r!==e&&-1===f.aliases[e].indexOf(r)&&(f.aliases[e].push(r),h[r]=!0)}}),f.aliases[e].forEach(function(t){f.aliases[t]=[e].concat(f.aliases[e].filter(function(e){return t!==e}))}))})})}(r.key,n,r.default,f.arrays),Object.keys(a).forEach(function(e){(f.aliases[e]||[]).forEach(function(t){a[t]=a[e]})});let E=null;Object.keys(f.counts).find(e=>x(e,f.arrays)?(E=Error(g("Invalid configuration: %s, opts.count excludes opts.array.",e)),!0):!!x(e,f.nargs)&&(E=Error(g("Invalid configuration: %s, opts.count excludes opts.narg.",e)),!0));let y=[];const b=Object.assign(Object.create(null),{_:[]}),_={};for(let e=0;e<s.length;e++){const t=s[e],r=t.replace(/^-{3,}/,"---");let o,n,a,u,c,l;if("--"!==t&&/^-/.test(t)&&L(t))v(t);else{if(r.match(/^---+(=|$)/)){v(t);continue}if(t.match(/^--.+=/)||!i["short-option-groups"]&&t.match(/^-.+=/))u=t.match(/^--?([^=]+)=([\s\S]*)$/),null!==u&&Array.isArray(u)&&u.length>=3&&(x(u[1],f.arrays)?e=w(e,u[1],s,u[2]):!1!==x(u[1],f.nargs)?e=F(e,u[1],s,u[2]):T(u[1],u[2],!0));else if(t.match(D)&&i["boolean-negation"])u=t.match(D),null!==u&&Array.isArray(u)&&u.length>=2&&(n=u[1],T(n,!!x(n,f.arrays)&&[!1]));else if(t.match(/^--.+/)||!i["short-option-groups"]&&t.match(/^-[^-]+/))u=t.match(/^--?(.+)/),null!==u&&Array.isArray(u)&&u.length>=2&&(n=u[1],x(n,f.arrays)?e=w(e,n,s):!1!==x(n,f.nargs)?e=F(e,n,s):(c=s[e+1],void 0===c||c.match(/^-/)&&!c.match(m)||x(n,f.bools)||x(n,f.counts)?/^(true|false)$/.test(c)?(T(n,c),e++):T(n,$(n)):(T(n,c),e++)));else if(t.match(/^-.\..+=/))u=t.match(/^-([^=]+)=([\s\S]*)$/),null!==u&&Array.isArray(u)&&u.length>=3&&T(u[1],u[2]);else if(t.match(/^-.\..+/)&&!t.match(m))c=s[e+1],u=t.match(/^-(.\..+)/),null!==u&&Array.isArray(u)&&u.length>=2&&(n=u[1],void 0===c||c.match(/^-/)||x(n,f.bools)||x(n,f.counts)?T(n,$(n)):(T(n,c),e++));else if(t.match(/^-[^-]+/)&&!t.match(m)){a=t.slice(1,-1).split(""),o=!1;for(let r=0;r<a.length;r++){if(c=t.slice(r+2),a[r+1]&&"="===a[r+1]){l=t.slice(r+3),n=a[r],x(n,f.arrays)?e=w(e,n,s,l):!1!==x(n,f.nargs)?e=F(e,n,s,l):T(n,l),o=!0;break}if("-"!==c){if(/[A-Za-z]/.test(a[r])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(c)&&!1===x(c,f.bools)){T(a[r],c),o=!0;break}if(a[r+1]&&a[r+1].match(/\W/)){T(a[r],c),o=!0;break}T(a[r],$(a[r]))}else T(a[r],c)}n=t.slice(-1)[0],o||"-"===n||(x(n,f.arrays)?e=w(e,n,s):!1!==x(n,f.nargs)?e=F(e,n,s):(c=s[e+1],void 0===c||/^(-|--)[^-]/.test(c)&&!c.match(m)||x(n,f.bools)||x(n,f.counts)?/^(true|false)$/.test(c)?(T(n,c),e++):T(n,$(n)):(T(n,c),e++)))}else if(t.match(/^-[0-9]$/)&&t.match(m)&&x(t.slice(1),f.bools))n=t.slice(1),T(n,$(n));else{if("--"===t){y=s.slice(e+1);break}if(i["halt-at-non-option"]){y=s.slice(e);break}v(t)}}}function v(e){const t=O("_",e);"string"!=typeof t&&"number"!=typeof t||b._.push(t)}function F(e,t,r,s){let o,n=x(t,f.nargs);if(n="number"!=typeof n||isNaN(n)?1:n,0===n)return j(s)||(E=Error(g("Argument unexpected for: %s",t))),T(t,$(t)),e;let a=j(s)?0:1;if(i["nargs-eats-options"])r.length-(e+1)+a<n&&(E=Error(g("Not enough arguments following: %s",t))),a=n;else{for(o=e+1;o<r.length&&(!r[o].match(/^-[^0-9]/)||r[o].match(m)||L(r[o]));o++)a++;a<n&&(E=Error(g("Not enough arguments following: %s",t)))}let u=Math.min(a,n);for(!j(s)&&u>0&&(T(t,s),u--),o=e+1;o<u+e+1;o++)T(t,r[o]);return e+u}function w(e,t,r,s){let n=[],u=s||r[e+1];const c=x(t,f.nargs);if(x(t,f.bools)&&!/^(true|false)$/.test(u))n.push(!0);else if(j(u)||j(s)&&/^-/.test(u)&&!m.test(u)&&!L(u)){if(void 0!==a[t]){const e=a[t];n=Array.isArray(e)?e:[e]}}else{j(s)||n.push(A(t,s,!0));for(let s=e+1;s<r.length&&!(!i["greedy-arrays"]&&n.length>0||c&&"number"==typeof c&&n.length>=c)&&(u=r[s],!/^-/.test(u)||m.test(u)||L(u));s++)e=s,n.push(A(t,u,o))}return"number"==typeof c&&(c&&n.length<c||isNaN(c)&&0===n.length)&&(E=Error(g("Not enough arguments following: %s",t))),T(t,n),e}function T(e,t,r=o){if(/-/.test(e)&&i["camel-case-expansion"]){const t=e.split(".").map(function(e){return re(e)}).join(".");C(e,t)}const s=A(e,t,r),n=e.split(".");if(G(b,n,s),f.aliases[e]&&f.aliases[e].forEach(function(e){const t=e.split(".");G(b,t,s)}),n.length>1&&i["dot-notation"]&&(f.aliases[n[0]]||[]).forEach(function(t){let r=t.split(".");const o=[].concat(n);o.shift(),r=r.concat(o),(f.aliases[e]||[]).includes(r.join("."))||G(b,r,s)}),x(e,f.normalize)&&!x(e,f.arrays)){[e].concat(f.aliases[e]||[]).forEach(function(e){Object.defineProperty(_,e,{enumerable:!0,get:()=>t,set(e){t="string"==typeof e?ie.normalize(e):e}})})}}function C(e,t){f.aliases[e]&&f.aliases[e].length||(f.aliases[e]=[t],h[t]=!0),f.aliases[t]&&f.aliases[t].length||C(t,e)}function A(e,t,r){r&&(t=function(e){return"string"!=typeof e||"'"!==e[0]&&'"'!==e[0]||e[e.length-1]!==e[0]?e:e.substring(1,e.length-1)}(t)),(x(e,f.bools)||x(e,f.counts))&&"string"==typeof t&&(t="true"===t);let s=Array.isArray(t)?t.map(function(t){return O(e,t)}):O(e,t);return x(e,f.counts)&&(j(s)||"boolean"==typeof s)&&(s=ae()),x(e,f.normalize)&&x(e,f.arrays)&&(s=Array.isArray(t)?t.map(e=>ie.normalize(e)):ie.normalize(t)),s}function O(e,t){if(!i["parse-positional-numbers"]&&"_"===e)return t;if(!x(e,f.strings)&&!x(e,f.bools)&&!Array.isArray(t)){(oe(t)&&i["parse-numbers"]&&Number.isSafeInteger(Math.floor(parseFloat(`${t}`)))||!j(t)&&x(e,f.numbers))&&(t=Number(t))}return t}function k(e,t){Object.keys(e).forEach(function(r){const s=e[r],o=t?t+"."+r:r;"object"==typeof s&&null!==s&&!Array.isArray(s)&&i["dot-notation"]?k(s,o):(!P(b,o.split("."))||x(o,f.arrays)&&i["combine-arrays"])&&T(o,s)})}function R(e,t){if(void 0===c)return;const r="string"==typeof c?c:"",s=ie.env();Object.keys(s).forEach(function(o){if(""===r||0===o.lastIndexOf(r,0)){const n=o.split("__").map(function(e,t){return 0===t&&(e=e.substring(r.length)),re(e)});(t&&f.configs[n.join(".")]||!t)&&!P(e,n)&&T(n.join("."),s[o])}})}function S(e,t,r,s=!1){Object.keys(r).forEach(function(o){P(e,o.split("."))||(G(e,o.split("."),r[o]),s&&(d[o]=!0),(t[o]||[]).forEach(function(t){P(e,t.split("."))||G(e,t.split("."),r[o])}))})}function P(e,t){let r=e;i["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach(function(e){r=r[e]||{}});const s=t[t.length-1];return"object"==typeof r&&s in r}function G(e,t,r){let s=e;i["dot-notation"]||(t=[t.join(".")]),t.slice(0,-1).forEach(function(e){e=ue(e),"object"==typeof s&&void 0===s[e]&&(s[e]={}),"object"!=typeof s[e]||Array.isArray(s[e])?(Array.isArray(s[e])?s[e].push({}):s[e]=[s[e],{}],s=s[e][s[e].length-1]):s=s[e]});const o=ue(t[t.length-1]),n=x(t.join("."),f.arrays),a=Array.isArray(r);let u=i["duplicate-arguments-array"];!u&&x(o,f.nargs)&&(u=!0,(!j(s[o])&&1===f.nargs[o]||Array.isArray(s[o])&&s[o].length===f.nargs[o])&&(s[o]=void 0)),r===ae()?s[o]=ae(s[o]):Array.isArray(s[o])?u&&n&&a?s[o]=i["flatten-duplicate-arrays"]?s[o].concat(r):(Array.isArray(s[o][0])?s[o]:[s[o]]).concat([r]):u||Boolean(n)!==Boolean(a)?s[o]=s[o].concat([r]):s[o]=r:void 0===s[o]&&n?s[o]=a?r:[r]:!u||void 0===s[o]||x(o,f.counts)||x(o,f.bools)?s[o]=r:s[o]=[s[o],r]}function x(e,t){const r=[].concat(f.aliases[e]||[],e),s=Object.keys(t),o=r.find(e=>s.includes(e));return!!o&&t[o]}function B(e){const t=Object.keys(f);return[].concat(t.map(e=>f[e])).some(function(t){return Array.isArray(t)?t.includes(e):t[e]})}function L(e){return i["unknown-options-as-args"]&&function(e){if(e=e.replace(/^-{3,}/,"--"),e.match(m))return!1;if(function(e){if(e.match(m)||!e.match(/^-[^-]+/))return!1;let t,r=!0;const s=e.slice(1).split("");for(let o=0;o<s.length;o++){if(t=e.slice(o+2),!B(s[o])){r=!1;break}if(s[o+1]&&"="===s[o+1]||"-"===t||/[A-Za-z]/.test(s[o])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(t)||s[o+1]&&s[o+1].match(/\W/))break}return r}(e))return!1;return!function(e,...t){return[].concat(...t).some(function(t){const r=e.match(t);return r&&B(r[1])})}(e,/^-+([^=]+?)=[\s\S]*$/,D,/^-+([^=]+?)$/,/^-+([^=]+?)-$/,/^-+([^=]+?\d+)$/,/^-+([^=]+?)\W+.*$/)}(e)}function $(e){return x(e,f.bools)||x(e,f.counts)||!(`${e}`in a)?(t=function(e){let t=ne.BOOLEAN;return x(e,f.strings)?t=ne.STRING:x(e,f.numbers)?t=ne.NUMBER:x(e,f.bools)?t=ne.BOOLEAN:x(e,f.arrays)&&(t=ne.ARRAY),t}(e),{[ne.BOOLEAN]:!0,[ne.STRING]:"",[ne.NUMBER]:void 0,[ne.ARRAY]:[]}[t]):a[e];var t}function j(e){return void 0===e}return R(b,!0),R(b,!1),function(e){const t=Object.create(null);S(t,f.aliases,a),Object.keys(f.configs).forEach(function(r){const s=e[r]||t[r];if(s)try{let e=null;const t=ie.resolve(ie.cwd(),s),o=f.configs[r];if("function"==typeof o){try{e=o(t)}catch(t){e=t}if(e instanceof Error)return void(E=e)}else e=ie.require(t);k(e)}catch(t){"PermissionDenied"===t.name?E=t:e[r]&&(E=Error(g("Invalid JSON config file: %s",s)))}})}(b),void 0!==u&&u.forEach(function(e){k(e)}),S(b,f.aliases,a,!0),function(e){let t;const r=new Set;Object.keys(e).forEach(function(s){if(!r.has(s)&&(t=x(s,f.coercions),"function"==typeof t))try{const o=O(s,t(e[s]));[].concat(f.aliases[s]||[],s).forEach(t=>{r.add(t),e[t]=o})}catch(e){E=e}})}(b),i["set-placeholder-key"]&&function(e){f.keys.forEach(t=>{~t.indexOf(".")||void 0===e[t]&&(e[t]=void 0)})}(b),Object.keys(f.counts).forEach(function(e){P(b,e.split("."))||T(e,0)}),l&&y.length&&(b[p]=[]),y.forEach(function(e){b[p].push(e)}),i["camel-case-expansion"]&&i["strip-dashed"]&&Object.keys(b).filter(e=>"--"!==e&&e.includes("-")).forEach(e=>{delete b[e]}),i["strip-aliased"]&&[].concat(...Object.keys(n).map(e=>n[e])).forEach(e=>{i["camel-case-expansion"]&&e.includes("-")&&delete b[e.split(".").map(e=>re(e)).join(".")],delete b[e]}),{aliases:Object.assign({},f.aliases),argv:Object.assign(_,b),configuration:i,defaulted:Object.assign({},d),error:E,newAliases:Object.assign({},h)}}}({cwd:process.cwd,env:()=>ge,format:m,normalize:n,resolve:s,require:e=>{if(void 0!==fe)return fe(e);if(e.match(/\.json$/))return JSON.parse(d(e,"utf8"));throw Error("only .json config files are supported in ESM")}}),De=function(e,t){return me.parse(e.slice(),t).argv};function Ee(){return process.versions.electron&&!process.defaultApp?0:1}function ye(e){return e.slice(Ee()+1)}De.detailed=function(e,t){return me.parse(e.slice(),t)},De.camelCase=re,De.decamelize=se,De.looksLikeNumber=oe;var be={fs:{readFileSync:d,writeFile:g},format:m,resolve:s,exists:e=>{try{return p(e).isFile()}catch(e){return!1}}};let _e;class ve{constructor(e){e=e||{},this.directory=e.directory||"./locales",this.updateFiles="boolean"!=typeof e.updateFiles||e.updateFiles,this.locale=e.locale||"en",this.fallbackToLanguage="boolean"!=typeof e.fallbackToLanguage||e.fallbackToLanguage,this.cache=Object.create(null),this.writeQueue=[]}__(...e){if("string"!=typeof arguments[0])return this._taggedLiteral(arguments[0],...arguments);const t=e.shift();let r=function(){};return"function"==typeof e[e.length-1]&&(r=e.pop()),r=r||function(){},this.cache[this.locale]||this._readLocaleFile(),!this.cache[this.locale][t]&&this.updateFiles?(this.cache[this.locale][t]=t,this._enqueueWrite({directory:this.directory,locale:this.locale,cb:r})):r(),_e.format.apply(_e.format,[this.cache[this.locale][t]||t].concat(e))}__n(){const e=Array.prototype.slice.call(arguments),t=e.shift(),r=e.shift(),s=e.shift();let o=function(){};"function"==typeof e[e.length-1]&&(o=e.pop()),this.cache[this.locale]||this._readLocaleFile();let n=1===s?t:r;if(this.cache[this.locale][t]){n=this.cache[this.locale][t][1===s?"one":"other"]}!this.cache[this.locale][t]&&this.updateFiles?(this.cache[this.locale][t]={one:t,other:r},this._enqueueWrite({directory:this.directory,locale:this.locale,cb:o})):o();const i=[n];return~n.indexOf("%d")&&i.push(s),_e.format.apply(_e.format,i.concat(e))}setLocale(e){this.locale=e}getLocale(){return this.locale}updateLocale(e){this.cache[this.locale]||this._readLocaleFile();for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(this.cache[this.locale][t]=e[t])}_taggedLiteral(e,...t){let r="";return e.forEach(function(e,s){const o=t[s+1];r+=e,void 0!==o&&(r+="%s")}),this.__.apply(this,[r].concat([].slice.call(t,1)))}_enqueueWrite(e){this.writeQueue.push(e),1===this.writeQueue.length&&this._processWriteQueue()}_processWriteQueue(){const e=this,t=this.writeQueue[0],r=t.directory,s=t.locale,o=t.cb,n=this._resolveLocaleFile(r,s),i=JSON.stringify(this.cache[s],null,2);_e.fs.writeFile(n,i,"utf-8",function(t){e.writeQueue.shift(),e.writeQueue.length>0&&e._processWriteQueue(),o(t)})}_readLocaleFile(){let e={};const t=this._resolveLocaleFile(this.directory,this.locale);try{_e.fs.readFileSync&&(e=JSON.parse(_e.fs.readFileSync(t,"utf-8")))}catch(r){if(r instanceof SyntaxError&&(r.message="syntax error in "+t),"ENOENT"!==r.code)throw r;e={}}this.cache[this.locale]=e}_resolveLocaleFile(e,t){let r=_e.resolve(e,"./",t+".json");if(this.fallbackToLanguage&&!this._fileExistsSync(r)&&~t.lastIndexOf("_")){const s=_e.resolve(e,"./",t.split("_")[0]+".json");this._fileExistsSync(s)&&(r=s)}return r}_fileExistsSync(e){return _e.exists(e)}}var Fe,we,Te="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Ce(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Ae=Ce(we?Fe:(we=1,Fe=function(e){if(void 0===e&&(e=2),e>=Error.stackTraceLimit)throw new TypeError("getCallerFile(position) requires position be less then Error.stackTraceLimit but position was: `"+e+"` and Error.stackTraceLimit was: `"+Error.stackTraceLimit+"`");var t=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t};var r=(new Error).stack;if(Error.prepareStackTrace=t,null!==r&&"object"==typeof r)return r[e]?r[e].getFileName():void 0}));const Oe=E(import.meta.url),ke=Oe.substring(0,Oe.lastIndexOf("node_modules")),Re=y(import.meta.url);var Se,Pe={assert:{notStrictEqual:t,strictEqual:e},cliui:function(e){return function(e,t){return L=t,new x({width:(null==e?void 0:e.width)||("object"==typeof process&&process.stdout&&process.stdout.columns?process.stdout.columns:80),wrap:null==e?void 0:e.wrap})}(e,{stringWidth:N,stripAnsi:j,wrap:te})},findUp:function(e,t){let r,n=s(".",e);for(p(n).isDirectory()||(n=o(n));;){if(r=t(n,h(n)),r)return s(n,r);if(n=o(r=n),r===n)break}},getEnv:e=>process.env[e],inspect:D,getProcessArgvBin:function(){return process.argv[Ee()]},mainFilename:ke||process.cwd(),Parser:De,path:{basename:c,dirname:o,extname:u,relative:a,resolve:s,join:i},process:{argv:()=>process.argv,cwd:process.cwd,emitWarning:(e,t)=>process.emitWarning(e,t),execPath:()=>process.execPath,exit:e=>{process.exit(e)},nextTick:process.nextTick,stdColumns:void 0!==process.stdout.columns?process.stdout.columns:null},readFileSync:d,readdirSync:h,require:Re,getCallerFile:()=>{const e=Ae(3);return e.match(/^file:\/\//)?E(e):e},stringWidth:N,y18n:(Se={directory:s(Oe,"../../../locales"),updateFiles:!1},function(e,t){_e=t;const r=new ve(e);return{__:r.__.bind(r),__n:r.__n.bind(r),setLocale:r.setLocale.bind(r),getLocale:r.getLocale.bind(r),updateLocale:r.updateLocale.bind(r),locale:r.locale}}(Se,be))};function Ge(e,t,r,s){r.assert.notStrictEqual(e,t,s)}function xe(e,t){t.assert.strictEqual(typeof e,"string")}function Be(e){return Object.keys(e)}function Le(e){return!!e&&!!e.then&&"function"==typeof e.then}class $e extends Error{constructor(e){super(e||"yargs error"),this.name="YError",Error.captureStackTrace&&Error.captureStackTrace(this,$e)}}function je(e){const t=e.replace(/\s{2,}/g," ").split(/\s+(?![^[]*]|[^<]*>)/),r=/\.*[\][<>]/g,s=t.shift();if(!s)throw new Error(`No command found in: ${e}`);const o={cmd:s.replace(r,""),demanded:[],optional:[]};return t.forEach((e,s)=>{let n=!1;e=e.replace(/\s/g,""),/\.+[\]>]/.test(e)&&s===t.length-1&&(n=!0),/^\[/.test(e)?o.optional.push({cmd:e.replace(r,"").split("|"),variadic:n}):o.demanded.push({cmd:e.replace(r,"").split("|"),variadic:n})}),o}const Ue=["first","second","third","fourth","fifth","sixth"];function Ie(e,t,r){try{let s=0;const[o,n,i]="object"==typeof e?[{demanded:[],optional:[]},e,t]:[je(`cmd ${e}`),t,r],a=[].slice.call(n);for(;a.length&&void 0===a[a.length-1];)a.pop();const u=i||a.length;if(u<o.demanded.length)throw new $e(`Not enough arguments provided. Expected ${o.demanded.length} but received ${a.length}.`);const c=o.demanded.length+o.optional.length;if(u>c)throw new $e(`Too many arguments provided. Expected max ${c} but received ${u}.`);o.demanded.forEach(e=>{const t=He(a.shift());0===e.cmd.filter(e=>e===t||"*"===e).length&&Me(t,e.cmd,s),s+=1}),o.optional.forEach(e=>{if(0===a.length)return;const t=He(a.shift());0===e.cmd.filter(e=>e===t||"*"===e).length&&Me(t,e.cmd,s),s+=1})}catch(e){console.warn(e.stack)}}function He(e){return Array.isArray(e)?"array":null===e?"null":typeof e}function Me(e,t,r){throw new $e(`Invalid ${Ue[r]||"manyith"} argument. Expected ${t.join(" or ")} but received ${e}.`)}class Ne{constructor(e){this.globalMiddleware=[],this.frozens=[],this.yargs=e}addMiddleware(e,t,r=!0,s=!1){if(Ie("<array|function> [boolean] [boolean] [boolean]",[e,t,r],arguments.length),Array.isArray(e)){for(let s=0;s<e.length;s++){if("function"!=typeof e[s])throw Error("middleware must be a function");const o=e[s];o.applyBeforeValidation=t,o.global=r}Array.prototype.push.apply(this.globalMiddleware,e)}else if("function"==typeof e){const o=e;o.applyBeforeValidation=t,o.global=r,o.mutates=s,this.globalMiddleware.push(e)}return this.yargs}addCoerceMiddleware(e,t){const r=this.yargs.getAliases();return this.globalMiddleware=this.globalMiddleware.filter(e=>{const s=[...r[t]||[],t];return!e.option||!s.includes(e.option)}),e.option=t,this.addMiddleware(e,!0,!0,!0)}getMiddleware(){return this.globalMiddleware}freeze(){this.frozens.push([...this.globalMiddleware])}unfreeze(){const e=this.frozens.pop();void 0!==e&&(this.globalMiddleware=e)}reset(){this.globalMiddleware=this.globalMiddleware.filter(e=>e.global)}}function qe(e,t,r,s){return r.reduce((e,r)=>{if(r.applyBeforeValidation!==s)return e;if(r.mutates){if(r.applied)return e;r.applied=!0}if(Le(e))return e.then(e=>Promise.all([e,r(e,t)])).then(([e,t])=>Object.assign(e,t));{const s=r(e,t);return Le(s)?s.then(t=>Object.assign(e,t)):Object.assign(e,s)}},e)}function We(e,t,r=e=>{throw e}){try{const r="function"==typeof e?e():e;return Le(r)?r.then(e=>t(e)):t(r)}catch(e){return r(e)}}const ze=/(^\*)|(^\$0)/;class Ve{constructor(e,t,r,s){this.requireCache=new Set,this.handlers={},this.aliasMap={},this.frozens=[],this.shim=s,this.usage=e,this.globalMiddleware=r,this.validation=t}addDirectory(e,t,r,s){s=s||{},this.requireCache.add(r);const o=this.shim.path.resolve(this.shim.path.dirname(r),e),n=this.shim.readdirSync(o,{recursive:!!s.recurse});Array.isArray(s.extensions)||(s.extensions=["js"]);const i="function"==typeof s.visit?s.visit:e=>e;for(const e of n){const r=e.toString();if(s.exclude){let e=!1;if(e="function"==typeof s.exclude?s.exclude(r):s.exclude.test(r),e)continue}if(s.include){let e=!1;if(e="function"==typeof s.include?s.include(r):s.include.test(r),!e)continue}let n=!1;for(const e of s.extensions)r.endsWith(e)&&(n=!0);if(n){const e=this.shim.path.join(o,r),s=t(e),n=Object.create(null,Object.getOwnPropertyDescriptors({...s}));if(i(n,e,r)){if(this.requireCache.has(e))continue;this.requireCache.add(e),n.command||(n.command=this.shim.path.basename(e,this.shim.path.extname(e))),this.addHandler(n)}}}}addHandler(e,t,r,s,o,n){let i=[];const a=function(e){return e?e.map(e=>(e.applyBeforeValidation=!1,e)):[]}(o);if(s=s||(()=>{}),Array.isArray(e))if(function(e){return e.every(e=>"string"==typeof e)}(e))[e,...i]=e;else for(const t of e)this.addHandler(t);else{if(function(e){return"object"==typeof e&&!Array.isArray(e)}(e)){let t=Array.isArray(e.command)||"string"==typeof e.command?e.command:null;if(null===t)throw new Error(`No command name given for module: ${this.shim.inspect(e)}`);return e.aliases&&(t=[].concat(t).concat(e.aliases)),void this.addHandler(t,this.extractDesc(e),e.builder,e.handler,e.middlewares,e.deprecated)}if(Ke(r))return void this.addHandler([e].concat(i),t,r.builder,r.handler,r.middlewares,r.deprecated)}if("string"==typeof e){const o=je(e);i=i.map(e=>je(e).cmd);let u=!1;const c=[o.cmd].concat(i).filter(e=>!ze.test(e)||(u=!0,!1));0===c.length&&u&&c.push("$0"),u&&(o.cmd=c[0],i=c.slice(1),e=e.replace(ze,o.cmd)),i.forEach(e=>{this.aliasMap[e]=o.cmd}),!1!==t&&this.usage.command(e,t,u,i,n),this.handlers[o.cmd]={original:e,description:t,handler:s,builder:r||{},middlewares:a,deprecated:n,demanded:o.demanded,optional:o.optional},u&&(this.defaultCommand=this.handlers[o.cmd])}}getCommandHandlers(){return this.handlers}getCommands(){return Object.keys(this.handlers).concat(Object.keys(this.aliasMap))}hasDefaultCommand(){return!!this.defaultCommand}runCommand(e,t,r,s,o,n){const i=this.handlers[e]||this.handlers[this.aliasMap[e]]||this.defaultCommand,a=t.getInternalMethods().getContext(),u=a.commands.slice(),c=!e;e&&(a.commands.push(e),a.fullCommands.push(i.original));const l=this.applyBuilderUpdateUsageAndParse(c,i,t,r.aliases,u,s,o,n);return Le(l)?l.then(e=>this.applyMiddlewareAndGetResult(c,i,e.innerArgv,a,o,e.aliases,t)):this.applyMiddlewareAndGetResult(c,i,l.innerArgv,a,o,l.aliases,t)}applyBuilderUpdateUsageAndParse(e,t,r,s,o,n,i,a){const u=t.builder;let c=r;if(Ye(u)){r.getInternalMethods().getUsageInstance().freeze();const l=u(r.getInternalMethods().reset(s),a);if(Le(l))return l.then(s=>{var a;return c=(a=s)&&"function"==typeof a.getInternalMethods?s:r,this.parseAndUpdateUsage(e,t,c,o,n,i)})}else(function(e){return"object"==typeof e})(u)&&(r.getInternalMethods().getUsageInstance().freeze(),c=r.getInternalMethods().reset(s),Object.keys(t.builder).forEach(e=>{c.option(e,u[e])}));return this.parseAndUpdateUsage(e,t,c,o,n,i)}parseAndUpdateUsage(e,t,r,s,o,n){e&&r.getInternalMethods().getUsageInstance().unfreeze(!0),this.shouldUpdateUsage(r)&&r.getInternalMethods().getUsageInstance().usage(this.usageFromParentCommandsCommandHandler(s,t),t.description);const i=r.getInternalMethods().runYargsParserAndExecuteCommands(null,void 0,!0,o,n);return Le(i)?i.then(e=>({aliases:r.parsed.aliases,innerArgv:e})):{aliases:r.parsed.aliases,innerArgv:i}}shouldUpdateUsage(e){return!e.getInternalMethods().getUsageInstance().getUsageDisabled()&&0===e.getInternalMethods().getUsageInstance().getUsage().length}usageFromParentCommandsCommandHandler(e,t){const r=ze.test(t.original)?t.original.replace(ze,"").trim():t.original,s=e.filter(e=>!ze.test(e));return s.push(r),`$0 ${s.join(" ")}`}handleValidationAndGetResult(e,t,r,s,o,n,i,a){if(!n.getInternalMethods().getHasOutput()){const t=n.getInternalMethods().runValidation(o,a,n.parsed.error,e);r=We(r,e=>(t(e),e))}if(t.handler&&!n.getInternalMethods().getHasOutput()){n.getInternalMethods().setHasOutput();const s=!!n.getOptions().configuration["populate--"];n.getInternalMethods().postProcess(r,s,!1,!1),r=We(r=qe(r,n,i,!1),e=>{const r=t.handler(e);return Le(r)?r.then(()=>e):e}),e||n.getInternalMethods().getUsageInstance().cacheHelpMessage(),Le(r)&&!n.getInternalMethods().hasParseCallback()&&r.catch(e=>{try{n.getInternalMethods().getUsageInstance().fail(null,e)}catch(e){}})}return e||(s.commands.pop(),s.fullCommands.pop()),r}applyMiddlewareAndGetResult(e,t,r,s,o,n,i){let a={};if(o)return r;i.getInternalMethods().getHasOutput()||(a=this.populatePositionals(t,r,s,i));const u=this.globalMiddleware.getMiddleware().slice(0).concat(t.middlewares),c=qe(r,i,u,!0);return Le(c)?c.then(r=>this.handleValidationAndGetResult(e,t,r,s,n,i,u,a)):this.handleValidationAndGetResult(e,t,c,s,n,i,u,a)}populatePositionals(e,t,r,s){t._=t._.slice(r.commands.length);const o=e.demanded.slice(0),n=e.optional.slice(0),i={};for(this.validation.positionalCount(o.length,t._.length);o.length;){const e=o.shift();this.populatePositional(e,t,i)}for(;n.length;){const e=n.shift();this.populatePositional(e,t,i)}return t._=r.commands.concat(t._.map(e=>""+e)),this.postProcessPositionals(t,i,this.cmdToParseOptions(e.original),s),i}populatePositional(e,t,r){const s=e.cmd[0];e.variadic?r[s]=t._.splice(0).map(String):t._.length&&(r[s]=[String(t._.shift())])}cmdToParseOptions(e){const t={array:[],default:{},alias:{},demand:{}},r=je(e);return r.demanded.forEach(e=>{const[r,...s]=e.cmd;e.variadic&&(t.array.push(r),t.default[r]=[]),t.alias[r]=s,t.demand[r]=!0}),r.optional.forEach(e=>{const[r,...s]=e.cmd;e.variadic&&(t.array.push(r),t.default[r]=[]),t.alias[r]=s}),t}postProcessPositionals(e,t,r,s){const o=Object.assign({},s.getOptions());o.default=Object.assign(r.default,o.default);for(const e of Object.keys(r.alias))o.alias[e]=(o.alias[e]||[]).concat(r.alias[e]);o.array=o.array.concat(r.array),o.config={};const n=[];if(Object.keys(t).forEach(e=>{t[e].map(t=>{o.configuration["unknown-options-as-args"]&&(o.key[e]=!0),n.push(`--${e}`),n.push(t)})}),!n.length)return;const i=Object.assign({},o.configuration,{"populate--":!1}),a=this.shim.Parser.detailed(n,Object.assign({},o,{configuration:i}));if(a.error)s.getInternalMethods().getUsageInstance().fail(a.error.message,a.error);else{const r=Object.keys(t);Object.keys(t).forEach(e=>{r.push(...a.aliases[e])}),Object.keys(a.argv).forEach(o=>{r.includes(o)&&(t[o]||(t[o]=a.argv[o]),!this.isInConfigs(s,o)&&!this.isDefaulted(s,o)&&Object.prototype.hasOwnProperty.call(e,o)&&Object.prototype.hasOwnProperty.call(a.argv,o)&&(Array.isArray(e[o])||Array.isArray(a.argv[o]))?e[o]=[].concat(e[o],a.argv[o]):e[o]=a.argv[o])})}}isDefaulted(e,t){const{default:r}=e.getOptions();return Object.prototype.hasOwnProperty.call(r,t)||Object.prototype.hasOwnProperty.call(r,this.shim.Parser.camelCase(t))}isInConfigs(e,t){const{configObjects:r}=e.getOptions();return r.some(e=>Object.prototype.hasOwnProperty.call(e,t))||r.some(e=>Object.prototype.hasOwnProperty.call(e,this.shim.Parser.camelCase(t)))}runDefaultBuilderOn(e){if(!this.defaultCommand)return;if(this.shouldUpdateUsage(e)){const t=ze.test(this.defaultCommand.original)?this.defaultCommand.original:this.defaultCommand.original.replace(/^[^[\]<>]*/,"$0 ");e.getInternalMethods().getUsageInstance().usage(t,this.defaultCommand.description)}const t=this.defaultCommand.builder;if(Ye(t))return t(e,!0);Ke(t)||Object.keys(t).forEach(r=>{e.option(r,t[r])})}extractDesc({describe:e,description:t,desc:r}){for(const s of[e,t,r]){if("string"==typeof s||!1===s)return s;Ge(s,!0,this.shim)}return!1}freeze(){this.frozens.push({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand})}unfreeze(){const e=this.frozens.pop();Ge(e,void 0,this.shim),({handlers:this.handlers,aliasMap:this.aliasMap,defaultCommand:this.defaultCommand}=e)}reset(){return this.handlers={},this.aliasMap={},this.defaultCommand=void 0,this.requireCache=new Set,this}}function Ke(e){return"object"==typeof e&&!!e.builder&&"function"==typeof e.handler}function Ye(e){return"function"==typeof e}function Qe(e={},t=()=>!0){const r={};return Be(e).forEach(s=>{t(s,e[s])&&(r[s]=e[s])}),r}function Ze(e){"undefined"!=typeof process&&[process.stdout,process.stderr].forEach(t=>{const r=t;r._handle&&r.isTTY&&"function"==typeof r._handle.setBlocking&&r._handle.setBlocking(e)})}function Xe(e){return"boolean"==typeof e}function Je(e,t){const r=t.y18n.__,s={},o=[];s.failFn=function(e){o.push(e)};let n=null,i=null,a=!0;s.showHelpOnFail=function(t=!0,r){const[o,u]="string"==typeof t?[!0,t]:[t,r];return e.getInternalMethods().isGlobalContext()&&(i=u),n=u,a=o,s};let u=!1;s.fail=function(t,r){const c=e.getInternalMethods().getLoggerInstance();if(!o.length){if(e.getExitProcess()&&Ze(!0),!u){u=!0,a&&(e.showHelp("error"),c.error()),(t||r)&&c.error(t||r);const s=n||i;s&&((t||r)&&c.error(""),c.error(s))}if(r=r||new $e(t),e.getExitProcess())return e.exit(1);if(e.getInternalMethods().hasParseCallback())return e.exit(1,r);throw r}for(let e=o.length-1;e>=0;--e){const n=o[e];if(Xe(n)){if(r)throw r;if(t)throw Error(t)}else n(t,r,s)}};let c=[],l=!1;s.usage=(e,t)=>null===e?(l=!0,c=[],s):(l=!1,c.push([e,t||""]),s),s.getUsage=()=>c,s.getUsageDisabled=()=>l,s.getPositionalGroupName=()=>r("Positionals:");let p=[];s.example=(e,t)=>{p.push([e,t||""])};let h=[];s.command=function(e,t,r,s,o=!1){r&&(h=h.map(e=>(e[2]=!1,e))),h.push([e,t||"",r,s,o])},s.getCommands=()=>h;let d={};s.describe=function(e,t){Array.isArray(e)?e.forEach(e=>{s.describe(e,t)}):"object"==typeof e?Object.keys(e).forEach(t=>{s.describe(t,e[t])}):d[e]=t},s.getDescriptions=()=>d;let g=[];s.epilog=e=>{g.push(e)};let f,m=!1;s.wrap=e=>{m=!0,f=e},s.getWrap=()=>t.getEnv("YARGS_DISABLE_WRAP")?null:(m||(f=function(){const e=80;return t.process.stdColumns?Math.min(e,t.process.stdColumns):e}(),m=!0),f);const D="__yargsString__:";function E(e,r,s){let o=0;return Array.isArray(e)||(e=Object.values(e).map(e=>[e])),e.forEach(e=>{o=Math.max(t.stringWidth(s?`${s} ${rt(e[0])}`:rt(e[0]))+tt(e[0]),o)}),r&&(o=Math.min(o,parseInt((.5*r).toString(),10))),o}let y;function b(t){return e.getOptions().hiddenOptions.indexOf(t)<0||e.parsed.argv[e.getOptions().showHiddenOpt]}function _(e,t){let s=`[${r("default:")} `;if(void 0===e&&!t)return null;if(t)s+=t;else switch(typeof e){case"string":s+=`"${e}"`;break;case"object":s+=JSON.stringify(e);break;default:s+=e}return`${s}]`}s.deferY18nLookup=e=>D+e,s.help=function(){if(y)return y;!function(){const t=e.getDemandedOptions(),r=e.getOptions();(Object.keys(r.alias)||[]).forEach(o=>{r.alias[o].forEach(n=>{d[n]&&s.describe(o,d[n]),n in t&&e.demandOption(o,t[n]),r.boolean.includes(n)&&e.boolean(o),r.count.includes(n)&&e.count(o),r.string.includes(n)&&e.string(o),r.normalize.includes(n)&&e.normalize(o),r.array.includes(n)&&e.array(o),r.number.includes(n)&&e.number(o)})})}();const o=e.customScriptName?e.$0:t.path.basename(e.$0),n=e.getDemandedOptions(),i=e.getDemandedCommands(),a=e.getDeprecatedOptions(),u=e.getGroups(),f=e.getOptions();let m=[];m=m.concat(Object.keys(d)),m=m.concat(Object.keys(n)),m=m.concat(Object.keys(i)),m=m.concat(Object.keys(f.default)),m=m.filter(b),m=Object.keys(m.reduce((e,t)=>("_"!==t&&(e[t]=!0),e),{}));const v=s.getWrap(),F=t.cliui({width:v,wrap:!!v});if(!l)if(c.length)c.forEach(e=>{F.div({text:`${e[0].replace(/\$0/g,o)}`}),e[1]&&F.div({text:`${e[1]}`,padding:[1,0,0,0]})}),F.div();else if(h.length){let e=null;e=i._?`${o} <${r("command")}>\n`:`${o} [${r("command")}]\n`,F.div(`${e}`)}if(h.length>1||1===h.length&&!h[0][2]){F.div(r("Commands:"));const t=e.getInternalMethods().getContext(),s=t.commands.length?`${t.commands.join(" ")} `:"";!0===e.getInternalMethods().getParserConfiguration()["sort-commands"]&&(h=h.sort((e,t)=>e[0].localeCompare(t[0])));const n=o?`${o} `:"";h.forEach(e=>{const t=`${n}${s}${e[0].replace(/^\$0 ?/,"")}`;F.span({text:t,padding:[0,2,0,2],width:E(h,v,`${o}${s}`)+4},{text:e[1]});const i=[];e[2]&&i.push(`[${r("default")}]`),e[3]&&e[3].length&&i.push(`[${r("aliases:")} ${e[3].join(", ")}]`),e[4]&&("string"==typeof e[4]?i.push(`[${r("deprecated: %s",e[4])}]`):i.push(`[${r("deprecated")}]`)),i.length?F.div({text:i.join(" "),padding:[0,0,0,2],align:"right"}):F.div()}),F.div()}const w=(Object.keys(f.alias)||[]).concat(Object.keys(e.parsed.newAliases)||[]);m=m.filter(t=>!e.parsed.newAliases[t]&&w.every(e=>-1===(f.alias[e]||[]).indexOf(t)));const T=r("Options:");u[T]||(u[T]=[]),function(e,t,r,s){let o=[],n=null;Object.keys(r).forEach(e=>{o=o.concat(r[e])}),e.forEach(e=>{n=[e].concat(t[e]),n.some(e=>-1!==o.indexOf(e))||r[s].push(e)})}(m,f.alias,u,T);const C=e=>/^--/.test(rt(e)),A=Object.keys(u).filter(e=>u[e].length>0).map(e=>({groupName:e,normalizedKeys:u[e].filter(b).map(e=>{if(w.includes(e))return e;for(let t,r=0;void 0!==(t=w[r]);r++)if((f.alias[t]||[]).includes(e))return t;return e})})).filter(({normalizedKeys:e})=>e.length>0).map(({groupName:e,normalizedKeys:t})=>{const r=t.reduce((t,r)=>(t[r]=[r].concat(f.alias[r]||[]).map(t=>e===s.getPositionalGroupName()?t:(/^[0-9]$/.test(t)?f.boolean.includes(r)?"-":"--":t.length>1?"--":"-")+t).sort((e,t)=>C(e)===C(t)?0:C(e)?1:-1).join(", "),t),{});return{groupName:e,normalizedKeys:t,switches:r}});if(A.filter(({groupName:e})=>e!==s.getPositionalGroupName()).some(({normalizedKeys:e,switches:t})=>!e.every(e=>C(t[e])))&&A.filter(({groupName:e})=>e!==s.getPositionalGroupName()).forEach(({normalizedKeys:e,switches:t})=>{e.forEach(e=>{var r,s;C(t[e])&&(t[e]=(r=t[e],s=4,et(r)?{text:r.text,indentation:r.indentation+s}:{text:r,indentation:s}))})}),A.forEach(({groupName:t,normalizedKeys:o,switches:i})=>{F.div(t),o.forEach(t=>{const o=i[t];let u=d[t]||"",c=null;u.includes(D)&&(u=r(u.substring(16))),f.boolean.includes(t)&&(c=`[${r("boolean")}]`),f.count.includes(t)&&(c=`[${r("count")}]`),f.string.includes(t)&&(c=`[${r("string")}]`),f.normalize.includes(t)&&(c=`[${r("string")}]`),f.array.includes(t)&&(c=`[${r("array")}]`),f.number.includes(t)&&(c=`[${r("number")}]`);const l=[t in a?(p=a[t],"string"==typeof p?`[${r("deprecated: %s",p)}]`:`[${r("deprecated")}]`):null,c,t in n?`[${r("required")}]`:null,f.choices&&f.choices[t]?`[${r("choices:")} ${s.stringifiedValues(f.choices[t])}]`:null,_(f.default[t],f.defaultDescription[t])].filter(Boolean).join(" ");var p;F.span({text:rt(o),padding:[0,2,0,2+tt(o)],width:E(i,v)+4},u);const h=!0===e.getInternalMethods().getUsageConfiguration()["hide-types"];l&&!h?F.div({text:l,padding:[0,0,0,2],align:"right"}):F.div()}),F.div()}),p.length&&(F.div(r("Examples:")),p.forEach(e=>{e[0]=e[0].replace(/\$0/g,o)}),p.forEach(e=>{""===e[1]?F.div({text:e[0],padding:[0,2,0,2]}):F.div({text:e[0],padding:[0,2,0,2],width:E(p,v)+4},{text:e[1]})}),F.div()),g.length>0){const e=g.map(e=>e.replace(/\$0/g,o)).join("\n");F.div(`${e}\n`)}return F.toString().replace(/\s*$/,"")},s.cacheHelpMessage=function(){y=this.help()},s.clearCachedHelpMessage=function(){y=void 0},s.hasCachedHelpMessage=function(){return!!y},s.showHelp=t=>{const r=e.getInternalMethods().getLoggerInstance();t||(t="error");("function"==typeof t?t:r[t])(s.help())},s.functionDescription=e=>["(",e.name?t.Parser.decamelize(e.name,"-"):r("generated-value"),")"].join(""),s.stringifiedValues=function(e,t){let r="";const s=t||", ",o=[].concat(e);return e&&o.length?(o.forEach(e=>{r.length&&(r+=s),r+=JSON.stringify(e)}),r):r};let v=null;s.version=e=>{v=e},s.showVersion=t=>{const r=e.getInternalMethods().getLoggerInstance();t||(t="error");("function"==typeof t?t:r[t])(v)},s.reset=function(e){return n=null,u=!1,c=[],l=!1,g=[],p=[],h=[],d=Qe(d,t=>!e[t]),s};const F=[];return s.freeze=function(){F.push({failMessage:n,failureOutput:u,usages:c,usageDisabled:l,epilogs:g,examples:p,commands:h,descriptions:d})},s.unfreeze=function(e=!1){const t=F.pop();t&&(e?(d={...t.descriptions,...d},h=[...t.commands,...h],c=[...t.usages,...c],p=[...t.examples,...p],g=[...t.epilogs,...g]):({failMessage:n,failureOutput:u,usages:c,usageDisabled:l,epilogs:g,examples:p,commands:h,descriptions:d}=t))},s}function et(e){return"object"==typeof e}function tt(e){return et(e)?e.indentation:0}function rt(e){return et(e)?e.text:e}class st{constructor(e,t,r,s){var o,n,i;this.yargs=e,this.usage=t,this.command=r,this.shim=s,this.completionKey="get-yargs-completions",this.aliases=null,this.customCompletionFunction=null,this.indexAfterLastReset=0,this.zshShell=null!==(i=(null===(o=this.shim.getEnv("SHELL"))||void 0===o?void 0:o.includes("zsh"))||(null===(n=this.shim.getEnv("ZSH_NAME"))||void 0===n?void 0:n.includes("zsh")))&&void 0!==i&&i}defaultCompletion(e,t,r,s){const o=this.command.getCommandHandlers();for(let t=0,r=e.length;t<r;++t)if(o[e[t]]&&o[e[t]].builder){const r=o[e[t]].builder;if(Ye(r)){this.indexAfterLastReset=t+1;const e=this.yargs.getInternalMethods().reset();return r(e,!0),e.argv}}const n=[];this.commandCompletions(n,e,r),this.optionCompletions(n,e,t,r),this.choicesFromOptionsCompletions(n,e,t,r),this.choicesFromPositionalsCompletions(n,e,t,r),s(null,n)}commandCompletions(e,t,r){const s=this.yargs.getInternalMethods().getContext().commands;r.match(/^-/)||s[s.length-1]===r||this.previousArgHasChoices(t)||this.usage.getCommands().forEach(r=>{const s=je(r[0]).cmd;if(-1===t.indexOf(s))if(this.zshShell){const t=r[1]||"";e.push(s.replace(/:/g,"\\:")+":"+t)}else e.push(s)})}optionCompletions(e,t,r,s){if((s.match(/^-/)||""===s&&0===e.length)&&!this.previousArgHasChoices(t)){const r=this.yargs.getOptions(),o=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[];Object.keys(r.key).forEach(n=>{const i=!!r.configuration["boolean-negation"]&&r.boolean.includes(n);o.includes(n)||r.hiddenOptions.includes(n)||this.argsContainKey(t,n,i)||this.completeOptionKey(n,e,s,i&&!!r.default[n])})}}choicesFromOptionsCompletions(e,t,r,s){if(this.previousArgHasChoices(t)){const r=this.getPreviousArgChoices(t);r&&r.length>0&&e.push(...r.map(e=>e.replace(/:/g,"\\:")))}}choicesFromPositionalsCompletions(e,t,r,s){if(""===s&&e.length>0&&this.previousArgHasChoices(t))return;const o=this.yargs.getGroups()[this.usage.getPositionalGroupName()]||[],n=Math.max(this.indexAfterLastReset,this.yargs.getInternalMethods().getContext().commands.length+1),i=o[r._.length-n-1];if(!i)return;const a=this.yargs.getOptions().choices[i]||[];for(const t of a)t.startsWith(s)&&e.push(t.replace(/:/g,"\\:"))}getPreviousArgChoices(e){if(e.length<1)return;let t=e[e.length-1],r="";if(!t.startsWith("-")&&e.length>1&&(r=t,t=e[e.length-2]),!t.startsWith("-"))return;const s=t.replace(/^-+/,""),o=this.yargs.getOptions(),n=[s,...this.yargs.getAliases()[s]||[]];let i;for(const e of n)if(Object.prototype.hasOwnProperty.call(o.key,e)&&Array.isArray(o.choices[e])){i=o.choices[e];break}return i?i.filter(e=>!r||e.startsWith(r)):void 0}previousArgHasChoices(e){const t=this.getPreviousArgChoices(e);return void 0!==t&&t.length>0}argsContainKey(e,t,r){const s=t=>-1!==e.indexOf((/^[^0-9]$/.test(t)?"-":"--")+t);if(s(t))return!0;if(r&&s(`no-${t}`))return!0;if(this.aliases)for(const e of this.aliases[t])if(s(e))return!0;return!1}completeOptionKey(e,t,r,s){var o,n,i,a;let u=e;if(this.zshShell){const t=this.usage.getDescriptions(),r=null===(n=null===(o=null==this?void 0:this.aliases)||void 0===o?void 0:o[e])||void 0===n?void 0:n.find(e=>{const r=t[e];return"string"==typeof r&&r.length>0}),s=r?t[r]:void 0,c=null!==(a=null!==(i=t[e])&&void 0!==i?i:s)&&void 0!==a?a:"";u=`${e.replace(/:/g,"\\:")}:${c.replace("__yargsString__:","").replace(/(\r\n|\n|\r)/gm," ")}`}const c=!/^--/.test(r)&&(e=>/^[^0-9]$/.test(e))(e)?"-":"--";t.push(c+u),s&&t.push(c+"no-"+u)}customCompletion(e,t,r,s){if(Ge(this.customCompletionFunction,null,this.shim),this.customCompletionFunction.length<3){const e=this.customCompletionFunction(r,t);return Le(e)?e.then(e=>{this.shim.process.nextTick(()=>{s(null,e)})}).catch(e=>{this.shim.process.nextTick(()=>{s(e,void 0)})}):s(null,e)}return function(e){return e.length>3}(this.customCompletionFunction)?this.customCompletionFunction(r,t,(o=s)=>this.defaultCompletion(e,t,r,o),e=>{s(null,e)}):this.customCompletionFunction(r,t,e=>{s(null,e)})}getCompletion(e,t){const r=e.length?e[e.length-1]:"",s=this.yargs.parse(e,!0),o=this.customCompletionFunction?s=>this.customCompletion(e,s,r,t):s=>this.defaultCompletion(e,s,r,t);return Le(s)?s.then(o):o(s)}generateCompletionScript(e,t){let r=this.zshShell?'#compdef {{app_name}}\n###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.zshrc\n#    or {{app_path}} {{completion_command}} >> ~/.zprofile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n  local reply\n  local si=$IFS\n  IFS=$\'\n\' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" {{app_path}} --get-yargs-completions "${words[@]}"))\n  IFS=$si\n  if [[ ${#reply} -gt 0 ]]; then\n    _describe \'values\' reply\n  else\n    _default\n  fi\n}\nif [[ "\'${zsh_eval_context[-1]}" == "loadautofunc" ]]; then\n  _{{app_name}}_yargs_completions "$@"\nelse\n  compdef _{{app_name}}_yargs_completions {{app_name}}\nfi\n###-end-{{app_name}}-completions-###\n':'###-begin-{{app_name}}-completions-###\n#\n# yargs command completion script\n#\n# Installation: {{app_path}} {{completion_command}} >> ~/.bashrc\n#    or {{app_path}} {{completion_command}} >> ~/.bash_profile on OSX.\n#\n_{{app_name}}_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word="${COMP_WORDS[COMP_CWORD]}"\n    args=("${COMP_WORDS[@]}")\n\n    # ask yargs to generate completions.\n    # see https://stackoverflow.com/a/40944195/7080036 for the spaces-handling awk\n    mapfile -t type_list < <({{app_path}} --get-yargs-completions "${args[@]}")\n    mapfile -t COMPREPLY < <(compgen -W "$( printf \'%q \' "${type_list[@]}" )" -- "${cur_word}" |\n        awk \'/ / { print "\\""$0"\\"" } /^[^ ]+$/ { print $0 }\')\n\n    # if no match was found, fall back to filename completion\n    if [ ${#COMPREPLY[@]} -eq 0 ]; then\n      COMPREPLY=()\n    fi\n\n    return 0\n}\ncomplete -o bashdefault -o default -F _{{app_name}}_yargs_completions {{app_name}}\n###-end-{{app_name}}-completions-###\n';const s=this.shim.path.basename(e);return e.match(/\.js$/)&&(e=`./${e}`),r=r.replace(/{{app_name}}/g,s),r=r.replace(/{{completion_command}}/g,t),r.replace(/{{app_path}}/g,e)}registerFunction(e){this.customCompletionFunction=e}setParsed(e){this.aliases=e.aliases}}function ot(e,t){if(0===e.length)return t.length;if(0===t.length)return e.length;const r=[];let s,o;for(s=0;s<=t.length;s++)r[s]=[s];for(o=0;o<=e.length;o++)r[0][o]=o;for(s=1;s<=t.length;s++)for(o=1;o<=e.length;o++)t.charAt(s-1)===e.charAt(o-1)?r[s][o]=r[s-1][o-1]:s>1&&o>1&&t.charAt(s-2)===e.charAt(o-1)&&t.charAt(s-1)===e.charAt(o-2)?r[s][o]=r[s-2][o-2]+1:r[s][o]=Math.min(r[s-1][o-1]+1,Math.min(r[s][o-1]+1,r[s-1][o]+1));return r[t.length][e.length]}const nt=["$0","--","_"];let it,at=[];function ut(e,t,r,s){it=s;let o={};if(Object.prototype.hasOwnProperty.call(e,"extends")){if("string"!=typeof e.extends)return o;const n=/\.json|\..*rc$/.test(e.extends);let i=null;if(n)i=function(e,t){return it.path.resolve(e,t)}(t,e.extends);else try{i=import.meta.resolve(e.extends)}catch(t){return e}!function(e){if(at.indexOf(e)>-1)throw new $e(`Circular extended configurations: '${e}'.`)}(i),at.push(i),o=n?JSON.parse(it.readFileSync(i,"utf8")):s.require(e.extends),delete e.extends,o=ut(o,it.path.dirname(i),r,it)}return at=[],r?ct(o,e):Object.assign({},o,e)}function ct(e,t){const r={};function s(e){return e&&"object"==typeof e&&!Array.isArray(e)}Object.assign(r,e);for(const o of Object.keys(t))s(t[o])&&s(r[o])?r[o]=ct(e[o],t[o]):r[o]=t[o];return r}var lt,pt,ht,dt,gt,ft,mt,Dt,Et,yt,bt,_t,vt,Ft,wt,Tt,Ct,At,Ot,kt,Rt,St,Pt,Gt,xt,Bt,Lt,$t,jt,Ut,It,Ht,Mt,Nt,qt,Wt=function(e,t,r,s,o){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?o.call(e,r):o?o.value=r:t.set(e,r),r},zt=function(e,t,r,s){if("a"===r&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?s:"a"===r?s.call(e):s?s.value:t.get(e)};const Vt=Symbol("copyDoubleDash"),Kt=Symbol("copyDoubleDash"),Yt=Symbol("deleteFromParserHintObject"),Qt=Symbol("emitWarning"),Zt=Symbol("freeze"),Xt=Symbol("getDollarZero"),Jt=Symbol("getParserConfiguration"),er=Symbol("getUsageConfiguration"),tr=Symbol("guessLocale"),rr=Symbol("guessVersion"),sr=Symbol("parsePositionalNumbers"),or=Symbol("pkgUp"),nr=Symbol("populateParserHintArray"),ir=Symbol("populateParserHintSingleValueDictionary"),ar=Symbol("populateParserHintArrayDictionary"),ur=Symbol("populateParserHintDictionary"),cr=Symbol("sanitizeKey"),lr=Symbol("setKey"),pr=Symbol("unfreeze"),hr=Symbol("validateAsync"),dr=Symbol("getCommandInstance"),gr=Symbol("getContext"),fr=Symbol("getHasOutput"),mr=Symbol("getLoggerInstance"),Dr=Symbol("getParseContext"),Er=Symbol("getUsageInstance"),yr=Symbol("getValidationInstance"),br=Symbol("hasParseCallback"),_r=Symbol("isGlobalContext"),vr=Symbol("postProcess"),Fr=Symbol("rebase"),wr=Symbol("reset"),Tr=Symbol("runYargsParserAndExecuteCommands"),Cr=Symbol("runValidation"),Ar=Symbol("setHasOutput"),Or=Symbol("kTrackManuallySetKeys");class kr{constructor(e=[],t,r,s){this.customScriptName=!1,this.parsed=!1,lt.set(this,void 0),pt.set(this,void 0),ht.set(this,{commands:[],fullCommands:[]}),dt.set(this,null),gt.set(this,null),ft.set(this,"show-hidden"),mt.set(this,null),Dt.set(this,!0),Et.set(this,{}),yt.set(this,!0),bt.set(this,[]),_t.set(this,void 0),vt.set(this,{}),Ft.set(this,!1),wt.set(this,null),Tt.set(this,!0),Ct.set(this,void 0),At.set(this,""),Ot.set(this,void 0),kt.set(this,void 0),Rt.set(this,{}),St.set(this,null),Pt.set(this,null),Gt.set(this,{}),xt.set(this,{}),Bt.set(this,void 0),Lt.set(this,!1),$t.set(this,void 0),jt.set(this,!1),Ut.set(this,!1),It.set(this,!1),Ht.set(this,void 0),Mt.set(this,{}),Nt.set(this,null),qt.set(this,void 0),Wt(this,$t,s,"f"),Wt(this,Bt,e,"f"),Wt(this,pt,t,"f"),Wt(this,kt,r,"f"),Wt(this,_t,new Ne(this),"f"),this.$0=this[Xt](),this[wr](),Wt(this,lt,zt(this,lt,"f"),"f"),Wt(this,Ht,zt(this,Ht,"f"),"f"),Wt(this,qt,zt(this,qt,"f"),"f"),Wt(this,Ot,zt(this,Ot,"f"),"f"),zt(this,Ot,"f").showHiddenOpt=zt(this,ft,"f"),Wt(this,Ct,this[Kt](),"f"),zt(this,$t,"f").y18n.setLocale("en_US")}addHelpOpt(e,t){return Ie("[string|boolean] [string]",[e,t],arguments.length),zt(this,wt,"f")&&(this[Yt](zt(this,wt,"f")),Wt(this,wt,null,"f")),!1===e&&void 0===t||(Wt(this,wt,"string"==typeof e?e:"help","f"),this.boolean(zt(this,wt,"f")),this.describe(zt(this,wt,"f"),t||zt(this,Ht,"f").deferY18nLookup("Show help"))),this}help(e,t){return this.addHelpOpt(e,t)}addShowHiddenOpt(e,t){if(Ie("[string|boolean] [string]",[e,t],arguments.length),!1===e&&void 0===t)return this;const r="string"==typeof e?e:zt(this,ft,"f");return this.boolean(r),this.describe(r,t||zt(this,Ht,"f").deferY18nLookup("Show hidden options")),zt(this,Ot,"f").showHiddenOpt=r,this}showHidden(e,t){return this.addShowHiddenOpt(e,t)}alias(e,t){return Ie("<object|string|array> [string|array]",[e,t],arguments.length),this[ar](this.alias.bind(this),"alias",e,t),this}array(e){return Ie("<array|string>",[e],arguments.length),this[nr]("array",e),this[Or](e),this}boolean(e){return Ie("<array|string>",[e],arguments.length),this[nr]("boolean",e),this[Or](e),this}check(e,t){return Ie("<function> [boolean]",[e,t],arguments.length),this.middleware((t,r)=>We(()=>e(t,r.getOptions()),r=>(r?("string"==typeof r||r instanceof Error)&&zt(this,Ht,"f").fail(r.toString(),r):zt(this,Ht,"f").fail(zt(this,$t,"f").y18n.__("Argument check failed: %s",e.toString())),t),e=>(zt(this,Ht,"f").fail(e.message?e.message:e.toString(),e),t)),!1,t),this}choices(e,t){return Ie("<object|string|array> [string|array]",[e,t],arguments.length),this[ar](this.choices.bind(this),"choices",e,t),this}coerce(e,t){if(Ie("<object|string|array> [function]",[e,t],arguments.length),Array.isArray(e)){if(!t)throw new $e("coerce callback must be provided");for(const r of e)this.coerce(r,t);return this}if("object"==typeof e){for(const t of Object.keys(e))this.coerce(t,e[t]);return this}if(!t)throw new $e("coerce callback must be provided");const r=e;return zt(this,Ot,"f").key[r]=!0,zt(this,_t,"f").addCoerceMiddleware((e,s)=>{var o;const n=null!==(o=s.getAliases()[r])&&void 0!==o?o:[],i=[r,...n].filter(t=>Object.prototype.hasOwnProperty.call(e,t));return 0===i.length?e:We(()=>t(e[i[0]]),t=>(i.forEach(r=>{e[r]=t}),e),e=>{throw new $e(e.message)})},r),this}conflicts(e,t){return Ie("<string|object> [string|array]",[e,t],arguments.length),zt(this,qt,"f").conflicts(e,t),this}config(e="config",t,r){return Ie("[object|string] [string|function] [function]",[e,t,r],arguments.length),"object"!=typeof e||Array.isArray(e)?("function"==typeof t&&(r=t,t=void 0),this.describe(e,t||zt(this,Ht,"f").deferY18nLookup("Path to JSON config file")),(Array.isArray(e)?e:[e]).forEach(e=>{zt(this,Ot,"f").config[e]=r||!0}),this):(e=ut(e,zt(this,pt,"f"),this[Jt]()["deep-merge-config"]||!1,zt(this,$t,"f")),zt(this,Ot,"f").configObjects=(zt(this,Ot,"f").configObjects||[]).concat(e),this)}completion(e,t,r){return Ie("[string] [string|boolean|function] [function]",[e,t,r],arguments.length),"function"==typeof t&&(r=t,t=void 0),Wt(this,gt,e||zt(this,gt,"f")||"completion","f"),t||!1===t||(t="generate completion script"),this.command(zt(this,gt,"f"),t),r&&zt(this,dt,"f").registerFunction(r),this}command(e,t,r,s,o,n){return Ie("<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]",[e,t,r,s,o,n],arguments.length),zt(this,lt,"f").addHandler(e,t,r,s,o,n),this}commands(e,t,r,s,o,n){return this.command(e,t,r,s,o,n)}commandDir(e,t){Ie("<string> [object]",[e,t],arguments.length);const r=zt(this,kt,"f")||zt(this,$t,"f").require;return zt(this,lt,"f").addDirectory(e,r,zt(this,$t,"f").getCallerFile(),t),this}count(e){return Ie("<array|string>",[e],arguments.length),this[nr]("count",e),this[Or](e),this}default(e,t,r){return Ie("<object|string|array> [*] [string]",[e,t,r],arguments.length),r&&(xe(e,zt(this,$t,"f")),zt(this,Ot,"f").defaultDescription[e]=r),"function"==typeof t&&(xe(e,zt(this,$t,"f")),zt(this,Ot,"f").defaultDescription[e]||(zt(this,Ot,"f").defaultDescription[e]=zt(this,Ht,"f").functionDescription(t)),t=t.call()),this[ir](this.default.bind(this),"default",e,t),this}defaults(e,t,r){return this.default(e,t,r)}demandCommand(e=1,t,r,s){return Ie("[number] [number|string] [string|null|undefined] [string|null|undefined]",[e,t,r,s],arguments.length),"number"!=typeof t&&(r=t,t=1/0),this.global("_",!1),zt(this,Ot,"f").demandedCommands._={min:e,max:t,minMsg:r,maxMsg:s},this}demand(e,t,r){return Array.isArray(t)?(t.forEach(e=>{Ge(r,!0,zt(this,$t,"f")),this.demandOption(e,r)}),t=1/0):"number"!=typeof t&&(r=t,t=1/0),"number"==typeof e?(Ge(r,!0,zt(this,$t,"f")),this.demandCommand(e,t,r,r)):Array.isArray(e)?e.forEach(e=>{Ge(r,!0,zt(this,$t,"f")),this.demandOption(e,r)}):"string"==typeof r?this.demandOption(e,r):!0!==r&&void 0!==r||this.demandOption(e),this}demandOption(e,t){return Ie("<object|string|array> [string]",[e,t],arguments.length),this[ir](this.demandOption.bind(this),"demandedOptions",e,t),this}deprecateOption(e,t){return Ie("<string> [string|boolean]",[e,t],arguments.length),zt(this,Ot,"f").deprecatedOptions[e]=t,this}describe(e,t){return Ie("<object|string|array> [string]",[e,t],arguments.length),this[lr](e,!0),zt(this,Ht,"f").describe(e,t),this}detectLocale(e){return Ie("<boolean>",[e],arguments.length),Wt(this,Dt,e,"f"),this}env(e){return Ie("[string|boolean]",[e],arguments.length),!1===e?delete zt(this,Ot,"f").envPrefix:zt(this,Ot,"f").envPrefix=e||"",this}epilogue(e){return Ie("<string>",[e],arguments.length),zt(this,Ht,"f").epilog(e),this}epilog(e){return this.epilogue(e)}example(e,t){return Ie("<string|array> [string]",[e,t],arguments.length),Array.isArray(e)?e.forEach(e=>this.example(...e)):zt(this,Ht,"f").example(e,t),this}exit(e,t){Wt(this,Ft,!0,"f"),Wt(this,mt,t,"f"),zt(this,yt,"f")&&zt(this,$t,"f").process.exit(e)}exitProcess(e=!0){return Ie("[boolean]",[e],arguments.length),Wt(this,yt,e,"f"),this}fail(e){if(Ie("<function|boolean>",[e],arguments.length),"boolean"==typeof e&&!1!==e)throw new $e("Invalid first argument. Expected function or boolean 'false'");return zt(this,Ht,"f").failFn(e),this}getAliases(){return this.parsed?this.parsed.aliases:{}}async getCompletion(e,t){return Ie("<array> [function]",[e,t],arguments.length),t?zt(this,dt,"f").getCompletion(e,t):new Promise((t,r)=>{zt(this,dt,"f").getCompletion(e,(e,s)=>{e?r(e):t(s)})})}getDemandedOptions(){return Ie([],0),zt(this,Ot,"f").demandedOptions}getDemandedCommands(){return Ie([],0),zt(this,Ot,"f").demandedCommands}getDeprecatedOptions(){return Ie([],0),zt(this,Ot,"f").deprecatedOptions}getDetectLocale(){return zt(this,Dt,"f")}getExitProcess(){return zt(this,yt,"f")}getGroups(){return Object.assign({},zt(this,vt,"f"),zt(this,xt,"f"))}getHelp(){if(Wt(this,Ft,!0,"f"),!zt(this,Ht,"f").hasCachedHelpMessage()){if(!this.parsed){const e=this[Tr](zt(this,Bt,"f"),void 0,void 0,0,!0);if(Le(e))return e.then(()=>zt(this,Ht,"f").help())}const e=zt(this,lt,"f").runDefaultBuilderOn(this);if(Le(e))return e.then(()=>zt(this,Ht,"f").help())}return Promise.resolve(zt(this,Ht,"f").help())}getOptions(){return zt(this,Ot,"f")}getStrict(){return zt(this,jt,"f")}getStrictCommands(){return zt(this,Ut,"f")}getStrictOptions(){return zt(this,It,"f")}global(e,t){return Ie("<string|array> [boolean]",[e,t],arguments.length),e=[].concat(e),!1!==t?zt(this,Ot,"f").local=zt(this,Ot,"f").local.filter(t=>-1===e.indexOf(t)):e.forEach(e=>{zt(this,Ot,"f").local.includes(e)||zt(this,Ot,"f").local.push(e)}),this}group(e,t){Ie("<string|array> <string>",[e,t],arguments.length);const r=zt(this,xt,"f")[t]||zt(this,vt,"f")[t];zt(this,xt,"f")[t]&&delete zt(this,xt,"f")[t];const s={};return zt(this,vt,"f")[t]=(r||[]).concat(e).filter(e=>!s[e]&&(s[e]=!0)),this}hide(e){return Ie("<string>",[e],arguments.length),zt(this,Ot,"f").hiddenOptions.push(e),this}implies(e,t){return Ie("<string|object> [number|string|array]",[e,t],arguments.length),zt(this,qt,"f").implies(e,t),this}locale(e){return Ie("[string]",[e],arguments.length),void 0===e?(this[tr](),zt(this,$t,"f").y18n.getLocale()):(Wt(this,Dt,!1,"f"),zt(this,$t,"f").y18n.setLocale(e),this)}middleware(e,t,r){return zt(this,_t,"f").addMiddleware(e,!!t,r)}nargs(e,t){return Ie("<string|object|array> [number]",[e,t],arguments.length),this[ir](this.nargs.bind(this),"narg",e,t),this}normalize(e){return Ie("<array|string>",[e],arguments.length),this[nr]("normalize",e),this}number(e){return Ie("<array|string>",[e],arguments.length),this[nr]("number",e),this[Or](e),this}option(e,t){if(Ie("<string|object> [object]",[e,t],arguments.length),"object"==typeof e)Object.keys(e).forEach(t=>{this.options(t,e[t])});else{"object"!=typeof t&&(t={}),this[Or](e),!zt(this,Nt,"f")||"version"!==e&&"version"!==(null==t?void 0:t.alias)||this[Qt](['"version" is a reserved word.',"Please do one of the following:",'- Disable version with `yargs.version(false)` if using "version" as an option',"- Use the built-in `yargs.version` method instead (if applicable)","- Use a different option key","https://yargs.js.org/docs/#api-reference-version"].join("\n"),void 0,"versionWarning"),zt(this,Ot,"f").key[e]=!0,t.alias&&this.alias(e,t.alias);const r=t.deprecate||t.deprecated;r&&this.deprecateOption(e,r);const s=t.demand||t.required||t.require;s&&this.demand(e,s),t.demandOption&&this.demandOption(e,"string"==typeof t.demandOption?t.demandOption:void 0),t.conflicts&&this.conflicts(e,t.conflicts),"default"in t&&this.default(e,t.default),void 0!==t.implies&&this.implies(e,t.implies),void 0!==t.nargs&&this.nargs(e,t.nargs),t.config&&this.config(e,t.configParser),t.normalize&&this.normalize(e),t.choices&&this.choices(e,t.choices),t.coerce&&this.coerce(e,t.coerce),t.group&&this.group(e,t.group),(t.boolean||"boolean"===t.type)&&(this.boolean(e),t.alias&&this.boolean(t.alias)),(t.array||"array"===t.type)&&(this.array(e),t.alias&&this.array(t.alias)),(t.number||"number"===t.type)&&(this.number(e),t.alias&&this.number(t.alias)),(t.string||"string"===t.type)&&(this.string(e),t.alias&&this.string(t.alias)),(t.count||"count"===t.type)&&this.count(e),"boolean"==typeof t.global&&this.global(e,t.global),t.defaultDescription&&(zt(this,Ot,"f").defaultDescription[e]=t.defaultDescription),t.skipValidation&&this.skipValidation(e);const o=t.describe||t.description||t.desc,n=zt(this,Ht,"f").getDescriptions();Object.prototype.hasOwnProperty.call(n,e)&&"string"!=typeof o||this.describe(e,o),t.hidden&&this.hide(e),t.requiresArg&&this.requiresArg(e)}return this}options(e,t){return this.option(e,t)}parse(e,t,r){Ie("[string|array] [function|boolean|object] [function]",[e,t,r],arguments.length),this[Zt](),void 0===e&&(e=zt(this,Bt,"f")),"object"==typeof t&&(Wt(this,Pt,t,"f"),t=r),"function"==typeof t&&(Wt(this,St,t,"f"),t=!1),t||Wt(this,Bt,e,"f"),zt(this,St,"f")&&Wt(this,yt,!1,"f");const s=this[Tr](e,!!t),o=this.parsed;return zt(this,dt,"f").setParsed(this.parsed),Le(s)?s.then(e=>(zt(this,St,"f")&&zt(this,St,"f").call(this,zt(this,mt,"f"),e,zt(this,At,"f")),e)).catch(e=>{throw zt(this,St,"f")&&zt(this,St,"f")(e,this.parsed.argv,zt(this,At,"f")),e}).finally(()=>{this[pr](),this.parsed=o}):(zt(this,St,"f")&&zt(this,St,"f").call(this,zt(this,mt,"f"),s,zt(this,At,"f")),this[pr](),this.parsed=o,s)}parseAsync(e,t,r){const s=this.parse(e,t,r);return Le(s)?s:Promise.resolve(s)}parseSync(e,t,r){const s=this.parse(e,t,r);if(Le(s))throw new $e(".parseSync() must not be used with asynchronous builders, handlers, or middleware");return s}parserConfiguration(e){return Ie("<object>",[e],arguments.length),Wt(this,Rt,e,"f"),this}pkgConf(e,t){Ie("<string> [string]",[e,t],arguments.length);let r=null;const s=this[or](t||zt(this,pt,"f"));return s[e]&&"object"==typeof s[e]&&(r=ut(s[e],t||zt(this,pt,"f"),this[Jt]()["deep-merge-config"]||!1,zt(this,$t,"f")),zt(this,Ot,"f").configObjects=(zt(this,Ot,"f").configObjects||[]).concat(r)),this}positional(e,t){Ie("<string> <object>",[e,t],arguments.length);const r=["default","defaultDescription","implies","normalize","choices","conflicts","coerce","type","describe","desc","description","alias"];t=Qe(t,(e,t)=>!("type"===e&&!["string","number","boolean"].includes(t))&&r.includes(e));const s=zt(this,ht,"f").fullCommands[zt(this,ht,"f").fullCommands.length-1],o=s?zt(this,lt,"f").cmdToParseOptions(s):{array:[],alias:{},default:{},demand:{}};return Be(o).forEach(r=>{const s=o[r];Array.isArray(s)?-1!==s.indexOf(e)&&(t[r]=!0):s[e]&&!(r in t)&&(t[r]=s[e])}),this.group(e,zt(this,Ht,"f").getPositionalGroupName()),this.option(e,t)}recommendCommands(e=!0){return Ie("[boolean]",[e],arguments.length),Wt(this,Lt,e,"f"),this}required(e,t,r){return this.demand(e,t,r)}require(e,t,r){return this.demand(e,t,r)}requiresArg(e){return Ie("<array|string|object> [number]",[e],arguments.length),"string"==typeof e&&zt(this,Ot,"f").narg[e]||this[ir](this.requiresArg.bind(this),"narg",e,NaN),this}showCompletionScript(e,t){return Ie("[string] [string]",[e,t],arguments.length),e=e||this.$0,zt(this,Ct,"f").log(zt(this,dt,"f").generateCompletionScript(e,t||zt(this,gt,"f")||"completion")),this}showHelp(e){if(Ie("[string|function]",[e],arguments.length),Wt(this,Ft,!0,"f"),!zt(this,Ht,"f").hasCachedHelpMessage()){if(!this.parsed){const t=this[Tr](zt(this,Bt,"f"),void 0,void 0,0,!0);if(Le(t))return t.then(()=>{zt(this,Ht,"f").showHelp(e)}),this}const t=zt(this,lt,"f").runDefaultBuilderOn(this);if(Le(t))return t.then(()=>{zt(this,Ht,"f").showHelp(e)}),this}return zt(this,Ht,"f").showHelp(e),this}scriptName(e){return this.customScriptName=!0,this.$0=e,this}showHelpOnFail(e,t){return Ie("[boolean|string] [string]",[e,t],arguments.length),zt(this,Ht,"f").showHelpOnFail(e,t),this}showVersion(e){return Ie("[string|function]",[e],arguments.length),zt(this,Ht,"f").showVersion(e),this}skipValidation(e){return Ie("<array|string>",[e],arguments.length),this[nr]("skipValidation",e),this}strict(e){return Ie("[boolean]",[e],arguments.length),Wt(this,jt,!1!==e,"f"),this}strictCommands(e){return Ie("[boolean]",[e],arguments.length),Wt(this,Ut,!1!==e,"f"),this}strictOptions(e){return Ie("[boolean]",[e],arguments.length),Wt(this,It,!1!==e,"f"),this}string(e){return Ie("<array|string>",[e],arguments.length),this[nr]("string",e),this[Or](e),this}terminalWidth(){return Ie([],0),zt(this,$t,"f").process.stdColumns}updateLocale(e){return this.updateStrings(e)}updateStrings(e){return Ie("<object>",[e],arguments.length),Wt(this,Dt,!1,"f"),zt(this,$t,"f").y18n.updateLocale(e),this}usage(e,t,r,s){if(Ie("<string|null|undefined> [string|boolean] [function|object] [function]",[e,t,r,s],arguments.length),void 0!==t){if(Ge(e,null,zt(this,$t,"f")),(e||"").match(/^\$0( |$)/))return this.command(e,t,r,s);throw new $e(".usage() description must start with $0 if being used as alias for .command()")}return zt(this,Ht,"f").usage(e),this}usageConfiguration(e){return Ie("<object>",[e],arguments.length),Wt(this,Mt,e,"f"),this}version(e,t,r){const s="version";if(Ie("[boolean|string] [string] [string]",[e,t,r],arguments.length),zt(this,Nt,"f")&&(this[Yt](zt(this,Nt,"f")),zt(this,Ht,"f").version(void 0),Wt(this,Nt,null,"f")),0===arguments.length)r=this[rr](),e=s;else if(1===arguments.length){if(!1===e)return this;r=e,e=s}else 2===arguments.length&&(r=t,t=void 0);return Wt(this,Nt,"string"==typeof e?e:s,"f"),t=t||zt(this,Ht,"f").deferY18nLookup("Show version number"),zt(this,Ht,"f").version(r||void 0),this.boolean(zt(this,Nt,"f")),this.describe(zt(this,Nt,"f"),t),this}wrap(e){return Ie("<number|null|undefined>",[e],arguments.length),zt(this,Ht,"f").wrap(e),this}[(lt=new WeakMap,pt=new WeakMap,ht=new WeakMap,dt=new WeakMap,gt=new WeakMap,ft=new WeakMap,mt=new WeakMap,Dt=new WeakMap,Et=new WeakMap,yt=new WeakMap,bt=new WeakMap,_t=new WeakMap,vt=new WeakMap,Ft=new WeakMap,wt=new WeakMap,Tt=new WeakMap,Ct=new WeakMap,At=new WeakMap,Ot=new WeakMap,kt=new WeakMap,Rt=new WeakMap,St=new WeakMap,Pt=new WeakMap,Gt=new WeakMap,xt=new WeakMap,Bt=new WeakMap,Lt=new WeakMap,$t=new WeakMap,jt=new WeakMap,Ut=new WeakMap,It=new WeakMap,Ht=new WeakMap,Mt=new WeakMap,Nt=new WeakMap,qt=new WeakMap,Vt)](e){if(!e._||!e["--"])return e;e._.push.apply(e._,e["--"]);try{delete e["--"]}catch(e){}return e}[Kt](){return{log:(...e)=>{this[br]()||console.log(...e),Wt(this,Ft,!0,"f"),zt(this,At,"f").length&&Wt(this,At,zt(this,At,"f")+"\n","f"),Wt(this,At,zt(this,At,"f")+e.join(" "),"f")},error:(...e)=>{this[br]()||console.error(...e),Wt(this,Ft,!0,"f"),zt(this,At,"f").length&&Wt(this,At,zt(this,At,"f")+"\n","f"),Wt(this,At,zt(this,At,"f")+e.join(" "),"f")}}}[Yt](e){Be(zt(this,Ot,"f")).forEach(t=>{if("configObjects"===t)return;const r=zt(this,Ot,"f")[t];Array.isArray(r)?r.includes(e)&&r.splice(r.indexOf(e),1):"object"==typeof r&&delete r[e]}),delete zt(this,Ht,"f").getDescriptions()[e]}[Qt](e,t,r){zt(this,Et,"f")[r]||(zt(this,$t,"f").process.emitWarning(e,t),zt(this,Et,"f")[r]=!0)}[Zt](){zt(this,bt,"f").push({options:zt(this,Ot,"f"),configObjects:zt(this,Ot,"f").configObjects.slice(0),exitProcess:zt(this,yt,"f"),groups:zt(this,vt,"f"),strict:zt(this,jt,"f"),strictCommands:zt(this,Ut,"f"),strictOptions:zt(this,It,"f"),completionCommand:zt(this,gt,"f"),output:zt(this,At,"f"),exitError:zt(this,mt,"f"),hasOutput:zt(this,Ft,"f"),parsed:this.parsed,parseFn:zt(this,St,"f"),parseContext:zt(this,Pt,"f")}),zt(this,Ht,"f").freeze(),zt(this,qt,"f").freeze(),zt(this,lt,"f").freeze(),zt(this,_t,"f").freeze()}[Xt](){let e,t="";return e=/\b(node|iojs|electron)(\.exe)?$/.test(zt(this,$t,"f").process.argv()[0])?zt(this,$t,"f").process.argv().slice(1,2):zt(this,$t,"f").process.argv().slice(0,1),t=e.map(e=>{const t=this[Fr](zt(this,pt,"f"),e);return e.match(/^(\/|([a-zA-Z]:)?\\)/)&&t.length<e.length?t:e}).join(" ").trim(),zt(this,$t,"f").getEnv("_")&&zt(this,$t,"f").getProcessArgvBin()===zt(this,$t,"f").getEnv("_")&&(t=zt(this,$t,"f").getEnv("_").replace(`${zt(this,$t,"f").path.dirname(zt(this,$t,"f").process.execPath())}/`,"")),t}[Jt](){return zt(this,Rt,"f")}[er](){return zt(this,Mt,"f")}[tr](){if(!zt(this,Dt,"f"))return;const e=zt(this,$t,"f").getEnv("LC_ALL")||zt(this,$t,"f").getEnv("LC_MESSAGES")||zt(this,$t,"f").getEnv("LANG")||zt(this,$t,"f").getEnv("LANGUAGE")||"en_US";this.locale(e.replace(/[.:].*/,""))}[rr](){return this[or]().version||"unknown"}[sr](e){const t=e["--"]?e["--"]:e._;for(let e,r=0;void 0!==(e=t[r]);r++)zt(this,$t,"f").Parser.looksLikeNumber(e)&&Number.isSafeInteger(Math.floor(parseFloat(`${e}`)))&&(t[r]=Number(e));return e}[or](e){const t=e||"*";if(zt(this,Gt,"f")[t])return zt(this,Gt,"f")[t];let r={};try{let t=e||zt(this,$t,"f").mainFilename;zt(this,$t,"f").path.extname(t)&&(t=zt(this,$t,"f").path.dirname(t));const s=zt(this,$t,"f").findUp(t,(e,t)=>t.includes("package.json")?"package.json":void 0);Ge(s,void 0,zt(this,$t,"f")),r=JSON.parse(zt(this,$t,"f").readFileSync(s,"utf8"))}catch(e){}return zt(this,Gt,"f")[t]=r||{},zt(this,Gt,"f")[t]}[nr](e,t){(t=[].concat(t)).forEach(t=>{t=this[cr](t),zt(this,Ot,"f")[e].push(t)})}[ir](e,t,r,s){this[ur](e,t,r,s,(e,t,r)=>{zt(this,Ot,"f")[e][t]=r})}[ar](e,t,r,s){this[ur](e,t,r,s,(e,t,r)=>{zt(this,Ot,"f")[e][t]=(zt(this,Ot,"f")[e][t]||[]).concat(r)})}[ur](e,t,r,s,o){if(Array.isArray(r))r.forEach(t=>{e(t,s)});else if((e=>"object"==typeof e)(r))for(const t of Be(r))e(t,r[t]);else o(t,this[cr](r),s)}[cr](e){return"__proto__"===e?"___proto___":e}[lr](e,t){return this[ir](this[lr].bind(this),"key",e,t),this}[pr](){var e,t,r,s,o,n,i,a,u,c,l,p;const h=zt(this,bt,"f").pop();let d;Ge(h,void 0,zt(this,$t,"f")),e=this,t=this,r=this,s=this,o=this,n=this,i=this,a=this,u=this,c=this,l=this,p=this,({options:{set value(t){Wt(e,Ot,t,"f")}}.value,configObjects:d,exitProcess:{set value(e){Wt(t,yt,e,"f")}}.value,groups:{set value(e){Wt(r,vt,e,"f")}}.value,output:{set value(e){Wt(s,At,e,"f")}}.value,exitError:{set value(e){Wt(o,mt,e,"f")}}.value,hasOutput:{set value(e){Wt(n,Ft,e,"f")}}.value,parsed:this.parsed,strict:{set value(e){Wt(i,jt,e,"f")}}.value,strictCommands:{set value(e){Wt(a,Ut,e,"f")}}.value,strictOptions:{set value(e){Wt(u,It,e,"f")}}.value,completionCommand:{set value(e){Wt(c,gt,e,"f")}}.value,parseFn:{set value(e){Wt(l,St,e,"f")}}.value,parseContext:{set value(e){Wt(p,Pt,e,"f")}}.value}=h),zt(this,Ot,"f").configObjects=d,zt(this,Ht,"f").unfreeze(),zt(this,qt,"f").unfreeze(),zt(this,lt,"f").unfreeze(),zt(this,_t,"f").unfreeze()}[hr](e,t){return We(t,t=>(e(t),t))}getInternalMethods(){return{getCommandInstance:this[dr].bind(this),getContext:this[gr].bind(this),getHasOutput:this[fr].bind(this),getLoggerInstance:this[mr].bind(this),getParseContext:this[Dr].bind(this),getParserConfiguration:this[Jt].bind(this),getUsageConfiguration:this[er].bind(this),getUsageInstance:this[Er].bind(this),getValidationInstance:this[yr].bind(this),hasParseCallback:this[br].bind(this),isGlobalContext:this[_r].bind(this),postProcess:this[vr].bind(this),reset:this[wr].bind(this),runValidation:this[Cr].bind(this),runYargsParserAndExecuteCommands:this[Tr].bind(this),setHasOutput:this[Ar].bind(this)}}[dr](){return zt(this,lt,"f")}[gr](){return zt(this,ht,"f")}[fr](){return zt(this,Ft,"f")}[mr](){return zt(this,Ct,"f")}[Dr](){return zt(this,Pt,"f")||{}}[Er](){return zt(this,Ht,"f")}[yr](){return zt(this,qt,"f")}[br](){return!!zt(this,St,"f")}[_r](){return zt(this,Tt,"f")}[vr](e,t,r,s){if(r)return e;if(Le(e))return e;t||(e=this[Vt](e));return(this[Jt]()["parse-positional-numbers"]||void 0===this[Jt]()["parse-positional-numbers"])&&(e=this[sr](e)),s&&(e=qe(e,this,zt(this,_t,"f").getMiddleware(),!1)),e}[wr](e={}){Wt(this,Ot,zt(this,Ot,"f")||{},"f");const t={};t.local=zt(this,Ot,"f").local||[],t.configObjects=zt(this,Ot,"f").configObjects||[];const r={};t.local.forEach(t=>{r[t]=!0,(e[t]||[]).forEach(e=>{r[e]=!0})}),Object.assign(zt(this,xt,"f"),Object.keys(zt(this,vt,"f")).reduce((e,t)=>{const s=zt(this,vt,"f")[t].filter(e=>!(e in r));return s.length>0&&(e[t]=s),e},{})),Wt(this,vt,{},"f");return["array","boolean","string","skipValidation","count","normalize","number","hiddenOptions"].forEach(e=>{t[e]=(zt(this,Ot,"f")[e]||[]).filter(e=>!r[e])}),["narg","key","alias","default","defaultDescription","config","choices","demandedOptions","demandedCommands","deprecatedOptions"].forEach(e=>{t[e]=Qe(zt(this,Ot,"f")[e],e=>!r[e])}),t.envPrefix=zt(this,Ot,"f").envPrefix,Wt(this,Ot,t,"f"),Wt(this,Ht,zt(this,Ht,"f")?zt(this,Ht,"f").reset(r):Je(this,zt(this,$t,"f")),"f"),Wt(this,qt,zt(this,qt,"f")?zt(this,qt,"f").reset(r):function(e,t,r){const s=r.y18n.__,o=r.y18n.__n,n={nonOptionCount:function(r){const s=e.getDemandedCommands(),n=r._.length+(r["--"]?r["--"].length:0)-e.getInternalMethods().getContext().commands.length;s._&&(n<s._.min||n>s._.max)&&(n<s._.min?void 0!==s._.minMsg?t.fail(s._.minMsg?s._.minMsg.replace(/\$0/g,n.toString()).replace(/\$1/,s._.min.toString()):null):t.fail(o("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",n,n.toString(),s._.min.toString())):n>s._.max&&(void 0!==s._.maxMsg?t.fail(s._.maxMsg?s._.maxMsg.replace(/\$0/g,n.toString()).replace(/\$1/,s._.max.toString()):null):t.fail(o("Too many non-option arguments: got %s, maximum of %s","Too many non-option arguments: got %s, maximum of %s",n,n.toString(),s._.max.toString()))))},positionalCount:function(e,r){r<e&&t.fail(o("Not enough non-option arguments: got %s, need at least %s","Not enough non-option arguments: got %s, need at least %s",r,r+"",e+""))},requiredArguments:function(e,r){let s=null;for(const t of Object.keys(r))Object.prototype.hasOwnProperty.call(e,t)&&void 0!==e[t]||(s=s||{},s[t]=r[t]);if(s){const e=[];for(const t of Object.keys(s)){const r=s[t];r&&e.indexOf(r)<0&&e.push(r)}const r=e.length?`\n${e.join("\n")}`:"";t.fail(o("Missing required argument: %s","Missing required arguments: %s",Object.keys(s).length,Object.keys(s).join(", ")+r))}},unknownArguments:function(r,s,i,a,u=!0){var c;const l=e.getInternalMethods().getCommandInstance().getCommands(),p=[],h=e.getInternalMethods().getContext();if(Object.keys(r).forEach(t=>{nt.includes(t)||Object.prototype.hasOwnProperty.call(i,t)||Object.prototype.hasOwnProperty.call(e.getInternalMethods().getParseContext(),t)||n.isValidAndSomeAliasIsNotNew(t,s)||p.push(t)}),u&&(h.commands.length>0||l.length>0||a)&&r._.slice(h.commands.length).forEach(e=>{l.includes(""+e)||p.push(""+e)}),u){const t=(null===(c=e.getDemandedCommands()._)||void 0===c?void 0:c.max)||0,s=h.commands.length+t;s<r._.length&&r._.slice(s).forEach(e=>{e=String(e),h.commands.includes(e)||p.includes(e)||p.push(e)})}p.length&&t.fail(o("Unknown argument: %s","Unknown arguments: %s",p.length,p.map(e=>e.trim()?e:`"${e}"`).join(", ")))},unknownCommands:function(r){const s=e.getInternalMethods().getCommandInstance().getCommands(),n=[],i=e.getInternalMethods().getContext();return(i.commands.length>0||s.length>0)&&r._.slice(i.commands.length).forEach(e=>{s.includes(""+e)||n.push(""+e)}),n.length>0&&(t.fail(o("Unknown command: %s","Unknown commands: %s",n.length,n.join(", "))),!0)},isValidAndSomeAliasIsNotNew:function(t,r){if(!Object.prototype.hasOwnProperty.call(r,t))return!1;const s=e.parsed.newAliases;return[t,...r[t]].some(e=>!Object.prototype.hasOwnProperty.call(s,e)||!s[t])},limitedChoices:function(r){const o=e.getOptions(),n={};if(!Object.keys(o.choices).length)return;Object.keys(r).forEach(e=>{-1===nt.indexOf(e)&&Object.prototype.hasOwnProperty.call(o.choices,e)&&[].concat(r[e]).forEach(t=>{-1===o.choices[e].indexOf(t)&&void 0!==t&&(n[e]=(n[e]||[]).concat(t))})});const i=Object.keys(n);if(!i.length)return;let a=s("Invalid values:");i.forEach(e=>{a+=`\n  ${s("Argument: %s, Given: %s, Choices: %s",e,t.stringifiedValues(n[e]),t.stringifiedValues(o.choices[e]))}`}),t.fail(a)}};let i={};function a(e,t){const r=Number(t);return"number"==typeof(t=isNaN(r)?t:r)?t=e._.length>=t:t.match(/^--no-.+/)?(t=t.match(/^--no-(.+)/)[1],t=!Object.prototype.hasOwnProperty.call(e,t)):t=Object.prototype.hasOwnProperty.call(e,t),t}n.implies=function(t,s){Ie("<string|object> [array|number|string]",[t,s],arguments.length),"object"==typeof t?Object.keys(t).forEach(e=>{n.implies(e,t[e])}):(e.global(t),i[t]||(i[t]=[]),Array.isArray(s)?s.forEach(e=>n.implies(t,e)):(Ge(s,void 0,r),i[t].push(s)))},n.getImplied=function(){return i},n.implications=function(e){const r=[];if(Object.keys(i).forEach(t=>{const s=t;(i[t]||[]).forEach(t=>{let o=s;const n=t;o=a(e,o),t=a(e,t),o&&!t&&r.push(` ${s} -> ${n}`)})}),r.length){let e=`${s("Implications failed:")}\n`;r.forEach(t=>{e+=t}),t.fail(e)}};let u={};n.conflicts=function(t,r){Ie("<string|object> [array|string]",[t,r],arguments.length),"object"==typeof t?Object.keys(t).forEach(e=>{n.conflicts(e,t[e])}):(e.global(t),u[t]||(u[t]=[]),Array.isArray(r)?r.forEach(e=>n.conflicts(t,e)):u[t].push(r))},n.getConflicting=()=>u,n.conflicting=function(o){Object.keys(o).forEach(e=>{u[e]&&u[e].forEach(r=>{r&&void 0!==o[e]&&void 0!==o[r]&&t.fail(s("Arguments %s and %s are mutually exclusive",e,r))})}),e.getInternalMethods().getParserConfiguration()["strip-dashed"]&&Object.keys(u).forEach(e=>{u[e].forEach(n=>{n&&void 0!==o[r.Parser.camelCase(e)]&&void 0!==o[r.Parser.camelCase(n)]&&t.fail(s("Arguments %s and %s are mutually exclusive",e,n))})})},n.recommendCommands=function(e,r){r=r.sort((e,t)=>t.length-e.length);let o=null,n=1/0;for(let t,s=0;void 0!==(t=r[s]);s++){const r=ot(e,t);r<=3&&r<n&&(n=r,o=t)}o&&t.fail(s("Did you mean %s?",o))},n.reset=function(e){return i=Qe(i,t=>!e[t]),u=Qe(u,t=>!e[t]),n};const c=[];return n.freeze=function(){c.push({implied:i,conflicting:u})},n.unfreeze=function(){const e=c.pop();Ge(e,void 0,r),({implied:i,conflicting:u}=e)},n}(this,zt(this,Ht,"f"),zt(this,$t,"f")),"f"),Wt(this,lt,zt(this,lt,"f")?zt(this,lt,"f").reset():function(e,t,r,s){return new Ve(e,t,r,s)}(zt(this,Ht,"f"),zt(this,qt,"f"),zt(this,_t,"f"),zt(this,$t,"f")),"f"),zt(this,dt,"f")||Wt(this,dt,function(e,t,r,s){return new st(e,t,r,s)}(this,zt(this,Ht,"f"),zt(this,lt,"f"),zt(this,$t,"f")),"f"),zt(this,_t,"f").reset(),Wt(this,gt,null,"f"),Wt(this,At,"","f"),Wt(this,mt,null,"f"),Wt(this,Ft,!1,"f"),this.parsed=!1,this}[Fr](e,t){return zt(this,$t,"f").path.relative(e,t)}[Tr](e,t,r,s=0,o=!1){var n,i,a,u;let c=!!r||o;e=e||zt(this,Bt,"f"),zt(this,Ot,"f").__=zt(this,$t,"f").y18n.__,zt(this,Ot,"f").configuration=this[Jt]();const l=!!zt(this,Ot,"f").configuration["populate--"],p=Object.assign({},zt(this,Ot,"f").configuration,{"populate--":!0}),h=zt(this,$t,"f").Parser.detailed(e,Object.assign({},zt(this,Ot,"f"),{configuration:{"parse-positional-numbers":!1,...p}})),d=Object.assign(h.argv,zt(this,Pt,"f"));let g;const f=h.aliases;let m=!1,D=!1;Object.keys(d).forEach(e=>{e===zt(this,wt,"f")&&d[e]?m=!0:e===zt(this,Nt,"f")&&d[e]&&(D=!0)}),d.$0=this.$0,this.parsed=h,0===s&&zt(this,Ht,"f").clearCachedHelpMessage();try{if(this[tr](),t)return this[vr](d,l,!!r,!1);if(zt(this,wt,"f")){[zt(this,wt,"f")].concat(f[zt(this,wt,"f")]||[]).filter(e=>e.length>1).includes(""+d._[d._.length-1])&&(d._.pop(),m=!0)}Wt(this,Tt,!1,"f");const p=zt(this,lt,"f").getCommands(),E=!!(null===(n=zt(this,dt,"f"))||void 0===n?void 0:n.completionKey)&&[null===(i=zt(this,dt,"f"))||void 0===i?void 0:i.completionKey,...null!==(u=this.getAliases()[null===(a=zt(this,dt,"f"))||void 0===a?void 0:a.completionKey])&&void 0!==u?u:[]].some(e=>Object.prototype.hasOwnProperty.call(d,e)),y=m||E||o;if(d._.length){if(p.length){let e;for(let t,n=s||0;void 0!==d._[n];n++){if(t=String(d._[n]),p.includes(t)&&t!==zt(this,gt,"f")){const e=zt(this,lt,"f").runCommand(t,this,h,n+1,o,m||D||o);return this[vr](e,l,!!r,!1)}if(!e&&t!==zt(this,gt,"f")){e=t;break}}!zt(this,lt,"f").hasDefaultCommand()&&zt(this,Lt,"f")&&e&&!y&&zt(this,qt,"f").recommendCommands(e,p)}zt(this,gt,"f")&&d._.includes(zt(this,gt,"f"))&&!E&&(zt(this,yt,"f")&&Ze(!0),this.showCompletionScript(),this.exit(0))}if(zt(this,lt,"f").hasDefaultCommand()&&!y){const e=zt(this,lt,"f").runCommand(null,this,h,0,o,m||D||o);return this[vr](e,l,!!r,!1)}if(E){zt(this,yt,"f")&&Ze(!0);const t=(e=[].concat(e)).slice(e.indexOf(`--${zt(this,dt,"f").completionKey}`)+1);return zt(this,dt,"f").getCompletion(t,(e,t)=>{if(e)throw new $e(e.message);(t||[]).forEach(e=>{zt(this,Ct,"f").log(e)}),this.exit(0)}),this[vr](d,!l,!!r,!1)}if(zt(this,Ft,"f")||(m?(zt(this,yt,"f")&&Ze(!0),c=!0,this.showHelp(e=>{zt(this,Ct,"f").log(e),this.exit(0)})):D&&(zt(this,yt,"f")&&Ze(!0),c=!0,zt(this,Ht,"f").showVersion("log"),this.exit(0))),!c&&zt(this,Ot,"f").skipValidation.length>0&&(c=Object.keys(d).some(e=>zt(this,Ot,"f").skipValidation.indexOf(e)>=0&&!0===d[e])),!c){if(h.error)throw new $e(h.error.message);if(!E){const e=this[Cr](f,{},h.error);r||(g=qe(d,this,zt(this,_t,"f").getMiddleware(),!0)),g=this[hr](e,null!=g?g:d),Le(g)&&!r&&(g=g.then(()=>qe(d,this,zt(this,_t,"f").getMiddleware(),!1)))}}}catch(e){if(!(e instanceof $e))throw e;zt(this,Ht,"f").fail(e.message,e)}return this[vr](null!=g?g:d,l,!!r,!0)}[Cr](e,t,r,s){const o={...this.getDemandedOptions()};return n=>{if(r)throw new $e(r.message);zt(this,qt,"f").nonOptionCount(n),zt(this,qt,"f").requiredArguments(n,o);let i=!1;zt(this,Ut,"f")&&(i=zt(this,qt,"f").unknownCommands(n)),zt(this,jt,"f")&&!i?zt(this,qt,"f").unknownArguments(n,e,t,!!s):zt(this,It,"f")&&zt(this,qt,"f").unknownArguments(n,e,{},!1,!1),zt(this,qt,"f").limitedChoices(n),zt(this,qt,"f").implications(n),zt(this,qt,"f").conflicting(n)}}[Ar](){Wt(this,Ft,!0,"f")}[Or](e){if("string"==typeof e)zt(this,Ot,"f").key[e]=!0;else for(const t of e)zt(this,Ot,"f").key[t]=!0}}const Rr=(Sr=Pe,(e=[],t=Sr.process.cwd(),r)=>{const s=new kr(e,t,r,Sr);return Object.defineProperty(s,"argv",{get:()=>s.parse(),enumerable:!0}),s.help(),s.version(),s});var Sr,Pr,Gr={exports:{}},xr={version:"17.1.0"};var Br,Lr,$r,jr,Ur,Ir,Hr,Mr,Nr,qr,Wr,zr,Vr,Kr,Yr,Qr,Zr,Xr,Jr,es=function(){if(Pr)return Gr.exports;Pr=1;const e=l,t=r,s=b,o=_,n=xr.version,i=["🔐 encrypt with dotenvx: https://dotenvx.com","🔐 prevent committing .env to code: https://dotenvx.com/precommit","🔐 prevent building .env in docker: https://dotenvx.com/prebuild","🛠️  run anywhere with `dotenvx run -- yourcommand`","⚙️  specify custom .env file path with { path: '/custom/path/.env' }","⚙️  enable debug logging with { debug: true }","⚙️  override existing env vars with { override: true }","⚙️  suppress all logs with { quiet: true }","⚙️  write to custom object with { processEnv: myObject }","⚙️  load multiple .env files with { path: ['.env.local', '.env'] }"];function a(e){return process.stdout.isTTY?`[2m${e}[0m`:e}const u=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function c(e){console.log(`[dotenv@${n}][DEBUG] ${e}`)}function p(e){console.log(`[dotenv@${n}] ${e}`)}function h(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function d(e,t){let r;try{r=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const s=r.password;if(!s){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const o=r.searchParams.get("environment");if(!o){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const n=`DOTENV_VAULT_${o.toUpperCase()}`,i=e.parsed[n];if(!i){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${n} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:i,key:s}}function g(r){let s=null;if(r&&r.path&&r.path.length>0)if(Array.isArray(r.path))for(const t of r.path)e.existsSync(t)&&(s=t.endsWith(".vault")?t:`${t}.vault`);else s=r.path.endsWith(".vault")?r.path:`${r.path}.vault`;else s=t.resolve(process.cwd(),".env.vault");return e.existsSync(s)?s:null}function f(e){return"~"===e[0]?t.join(s.homedir(),e.slice(1)):e}const m={configDotenv:function(r){const s=t.resolve(process.cwd(),".env");let o="utf8";const n=Boolean(r&&r.debug),u=Boolean(r&&r.quiet);r&&r.encoding?o=r.encoding:n&&c("No encoding is specified. UTF-8 is used by default");let l,h=[s];if(r&&r.path)if(Array.isArray(r.path)){h=[];for(const e of r.path)h.push(f(e))}else h=[f(r.path)];const d={};for(const t of h)try{const s=m.parse(e.readFileSync(t,{encoding:o}));m.populate(d,s,r)}catch(e){n&&c(`Failed to load ${t} ${e.message}`),l=e}let g=process.env;r&&null!=r.processEnv&&(g=r.processEnv);const D=m.populate(g,d,r);if(n||!u){const e=Object.keys(D).length,r=[];for(const e of h)try{const s=t.relative(process.cwd(),e);r.push(s)}catch(t){n&&c(`Failed to load ${e} ${t.message}`),l=t}p(`injecting env (${e}) from ${r.join(",")} ${a(`(tip: ${i[Math.floor(Math.random()*i.length)]})`)}`)}return l?{parsed:d,error:l}:{parsed:d}},_configVault:function(e){const t=Boolean(e&&e.debug),r=Boolean(e&&e.quiet);!t&&r||p("Loading env from encrypted .env.vault");const s=m._parseVault(e);let o=process.env;return e&&null!=e.processEnv&&(o=e.processEnv),m.populate(o,s,e),{parsed:s}},_parseVault:function(e){const t=g(e=e||{});e.path=t;const r=m.configDotenv(e);if(!r.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const s=h(e).split(","),o=s.length;let n;for(let e=0;e<o;e++)try{const t=d(r,s[e].trim());n=m.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=o)throw t}return m.parse(n)},config:function(e){if(0===h(e).length)return m.configDotenv(e);const t=g(e);return t?m._configVault(e):(r=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.error(`[dotenv@${n}][WARN] ${r}`),m.configDotenv(e));var r},decrypt:function(e,t){const r=Buffer.from(t.slice(-64),"hex");let s=Buffer.from(e,"base64");const n=s.subarray(0,12),i=s.subarray(-16);s=s.subarray(12,-16);try{const e=o.createDecipheriv("aes-256-gcm",r,n);return e.setAuthTag(i),`${e.update(s)}${e.final()}`}catch(e){const t=e instanceof RangeError,r="Invalid key length"===e.message,s="Unsupported state or unable to authenticate data"===e.message;if(t||r){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(s){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let r,s=e.toString();for(s=s.replace(/\r\n?/gm,"\n");null!=(r=u.exec(s));){const e=r[1];let s=r[2]||"";s=s.trim();const o=s[0];s=s.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===o&&(s=s.replace(/\\n/g,"\n"),s=s.replace(/\\r/g,"\r")),t[e]=s}return t},populate:function(e,t,r={}){const s=Boolean(r&&r.debug),o=Boolean(r&&r.override),n={};if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const r of Object.keys(t))Object.prototype.hasOwnProperty.call(e,r)?(!0===o&&(e[r]=t[r],n[r]=t[r]),s&&c(!0===o?`"${r}" is already defined and WAS overwritten`:`"${r}" is already defined and was NOT overwritten`)):(e[r]=t[r],n[r]=t[r]);return n}};return Gr.exports.configDotenv=m.configDotenv,Gr.exports._configVault=m._configVault,Gr.exports._parseVault=m._parseVault,Gr.exports.config=m.config,Gr.exports.decrypt=m.decrypt,Gr.exports.parse=m.parse,Gr.exports.populate=m.populate,Gr.exports=m,Gr.exports}(),ts={};function rs(){return Br||(Br=1,(e=ts).isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),e.find=(e,t)=>e.nodes.find(e=>e.type===t),e.exceedsLimit=(t,r,s=1,o)=>!1!==o&&!(!e.isInteger(t)||!e.isInteger(r))&&(Number(r)-Number(t))/Number(s)>=o,e.escapeNode=(e,t=0,r)=>{const s=e.nodes[t];s&&(r&&s.type===r||"open"===s.type||"close"===s.type)&&!0!==s.escaped&&(s.value="\\"+s.value,s.escaped=!0)},e.encloseBrace=e=>!("brace"!==e.type||e.commas>>0+e.ranges|0||(e.invalid=!0,0)),e.isInvalidBrace=e=>!("brace"!==e.type||!0!==e.invalid&&!e.dollar&&(e.commas>>0+e.ranges|0&&!0===e.open&&!0===e.close||(e.invalid=!0,0))),e.isOpenOrClose=e=>"open"===e.type||"close"===e.type||!0===e.open||!0===e.close,e.reduce=e=>e.reduce((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e),[]),e.flatten=(...e)=>{const t=[],r=e=>{for(let s=0;s<e.length;s++){const o=e[s];Array.isArray(o)?r(o):void 0!==o&&t.push(o)}return t};return r(e),t}),ts;var e}function ss(){if($r)return Lr;$r=1;const e=rs();return Lr=(t,r={})=>{const s=(t,o={})=>{const n=r.escapeInvalid&&e.isInvalidBrace(o),i=!0===t.invalid&&!0===r.escapeInvalid;let a="";if(t.value)return(n||i)&&e.isOpenOrClose(t)?"\\"+t.value:t.value;if(t.value)return t.value;if(t.nodes)for(const e of t.nodes)a+=s(e);return a};return s(t)}}
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */function os(){return Ur?jr:(Ur=1,jr=function(e){return"number"==typeof e?e-e===0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))})}
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */function ns(){if(Hr)return Ir;Hr=1;const e=os(),t=(r,n,i)=>{if(!1===e(r))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===n||r===n)return String(r);if(!1===e(n))throw new TypeError("toRegexRange: expected the second argument to be a number.");let a={relaxZeros:!0,...i};"boolean"==typeof a.strictZeros&&(a.relaxZeros=!1===a.strictZeros);let u=r+":"+n+"="+String(a.relaxZeros)+String(a.shorthand)+String(a.capture)+String(a.wrap);if(t.cache.hasOwnProperty(u))return t.cache[u].result;let c=Math.min(r,n),l=Math.max(r,n);if(1===Math.abs(c-l)){let e=r+"|"+n;return a.capture?`(${e})`:!1===a.wrap?e:`(?:${e})`}let h=p(r)||p(n),d={min:r,max:n,a:c,b:l},g=[],f=[];if(h&&(d.isPadded=h,d.maxLen=String(d.max).length),c<0){f=s(l<0?Math.abs(l):1,Math.abs(c),d,a),c=d.a=0}return l>=0&&(g=s(c,l,d,a)),d.negatives=f,d.positives=g,d.result=function(e,t){let r=o(e,t,"-",!1)||[],s=o(t,e,"",!1)||[],n=o(e,t,"-?",!0)||[];return r.concat(n).concat(s).join("|")}(f,g),!0===a.capture?d.result=`(${d.result})`:!1!==a.wrap&&g.length+f.length>1&&(d.result=`(?:${d.result})`),t.cache[u]=d,d.result};function r(e,t,r){if(e===t)return{pattern:e,count:[],digits:0};let s=function(e,t){let r=[];for(let s=0;s<e.length;s++)r.push([e[s],t[s]]);return r}(e,t),o=s.length,n="",i=0;for(let e=0;e<o;e++){let[t,r]=s[e];t===r?n+=t:"0"!==t||"9"!==r?n+=l(t,r):i++}return i&&(n+=!0===r.shorthand?"\\d":"[0-9]"),{pattern:n,count:[i],digits:o}}function s(e,t,s,o){let i,l=function(e,t){let r=1,s=1,o=a(e,r),i=new Set([t]);for(;e<=o&&o<=t;)i.add(o),r+=1,o=a(e,r);for(o=u(t+1,s)-1;e<o&&o<=t;)i.add(o),s+=1,o=u(t+1,s)-1;return i=[...i],i.sort(n),i}(e,t),p=[],d=e;for(let e=0;e<l.length;e++){let t=l[e],n=r(String(d),String(t),o),a="";s.isPadded||!i||i.pattern!==n.pattern?(s.isPadded&&(a=h(t,s,o)),n.string=a+n.pattern+c(n.count),p.push(n),d=t+1,i=n):(i.count.length>1&&i.count.pop(),i.count.push(n.count[0]),i.string=i.pattern+c(i.count),d=t+1)}return p}function o(e,t,r,s,o){let n=[];for(let o of e){let{string:e}=o;s||i(t,"string",e)||n.push(r+e),s&&i(t,"string",e)&&n.push(r+e)}return n}function n(e,t){return e>t?1:t>e?-1:0}function i(e,t,r){return e.some(e=>e[t]===r)}function a(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function u(e,t){return e-e%Math.pow(10,t)}function c(e){let[t=0,r=""]=e;return r||t>1?`{${t+(r?","+r:"")}}`:""}function l(e,t,r){return`[${e}${t-e===1?"":"-"}${t}]`}function p(e){return/^-?(0+)\d/.test(e)}function h(e,t,r){if(!t.isPadded)return e;let s=Math.abs(t.maxLen-String(e).length),o=!1!==r.relaxZeros;switch(s){case 0:return"";case 1:return o?"0?":"0";case 2:return o?"0{0,2}":"00";default:return o?`0{0,${s}}`:`0{${s}}`}}return t.cache={},t.clearCache=()=>t.cache={},Ir=t}
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */function is(){if(Nr)return Mr;Nr=1;const e=f,t=ns(),r=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),s=e=>"number"==typeof e||"string"==typeof e&&""!==e,o=e=>Number.isInteger(+e),n=e=>{let t=`${e}`,r=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++r];);return r>0},i=(e,t,r)=>{if(t>0){let r="-"===e[0]?"-":"";r&&(e=e.slice(1)),e=r+e.padStart(r?t-1:t,"0")}return!1===r?String(e):e},a=(e,t)=>{let r="-"===e[0]?"-":"";for(r&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return r?"-"+e:e},u=(e,r,s,o)=>{if(s)return t(e,r,{wrap:!1,...o});let n=String.fromCharCode(e);return e===r?n:`[${n}-${String.fromCharCode(r)}]`},c=(e,r,s)=>{if(Array.isArray(e)){let t=!0===s.wrap,r=s.capture?"":"?:";return t?`(${r}${e.join("|")})`:e.join("|")}return t(e,r,s)},l=(...t)=>new RangeError("Invalid range arguments: "+e.inspect(...t)),p=(e,t,r)=>{if(!0===r.strictRanges)throw l([e,t]);return[]},h=(e,t,r=1,s={})=>{let o=Number(e),p=Number(t);if(!Number.isInteger(o)||!Number.isInteger(p)){if(!0===s.strictRanges)throw l([e,t]);return[]}0===o&&(o=0),0===p&&(p=0);let h=o>p,d=String(e),g=String(t),f=String(r);r=Math.max(Math.abs(r),1);let m=n(d)||n(g)||n(f),D=m?Math.max(d.length,g.length,f.length):0,E=!1===m&&!1===((e,t,r)=>"string"==typeof e||"string"==typeof t||!0===r.stringify)(e,t,s),y=s.transform||(e=>t=>!0===e?Number(t):String(t))(E);if(s.toRegex&&1===r)return u(a(e,D),a(t,D),!0,s);let b={negatives:[],positives:[]},_=e=>b[e<0?"negatives":"positives"].push(Math.abs(e)),v=[],F=0;for(;h?o>=p:o<=p;)!0===s.toRegex&&r>1?_(o):v.push(i(y(o,F),D,E)),o=h?o-r:o+r,F++;return!0===s.toRegex?r>1?((e,t,r)=>{e.negatives.sort((e,t)=>e<t?-1:e>t?1:0),e.positives.sort((e,t)=>e<t?-1:e>t?1:0);let s,o=t.capture?"":"?:",n="",i="";return e.positives.length&&(n=e.positives.map(e=>a(String(e),r)).join("|")),e.negatives.length&&(i=`-(${o}${e.negatives.map(e=>a(String(e),r)).join("|")})`),s=n&&i?`${n}|${i}`:n||i,t.wrap?`(${o}${s})`:s})(b,s,D):c(v,null,{wrap:!1,...s}):v},d=(e,t,n,i={})=>{if(null==t&&s(e))return[e];if(!s(e)||!s(t))return p(e,t,i);if("function"==typeof n)return d(e,t,1,{transform:n});if(r(n))return d(e,t,0,n);let a={...i};return!0===a.capture&&(a.wrap=!0),n=n||a.step||1,o(n)?o(e)&&o(t)?h(e,t,n,a):((e,t,r=1,s={})=>{if(!o(e)&&e.length>1||!o(t)&&t.length>1)return p(e,t,s);let n=s.transform||(e=>String.fromCharCode(e)),i=`${e}`.charCodeAt(0),a=`${t}`.charCodeAt(0),l=i>a,h=Math.min(i,a),d=Math.max(i,a);if(s.toRegex&&1===r)return u(h,d,!1,s);let g=[],f=0;for(;l?i>=a:i<=a;)g.push(n(i,f)),i=l?i-r:i+r,f++;return!0===s.toRegex?c(g,null,{wrap:!1,options:s}):g})(e,t,Math.max(Math.abs(n),1),a):null==n||r(n)?d(e,t,1,n):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(n,a)};return Mr=d}function as(){if(Zr)return Qr;Zr=1;const e=ss(),{MAX_LENGTH:t,CHAR_BACKSLASH:r,CHAR_BACKTICK:s,CHAR_COMMA:o,CHAR_DOT:n,CHAR_LEFT_PARENTHESES:i,CHAR_RIGHT_PARENTHESES:a,CHAR_LEFT_CURLY_BRACE:u,CHAR_RIGHT_CURLY_BRACE:c,CHAR_LEFT_SQUARE_BRACKET:l,CHAR_RIGHT_SQUARE_BRACKET:p,CHAR_DOUBLE_QUOTE:h,CHAR_SINGLE_QUOTE:d,CHAR_NO_BREAK_SPACE:g,CHAR_ZERO_WIDTH_NOBREAK_SPACE:f}=Yr?Kr:(Yr=1,Kr={MAX_LENGTH:1e4,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"});return Qr=(m,D={})=>{if("string"!=typeof m)throw new TypeError("Expected a string");const E=D||{},y="number"==typeof E.maxLength?Math.min(t,E.maxLength):t;if(m.length>y)throw new SyntaxError(`Input length (${m.length}), exceeds max characters (${y})`);const b={type:"root",input:m,nodes:[]},_=[b];let v=b,F=b,w=0;const T=m.length;let C,A=0,O=0;const k=()=>m[A++],R=e=>{if("text"===e.type&&"dot"===F.type&&(F.type="text"),!F||"text"!==F.type||"text"!==e.type)return v.nodes.push(e),e.parent=v,e.prev=F,F=e,e;F.value+=e.value};for(R({type:"bos"});A<T;)if(v=_[_.length-1],C=k(),C!==f&&C!==g)if(C!==r)if(C!==p){if(C===l){let e;for(w++;A<T&&(e=k());)if(C+=e,e!==l)if(e!==r){if(e===p&&(w--,0===w))break}else C+=k();else w++;R({type:"text",value:C});continue}if(C!==i)if(C!==a){if(C===h||C===d||C===s){const e=C;let t;for(!0!==D.keepQuotes&&(C="");A<T&&(t=k());)if(t!==r){if(t===e){!0===D.keepQuotes&&(C+=t);break}C+=t}else C+=t+k();R({type:"text",value:C});continue}if(C===u){O++;const e=F.value&&"$"===F.value.slice(-1)||!0===v.dollar;v=R({type:"brace",open:!0,close:!1,dollar:e,depth:O,commas:0,ranges:0,nodes:[]}),_.push(v),R({type:"open",value:C});continue}if(C===c){if("brace"!==v.type){R({type:"text",value:C});continue}const e="close";v=_.pop(),v.close=!0,R({type:e,value:C}),O--,v=_[_.length-1];continue}if(C===o&&O>0){if(v.ranges>0){v.ranges=0;const t=v.nodes.shift();v.nodes=[t,{type:"text",value:e(v)}]}R({type:"comma",value:C}),v.commas++}else{if(C===n&&O>0&&0===v.commas){const e=v.nodes;if(0===O||0===e.length){R({type:"text",value:C});continue}if("dot"===F.type){if(v.range=[],F.value+=C,F.type="range",3!==v.nodes.length&&5!==v.nodes.length){v.invalid=!0,v.ranges=0,F.type="text";continue}v.ranges++,v.args=[];continue}if("range"===F.type){e.pop();const t=e[e.length-1];t.value+=F.value+C,F=t,v.ranges--;continue}R({type:"dot",value:C});continue}R({type:"text",value:C})}}else{if("paren"!==v.type){R({type:"text",value:C});continue}v=_.pop(),R({type:"text",value:C}),v=_[_.length-1]}else v=R({type:"paren",nodes:[]}),_.push(v),R({type:"text",value:C})}else R({type:"text",value:"\\"+C});else R({type:"text",value:(D.keepEscaping?C:"")+k()});do{if(v=_.pop(),"root"!==v.type){v.nodes.forEach(e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)});const e=_[_.length-1],t=e.nodes.indexOf(v);e.nodes.splice(t,1,...v.nodes)}}while(_.length>0);return R({type:"eos"}),b},Qr}function us(){if(Jr)return Xr;Jr=1;const e=ss(),t=function(){if(Wr)return qr;Wr=1;const e=is(),t=rs();return qr=(r,s={})=>{const o=(r,n={})=>{const i=t.isInvalidBrace(n),a=!0===r.invalid&&!0===s.escapeInvalid,u=!0===i||!0===a,c=!0===s.escapeInvalid?"\\":"";let l="";if(!0===r.isOpen)return c+r.value;if(!0===r.isClose)return console.log("node.isClose",c,r.value),c+r.value;if("open"===r.type)return u?c+r.value:"(";if("close"===r.type)return u?c+r.value:")";if("comma"===r.type)return"comma"===r.prev.type?"":u?r.value:"|";if(r.value)return r.value;if(r.nodes&&r.ranges>0){const o=t.reduce(r.nodes),n=e(...o,{...s,wrap:!1,toRegex:!0,strictZeros:!0});if(0!==n.length)return o.length>1&&n.length>1?`(${n})`:n}if(r.nodes)for(const e of r.nodes)l+=o(e,r);return l};return o(r)}}(),r=function(){if(Vr)return zr;Vr=1;const e=is(),t=ss(),r=rs(),s=(e="",t="",o=!1)=>{const n=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return o?r.flatten(t).map(e=>`{${e}}`):t;for(const r of e)if(Array.isArray(r))for(const e of r)n.push(s(e,t,o));else for(let e of t)!0===o&&"string"==typeof e&&(e=`{${e}}`),n.push(Array.isArray(e)?s(r,e,o):r+e);return r.flatten(n)};return zr=(o,n={})=>{const i=void 0===n.rangeLimit?1e3:n.rangeLimit,a=(o,u={})=>{o.queue=[];let c=u,l=u.queue;for(;"brace"!==c.type&&"root"!==c.type&&c.parent;)c=c.parent,l=c.queue;if(o.invalid||o.dollar)return void l.push(s(l.pop(),t(o,n)));if("brace"===o.type&&!0!==o.invalid&&2===o.nodes.length)return void l.push(s(l.pop(),["{}"]));if(o.nodes&&o.ranges>0){const a=r.reduce(o.nodes);if(r.exceedsLimit(...a,n.step,i))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let u=e(...a,n);return 0===u.length&&(u=t(o,n)),l.push(s(l.pop(),u)),void(o.nodes=[])}const p=r.encloseBrace(o);let h=o.queue,d=o;for(;"brace"!==d.type&&"root"!==d.type&&d.parent;)d=d.parent,h=d.queue;for(let e=0;e<o.nodes.length;e++){const t=o.nodes[e];"comma"!==t.type||"brace"!==o.type?"close"!==t.type?t.value&&"open"!==t.type?h.push(s(h.pop(),t.value)):t.nodes&&a(t,o):l.push(s(l.pop(),h,p)):(1===e&&h.push(""),h.push(""))}return h};return r.flatten(a(o))}}(),s=as(),o=(e,t={})=>{let r=[];if(Array.isArray(e))for(const s of e){const e=o.create(s,t);Array.isArray(e)?r.push(...e):r.push(e)}else r=[].concat(o.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(r=[...new Set(r)]),r};return o.parse=(e,t={})=>s(e,t),o.stringify=(t,r={})=>e("string"==typeof t?o.parse(t,r):t,r),o.compile=(e,r={})=>("string"==typeof e&&(e=o.parse(e,r)),t(e,r)),o.expand=(e,t={})=>{"string"==typeof e&&(e=o.parse(e,t));let s=r(e,t);return!0===t.noempty&&(s=s.filter(Boolean)),!0===t.nodupes&&(s=[...new Set(s)]),s},o.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?o.compile(e,t):o.expand(e,t),Xr=o}var cs,ls,ps,hs,ds,gs,fs,ms,Ds,Es,ys,bs,_s,vs={};function Fs(){if(ls)return cs;ls=1;const e=r,t="\\\\/",s=`[^${t}]`,o="\\.",n="\\/",i="[^/]",a=`(?:${n}|$)`,u=`(?:^|${n})`,c=`${o}{1,2}${a}`,l={DOT_LITERAL:o,PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:n,ONE_CHAR:"(?=.)",QMARK:i,END_ANCHOR:a,DOTS_SLASH:c,NO_DOT:`(?!${o})`,NO_DOTS:`(?!${u}${c})`,NO_DOT_SLASH:`(?!${o}{0,1}${a})`,NO_DOTS_SLASH:`(?!${c})`,QMARK_NO_DOT:`[^.${n}]`,STAR:`${i}*?`,START_ANCHOR:u},p={...l,SLASH_LITERAL:`[${t}]`,QMARK:s,STAR:`${s}*?`,DOTS_SLASH:`${o}{1,2}(?:[${t}]|$)`,NO_DOT:`(?!${o})`,NO_DOTS:`(?!(?:^|[${t}])${o}{1,2}(?:[${t}]|$))`,NO_DOT_SLASH:`(?!${o}{0,1}(?:[${t}]|$))`,NO_DOTS_SLASH:`(?!${o}{1,2}(?:[${t}]|$))`,QMARK_NO_DOT:`[^.${t}]`,START_ANCHOR:`(?:^|[${t}])`,END_ANCHOR:`(?:[${t}]|$)`};return cs={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:e.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?p:l}}function ws(){return ps||(ps=1,function(e){const t=r,s="win32"===process.platform,{REGEX_BACKSLASH:o,REGEX_REMOVE_BACKSLASH:n,REGEX_SPECIAL_CHARS:i,REGEX_SPECIAL_CHARS_GLOBAL:a}=Fs();e.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),e.hasRegexChars=e=>i.test(e),e.isRegexChar=t=>1===t.length&&e.hasRegexChars(t),e.escapeRegex=e=>e.replace(a,"\\$1"),e.toPosixSlashes=e=>e.replace(o,"/"),e.removeBackslashes=e=>e.replace(n,e=>"\\"===e?"":e),e.supportsLookbehinds=()=>{const e=process.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},e.isWindows=e=>e&&"boolean"==typeof e.windows?e.windows:!0===s||"\\"===t.sep,e.escapeLast=(t,r,s)=>{const o=t.lastIndexOf(r,s);return-1===o?t:"\\"===t[o-1]?e.escapeLast(t,r,o-1):`${t.slice(0,o)}\\${t.slice(o)}`},e.removePrefix=(e,t={})=>{let r=e;return r.startsWith("./")&&(r=r.slice(2),t.prefix="./"),r},e.wrapOutput=(e,t={},r={})=>{let s=`${r.contains?"":"^"}(?:${e})${r.contains?"":"$"}`;return!0===t.negated&&(s=`(?:^(?!${s}).*$)`),s}}(vs)),vs}function Ts(){if(Ds)return ms;Ds=1;const e=r,t=function(){if(ds)return hs;ds=1;const e=ws(),{CHAR_ASTERISK:t,CHAR_AT:r,CHAR_BACKWARD_SLASH:s,CHAR_COMMA:o,CHAR_DOT:n,CHAR_EXCLAMATION_MARK:i,CHAR_FORWARD_SLASH:a,CHAR_LEFT_CURLY_BRACE:u,CHAR_LEFT_PARENTHESES:c,CHAR_LEFT_SQUARE_BRACKET:l,CHAR_PLUS:p,CHAR_QUESTION_MARK:h,CHAR_RIGHT_CURLY_BRACE:d,CHAR_RIGHT_PARENTHESES:g,CHAR_RIGHT_SQUARE_BRACKET:f}=Fs(),m=e=>e===a||e===s,D=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};return hs=(E,y)=>{const b=y||{},_=E.length-1,v=!0===b.parts||!0===b.scanToEnd,F=[],w=[],T=[];let C,A,O=E,k=-1,R=0,S=0,P=!1,G=!1,x=!1,B=!1,L=!1,$=!1,j=!1,U=!1,I=!1,H=!1,M=0,N={value:"",depth:0,isGlob:!1};const q=()=>k>=_,W=()=>O.charCodeAt(k+1),z=()=>(C=A,O.charCodeAt(++k));for(;k<_;){let e;if(A=z(),A!==s){if(!0===$||A===u){for(M++;!0!==q()&&(A=z());)if(A!==s)if(A!==u){if(!0!==$&&A===n&&(A=z())===n){if(P=N.isBrace=!0,x=N.isGlob=!0,H=!0,!0===v)continue;break}if(!0!==$&&A===o){if(P=N.isBrace=!0,x=N.isGlob=!0,H=!0,!0===v)continue;break}if(A===d&&(M--,0===M)){$=!1,P=N.isBrace=!0,H=!0;break}}else M++;else j=N.backslashes=!0,z();if(!0===v)continue;break}if(A!==a){if(!0!==b.noext&&!0==(A===p||A===r||A===t||A===h||A===i)&&W()===c){if(x=N.isGlob=!0,B=N.isExtglob=!0,H=!0,A===i&&k===R&&(I=!0),!0===v){for(;!0!==q()&&(A=z());)if(A!==s){if(A===g){x=N.isGlob=!0,H=!0;break}}else j=N.backslashes=!0,A=z();continue}break}if(A===t){if(C===t&&(L=N.isGlobstar=!0),x=N.isGlob=!0,H=!0,!0===v)continue;break}if(A===h){if(x=N.isGlob=!0,H=!0,!0===v)continue;break}if(A===l){for(;!0!==q()&&(e=z());)if(e!==s){if(e===f){G=N.isBracket=!0,x=N.isGlob=!0,H=!0;break}}else j=N.backslashes=!0,z();if(!0===v)continue;break}if(!0===b.nonegate||A!==i||k!==R){if(!0!==b.noparen&&A===c){if(x=N.isGlob=!0,!0===v){for(;!0!==q()&&(A=z());)if(A!==c){if(A===g){H=!0;break}}else j=N.backslashes=!0,A=z();continue}break}if(!0===x){if(H=!0,!0===v)continue;break}}else U=N.negated=!0,R++}else{if(F.push(k),w.push(N),N={value:"",depth:0,isGlob:!1},!0===H)continue;if(C===n&&k===R+1){R+=2;continue}S=k+1}}else j=N.backslashes=!0,A=z(),A===u&&($=!0)}!0===b.noext&&(B=!1,x=!1);let V=O,K="",Y="";R>0&&(K=O.slice(0,R),O=O.slice(R),S-=R),V&&!0===x&&S>0?(V=O.slice(0,S),Y=O.slice(S)):!0===x?(V="",Y=O):V=O,V&&""!==V&&"/"!==V&&V!==O&&m(V.charCodeAt(V.length-1))&&(V=V.slice(0,-1)),!0===b.unescape&&(Y&&(Y=e.removeBackslashes(Y)),V&&!0===j&&(V=e.removeBackslashes(V)));const Q={prefix:K,input:E,start:R,base:V,glob:Y,isBrace:P,isBracket:G,isGlob:x,isExtglob:B,isGlobstar:L,negated:U,negatedExtglob:I};if(!0===b.tokens&&(Q.maxDepth=0,m(A)||w.push(N),Q.tokens=w),!0===b.parts||!0===b.tokens){let e;for(let t=0;t<F.length;t++){const r=e?e+1:R,s=F[t],o=E.slice(r,s);b.tokens&&(0===t&&0!==R?(w[t].isPrefix=!0,w[t].value=K):w[t].value=o,D(w[t]),Q.maxDepth+=w[t].depth),0===t&&""===o||T.push(o),e=s}if(e&&e+1<E.length){const t=E.slice(e+1);T.push(t),b.tokens&&(w[w.length-1].value=t,D(w[w.length-1]),Q.maxDepth+=w[w.length-1].depth)}Q.slashes=F,Q.parts=T}return Q},hs}(),s=function(){if(fs)return gs;fs=1;const e=Fs(),t=ws(),{MAX_LENGTH:r,POSIX_REGEX_SOURCE:s,REGEX_NON_SPECIAL_CHARS:o,REGEX_SPECIAL_CHARS_BACKREF:n,REPLACEMENTS:i}=e,a=(e,r)=>{if("function"==typeof r.expandRange)return r.expandRange(...e,r);e.sort();const s=`[${e.join("-")}]`;try{new RegExp(s)}catch(r){return e.map(e=>t.escapeRegex(e)).join("..")}return s},u=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,c=(l,p)=>{if("string"!=typeof l)throw new TypeError("Expected a string");l=i[l]||l;const h={...p},d="number"==typeof h.maxLength?Math.min(r,h.maxLength):r;let g=l.length;if(g>d)throw new SyntaxError(`Input length: ${g}, exceeds maximum allowed length: ${d}`);const f={type:"bos",value:"",output:h.prepend||""},m=[f],D=h.capture?"":"?:",E=t.isWindows(p),y=e.globChars(E),b=e.extglobChars(y),{DOT_LITERAL:_,PLUS_LITERAL:v,SLASH_LITERAL:F,ONE_CHAR:w,DOTS_SLASH:T,NO_DOT:C,NO_DOT_SLASH:A,NO_DOTS_SLASH:O,QMARK:k,QMARK_NO_DOT:R,STAR:S,START_ANCHOR:P}=y,G=e=>`(${D}(?:(?!${P}${e.dot?T:_}).)*?)`,x=h.dot?"":C,B=h.dot?k:R;let L=!0===h.bash?G(h):S;h.capture&&(L=`(${L})`),"boolean"==typeof h.noext&&(h.noextglob=h.noext);const $={input:l,index:-1,start:0,dot:!0===h.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:m};l=t.removePrefix(l,$),g=l.length;const j=[],U=[],I=[];let H,M=f;const N=()=>$.index===g-1,q=$.peek=(e=1)=>l[$.index+e],W=$.advance=()=>l[++$.index]||"",z=()=>l.slice($.index+1),V=(e="",t=0)=>{$.consumed+=e,$.index+=t},K=e=>{$.output+=null!=e.output?e.output:e.value,V(e.value)},Y=()=>{let e=1;for(;"!"===q()&&("("!==q(2)||"?"===q(3));)W(),$.start++,e++;return e%2!=0&&($.negated=!0,$.start++,!0)},Q=e=>{$[e]++,I.push(e)},Z=e=>{$[e]--,I.pop()},X=e=>{if("globstar"===M.type){const t=$.braces>0&&("comma"===e.type||"brace"===e.type),r=!0===e.extglob||j.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||r||($.output=$.output.slice(0,-M.output.length),M.type="star",M.value="*",M.output=L,$.output+=M.output)}if(j.length&&"paren"!==e.type&&(j[j.length-1].inner+=e.value),(e.value||e.output)&&K(e),M&&"text"===M.type&&"text"===e.type)return M.value+=e.value,void(M.output=(M.output||"")+e.value);e.prev=M,m.push(e),M=e},J=(e,t)=>{const r={...b[t],conditions:1,inner:""};r.prev=M,r.parens=$.parens,r.output=$.output;const s=(h.capture?"(":"")+r.open;Q("parens"),X({type:e,value:t,output:$.output?"":w}),X({type:"paren",extglob:!0,value:W(),output:s}),j.push(r)},ee=e=>{let t,r=e.close+(h.capture?")":"");if("negate"===e.type){let s=L;if(e.inner&&e.inner.length>1&&e.inner.includes("/")&&(s=G(h)),(s!==L||N()||/^\)+$/.test(z()))&&(r=e.close=`)$))${s}`),e.inner.includes("*")&&(t=z())&&/^\.[^\\/.]+$/.test(t)){const o=c(t,{...p,fastpaths:!1}).output;r=e.close=`)${o})${s})`}"bos"===e.prev.type&&($.negatedExtglob=!0)}X({type:"paren",extglob:!0,value:H,output:r}),Z("parens")};if(!1!==h.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(l)){let e=!1,r=l.replace(n,(t,r,s,o,n,i)=>"\\"===o?(e=!0,t):"?"===o?r?r+o+(n?k.repeat(n.length):""):0===i?B+(n?k.repeat(n.length):""):k.repeat(s.length):"."===o?_.repeat(s.length):"*"===o?r?r+o+(n?L:""):L:r?t:`\\${t}`);return!0===e&&(r=!0===h.unescape?r.replace(/\\/g,""):r.replace(/\\+/g,e=>e.length%2==0?"\\\\":e?"\\":"")),r===l&&!0===h.contains?($.output=l,$):($.output=t.wrapOutput(r,$,p),$)}for(;!N();){if(H=W(),"\0"===H)continue;if("\\"===H){const e=q();if("/"===e&&!0!==h.bash)continue;if("."===e||";"===e)continue;if(!e){H+="\\",X({type:"text",value:H});continue}const t=/^\\+/.exec(z());let r=0;if(t&&t[0].length>2&&(r=t[0].length,$.index+=r,r%2!=0&&(H+="\\")),!0===h.unescape?H=W():H+=W(),0===$.brackets){X({type:"text",value:H});continue}}if($.brackets>0&&("]"!==H||"["===M.value||"[^"===M.value)){if(!1!==h.posix&&":"===H){const e=M.value.slice(1);if(e.includes("[")&&(M.posix=!0,e.includes(":"))){const e=M.value.lastIndexOf("["),t=M.value.slice(0,e),r=M.value.slice(e+2),o=s[r];if(o){M.value=t+o,$.backtrack=!0,W(),f.output||1!==m.indexOf(M)||(f.output=w);continue}}}("["===H&&":"!==q()||"-"===H&&"]"===q())&&(H=`\\${H}`),"]"!==H||"["!==M.value&&"[^"!==M.value||(H=`\\${H}`),!0===h.posix&&"!"===H&&"["===M.value&&(H="^"),M.value+=H,K({value:H});continue}if(1===$.quotes&&'"'!==H){H=t.escapeRegex(H),M.value+=H,K({value:H});continue}if('"'===H){$.quotes=1===$.quotes?0:1,!0===h.keepQuotes&&X({type:"text",value:H});continue}if("("===H){Q("parens"),X({type:"paren",value:H});continue}if(")"===H){if(0===$.parens&&!0===h.strictBrackets)throw new SyntaxError(u("opening","("));const e=j[j.length-1];if(e&&$.parens===e.parens+1){ee(j.pop());continue}X({type:"paren",value:H,output:$.parens?")":"\\)"}),Z("parens");continue}if("["===H){if(!0!==h.nobracket&&z().includes("]"))Q("brackets");else{if(!0!==h.nobracket&&!0===h.strictBrackets)throw new SyntaxError(u("closing","]"));H=`\\${H}`}X({type:"bracket",value:H});continue}if("]"===H){if(!0===h.nobracket||M&&"bracket"===M.type&&1===M.value.length){X({type:"text",value:H,output:`\\${H}`});continue}if(0===$.brackets){if(!0===h.strictBrackets)throw new SyntaxError(u("opening","["));X({type:"text",value:H,output:`\\${H}`});continue}Z("brackets");const e=M.value.slice(1);if(!0===M.posix||"^"!==e[0]||e.includes("/")||(H=`/${H}`),M.value+=H,K({value:H}),!1===h.literalBrackets||t.hasRegexChars(e))continue;const r=t.escapeRegex(M.value);if($.output=$.output.slice(0,-M.value.length),!0===h.literalBrackets){$.output+=r,M.value=r;continue}M.value=`(${D}${r}|${M.value})`,$.output+=M.value;continue}if("{"===H&&!0!==h.nobrace){Q("braces");const e={type:"brace",value:H,output:"(",outputIndex:$.output.length,tokensIndex:$.tokens.length};U.push(e),X(e);continue}if("}"===H){const e=U[U.length-1];if(!0===h.nobrace||!e){X({type:"text",value:H,output:H});continue}let t=")";if(!0===e.dots){const e=m.slice(),r=[];for(let t=e.length-1;t>=0&&(m.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&r.unshift(e[t].value);t=a(r,h),$.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const r=$.output.slice(0,e.outputIndex),s=$.tokens.slice(e.tokensIndex);e.value=e.output="\\{",H=t="\\}",$.output=r;for(const e of s)$.output+=e.output||e.value}X({type:"brace",value:H,output:t}),Z("braces"),U.pop();continue}if("|"===H){j.length>0&&j[j.length-1].conditions++,X({type:"text",value:H});continue}if(","===H){let e=H;const t=U[U.length-1];t&&"braces"===I[I.length-1]&&(t.comma=!0,e="|"),X({type:"comma",value:H,output:e});continue}if("/"===H){if("dot"===M.type&&$.index===$.start+1){$.start=$.index+1,$.consumed="",$.output="",m.pop(),M=f;continue}X({type:"slash",value:H,output:F});continue}if("."===H){if($.braces>0&&"dot"===M.type){"."===M.value&&(M.output=_);const e=U[U.length-1];M.type="dots",M.output+=H,M.value+=H,e.dots=!0;continue}if($.braces+$.parens===0&&"bos"!==M.type&&"slash"!==M.type){X({type:"text",value:H,output:_});continue}X({type:"dot",value:H,output:_});continue}if("?"===H){if((!M||"("!==M.value)&&!0!==h.noextglob&&"("===q()&&"?"!==q(2)){J("qmark",H);continue}if(M&&"paren"===M.type){const e=q();let r=H;if("<"===e&&!t.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===M.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(z()))&&(r=`\\${H}`),X({type:"text",value:H,output:r});continue}if(!0!==h.dot&&("slash"===M.type||"bos"===M.type)){X({type:"qmark",value:H,output:R});continue}X({type:"qmark",value:H,output:k});continue}if("!"===H){if(!0!==h.noextglob&&"("===q()&&("?"!==q(2)||!/[!=<:]/.test(q(3)))){J("negate",H);continue}if(!0!==h.nonegate&&0===$.index){Y();continue}}if("+"===H){if(!0!==h.noextglob&&"("===q()&&"?"!==q(2)){J("plus",H);continue}if(M&&"("===M.value||!1===h.regex){X({type:"plus",value:H,output:v});continue}if(M&&("bracket"===M.type||"paren"===M.type||"brace"===M.type)||$.parens>0){X({type:"plus",value:H});continue}X({type:"plus",value:v});continue}if("@"===H){if(!0!==h.noextglob&&"("===q()&&"?"!==q(2)){X({type:"at",extglob:!0,value:H,output:""});continue}X({type:"text",value:H});continue}if("*"!==H){"$"!==H&&"^"!==H||(H=`\\${H}`);const e=o.exec(z());e&&(H+=e[0],$.index+=e[0].length),X({type:"text",value:H});continue}if(M&&("globstar"===M.type||!0===M.star)){M.type="star",M.star=!0,M.value+=H,M.output=L,$.backtrack=!0,$.globstar=!0,V(H);continue}let e=z();if(!0!==h.noextglob&&/^\([^?]/.test(e)){J("star",H);continue}if("star"===M.type){if(!0===h.noglobstar){V(H);continue}const t=M.prev,r=t.prev,s="slash"===t.type||"bos"===t.type,o=r&&("star"===r.type||"globstar"===r.type);if(!0===h.bash&&(!s||e[0]&&"/"!==e[0])){X({type:"star",value:H,output:""});continue}const n=$.braces>0&&("comma"===t.type||"brace"===t.type),i=j.length&&("pipe"===t.type||"paren"===t.type);if(!s&&"paren"!==t.type&&!n&&!i){X({type:"star",value:H,output:""});continue}for(;"/**"===e.slice(0,3);){const t=l[$.index+4];if(t&&"/"!==t)break;e=e.slice(3),V("/**",3)}if("bos"===t.type&&N()){M.type="globstar",M.value+=H,M.output=G(h),$.output=M.output,$.globstar=!0,V(H);continue}if("slash"===t.type&&"bos"!==t.prev.type&&!o&&N()){$.output=$.output.slice(0,-(t.output+M.output).length),t.output=`(?:${t.output}`,M.type="globstar",M.output=G(h)+(h.strictSlashes?")":"|$)"),M.value+=H,$.globstar=!0,$.output+=t.output+M.output,V(H);continue}if("slash"===t.type&&"bos"!==t.prev.type&&"/"===e[0]){const r=void 0!==e[1]?"|$":"";$.output=$.output.slice(0,-(t.output+M.output).length),t.output=`(?:${t.output}`,M.type="globstar",M.output=`${G(h)}${F}|${F}${r})`,M.value+=H,$.output+=t.output+M.output,$.globstar=!0,V(H+W()),X({type:"slash",value:"/",output:""});continue}if("bos"===t.type&&"/"===e[0]){M.type="globstar",M.value+=H,M.output=`(?:^|${F}|${G(h)}${F})`,$.output=M.output,$.globstar=!0,V(H+W()),X({type:"slash",value:"/",output:""});continue}$.output=$.output.slice(0,-M.output.length),M.type="globstar",M.output=G(h),M.value+=H,$.output+=M.output,$.globstar=!0,V(H);continue}const r={type:"star",value:H,output:L};!0!==h.bash?!M||"bracket"!==M.type&&"paren"!==M.type||!0!==h.regex?($.index!==$.start&&"slash"!==M.type&&"dot"!==M.type||("dot"===M.type?($.output+=A,M.output+=A):!0===h.dot?($.output+=O,M.output+=O):($.output+=x,M.output+=x),"*"!==q()&&($.output+=w,M.output+=w)),X(r)):(r.output=H,X(r)):(r.output=".*?","bos"!==M.type&&"slash"!==M.type||(r.output=x+r.output),X(r))}for(;$.brackets>0;){if(!0===h.strictBrackets)throw new SyntaxError(u("closing","]"));$.output=t.escapeLast($.output,"["),Z("brackets")}for(;$.parens>0;){if(!0===h.strictBrackets)throw new SyntaxError(u("closing",")"));$.output=t.escapeLast($.output,"("),Z("parens")}for(;$.braces>0;){if(!0===h.strictBrackets)throw new SyntaxError(u("closing","}"));$.output=t.escapeLast($.output,"{"),Z("braces")}if(!0===h.strictSlashes||"star"!==M.type&&"bracket"!==M.type||X({type:"maybe_slash",value:"",output:`${F}?`}),!0===$.backtrack){$.output="";for(const e of $.tokens)$.output+=null!=e.output?e.output:e.value,e.suffix&&($.output+=e.suffix)}return $};return c.fastpaths=(s,o)=>{const n={...o},a="number"==typeof n.maxLength?Math.min(r,n.maxLength):r,u=s.length;if(u>a)throw new SyntaxError(`Input length: ${u}, exceeds maximum allowed length: ${a}`);s=i[s]||s;const c=t.isWindows(o),{DOT_LITERAL:l,SLASH_LITERAL:p,ONE_CHAR:h,DOTS_SLASH:d,NO_DOT:g,NO_DOTS:f,NO_DOTS_SLASH:m,STAR:D,START_ANCHOR:E}=e.globChars(c),y=n.dot?f:g,b=n.dot?m:g,_=n.capture?"":"?:";let v=!0===n.bash?".*?":D;n.capture&&(v=`(${v})`);const F=e=>!0===e.noglobstar?v:`(${_}(?:(?!${E}${e.dot?d:l}).)*?)`,w=e=>{switch(e){case"*":return`${y}${h}${v}`;case".*":return`${l}${h}${v}`;case"*.*":return`${y}${v}${l}${h}${v}`;case"*/*":return`${y}${v}${p}${h}${b}${v}`;case"**":return y+F(n);case"**/*":return`(?:${y}${F(n)}${p})?${b}${h}${v}`;case"**/*.*":return`(?:${y}${F(n)}${p})?${b}${v}${l}${h}${v}`;case"**/.*":return`(?:${y}${F(n)}${p})?${l}${h}${v}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const r=w(t[1]);if(!r)return;return r+l+t[2]}}},T=t.removePrefix(s,{negated:!1,prefix:""});let C=w(T);return C&&!0!==n.strictSlashes&&(C+=`${p}?`),C},gs=c}(),o=ws(),n=Fs(),i=(e,t,r=!1)=>{if(Array.isArray(e)){const s=e.map(e=>i(e,t,r)),o=e=>{for(const t of s){const r=t(e);if(r)return r}return!1};return o}const s=(n=e)&&"object"==typeof n&&!Array.isArray(n)&&e.tokens&&e.input;var n;if(""===e||"string"!=typeof e&&!s)throw new TypeError("Expected pattern to be a non-empty string");const a=t||{},u=o.isWindows(t),c=s?i.compileRe(e,t):i.makeRe(e,t,!1,!0),l=c.state;delete c.state;let p=()=>!1;if(a.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};p=i(a.ignore,e,r)}const h=(r,s=!1)=>{const{isMatch:o,match:n,output:h}=i.test(r,c,t,{glob:e,posix:u}),d={glob:e,state:l,regex:c,posix:u,input:r,output:h,match:n,isMatch:o};return"function"==typeof a.onResult&&a.onResult(d),!1===o?(d.isMatch=!1,!!s&&d):p(r)?("function"==typeof a.onIgnore&&a.onIgnore(d),d.isMatch=!1,!!s&&d):("function"==typeof a.onMatch&&a.onMatch(d),!s||d)};return r&&(h.state=l),h};return i.test=(e,t,r,{glob:s,posix:n}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const a=r||{},u=a.format||(n?o.toPosixSlashes:null);let c=e===s,l=c&&u?u(e):e;return!1===c&&(l=u?u(e):e,c=l===s),!1!==c&&!0!==a.capture||(c=!0===a.matchBase||!0===a.basename?i.matchBase(e,t,r,n):t.exec(l)),{isMatch:Boolean(c),match:c,output:l}},i.matchBase=(t,r,s,n=o.isWindows(s))=>(r instanceof RegExp?r:i.makeRe(r,s)).test(e.basename(t)),i.isMatch=(e,t,r)=>i(t,r)(e),i.parse=(e,t)=>Array.isArray(e)?e.map(e=>i.parse(e,t)):s(e,{...t,fastpaths:!1}),i.scan=(e,r)=>t(e,r),i.compileRe=(e,t,r=!1,s=!1)=>{if(!0===r)return e.output;const o=t||{},n=o.contains?"":"^",a=o.contains?"":"$";let u=`${n}(?:${e.output})${a}`;e&&!0===e.negated&&(u=`^(?!${u}).*$`);const c=i.toRegex(u,t);return!0===s&&(c.state=e),c},i.makeRe=(e,t={},r=!1,o=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");let n={negated:!1,fastpaths:!0};return!1===t.fastpaths||"."!==e[0]&&"*"!==e[0]||(n.output=s.fastpaths(e,t)),n.output||(n=s(e,t)),i.compileRe(n,t,r,o)},i.toRegex=(e,t)=>{try{const r=t||{};return new RegExp(e,r.flags||(r.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},i.constants=n,ms=i}function Cs(){return ys?Es:(ys=1,Es=Ts())}var As=function(){if(_s)return bs;_s=1;const e=f,t=us(),r=Cs(),s=ws(),o=e=>""===e||"./"===e,n=e=>{const t=e.indexOf("{");return t>-1&&e.indexOf("}",t)>-1},i=(e,t,s)=>{t=[].concat(t),e=[].concat(e);let o=new Set,n=new Set,i=new Set,a=0,u=e=>{i.add(e.output),s&&s.onResult&&s.onResult(e)};for(let i=0;i<t.length;i++){let c=r(String(t[i]),{...s,onResult:u},!0),l=c.state.negated||c.state.negatedExtglob;l&&a++;for(let t of e){let e=c(t,!0);(l?!e.isMatch:e.isMatch)&&(l?o.add(e.output):(o.delete(e.output),n.add(e.output)))}}let c=(a===t.length?[...i]:[...n]).filter(e=>!o.has(e));if(s&&0===c.length){if(!0===s.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===s.nonull||!0===s.nullglob)return s.unescape?t.map(e=>e.replace(/\\/g,"")):t}return c};return i.match=i,i.matcher=(e,t)=>r(e,t),i.any=i.isMatch=(e,t,s)=>r(t,s)(e),i.not=(e,t,r={})=>{t=[].concat(t).map(String);let s=new Set,o=[],n=new Set(i(e,t,{...r,onResult:e=>{r.onResult&&r.onResult(e),o.push(e.output)}}));for(let e of o)n.has(e)||s.add(e);return[...s]},i.contains=(t,r,s)=>{if("string"!=typeof t)throw new TypeError(`Expected a string: "${e.inspect(t)}"`);if(Array.isArray(r))return r.some(e=>i.contains(t,e,s));if("string"==typeof r){if(o(t)||o(r))return!1;if(t.includes(r)||t.startsWith("./")&&t.slice(2).includes(r))return!0}return i.isMatch(t,r,{...s,contains:!0})},i.matchKeys=(e,t,r)=>{if(!s.isObject(e))throw new TypeError("Expected the first argument to be an object");let o=i(Object.keys(e),t,r),n={};for(let t of o)n[t]=e[t];return n},i.some=(e,t,s)=>{let o=[].concat(e);for(let e of[].concat(t)){let t=r(String(e),s);if(o.some(e=>t(e)))return!0}return!1},i.every=(e,t,s)=>{let o=[].concat(e);for(let e of[].concat(t)){let t=r(String(e),s);if(!o.every(e=>t(e)))return!1}return!0},i.all=(t,s,o)=>{if("string"!=typeof t)throw new TypeError(`Expected a string: "${e.inspect(t)}"`);return[].concat(s).every(e=>r(e,o)(t))},i.capture=(e,t,o)=>{let n=s.isWindows(o),i=r.makeRe(String(e),{...o,capture:!0}).exec(n?s.toPosixSlashes(t):t);if(i)return i.slice(1).map(e=>void 0===e?"":e)},i.makeRe=(...e)=>r.makeRe(...e),i.scan=(...e)=>r.scan(...e),i.parse=(e,s)=>{let o=[];for(let n of[].concat(e||[]))for(let e of t(String(n),s))o.push(r.parse(e,s));return o},i.braces=(e,r)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return r&&!0===r.nobrace||!n(e)?[e]:t(e,r)},i.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return i.braces(e,{...t,expand:!0})},i.hasBraces=n,bs=i}(),Os=Ce(As);function ks(){return"object"==typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"==typeof process&&void 0!==process.version?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function Rs(e,t,r,s){if("function"!=typeof r)throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(t)?t.reverse().reduce((t,r)=>Rs.bind(null,e,r,t,s),r)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((e,t)=>t.hook.bind(null,e,s),r)():r(s))}function Ss(e,t,r,s){const o=s;e.registry[r]||(e.registry[r]=[]),"before"===t&&(s=(e,t)=>Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))),"after"===t&&(s=(e,t)=>{let r;return Promise.resolve().then(e.bind(null,t)).then(e=>(r=e,o(r,t))).then(()=>r)}),"error"===t&&(s=(e,t)=>Promise.resolve().then(e.bind(null,t)).catch(e=>o(e,t))),e.registry[r].push({hook:s,orig:o})}function Ps(e,t,r){if(!e.registry[t])return;const s=e.registry[t].map(e=>e.orig).indexOf(r);-1!==s&&e.registry[t].splice(s,1)}const Gs=Function.bind,xs=Gs.bind(Gs);var Bs={Collection:function(){const e={registry:{}},t=Rs.bind(null,e);return function(e,t){const r=xs(Ps,null).apply(null,[t]);e.api={remove:r},e.remove=r,["before","error","after","wrap"].forEach(r=>{const s=[t,r];e[r]=e.api[r]=xs(Ss,null).apply(null,s)})}(t,e),t}},Ls=`octokit-endpoint.js/0.0.0-development ${ks()}`;function $s(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(s=>{!function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(t[s])?Object.assign(r,{[s]:t[s]}):s in e?r[s]=$s(e[s],t[s]):Object.assign(r,{[s]:t[s]})}),r}function js(e){for(const t in e)void 0===e[t]&&delete e[t];return e}function Us(e,t,r){if("string"==typeof t){let[e,s]=t.split(" ");r=Object.assign(s?{method:e,url:s}:{url:e},r)}else r=Object.assign({},t);var s;r.headers=(s=r.headers)?Object.keys(s).reduce((e,t)=>(e[t.toLowerCase()]=s[t],e),{}):{},js(r),js(r.headers);const o=$s(e||{},r);return"/graphql"===r.url&&(e&&e.mediaType.previews?.length&&(o.mediaType.previews=e.mediaType.previews.filter(e=>!o.mediaType.previews.includes(e)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(e=>e.replace(/-preview/,""))),o}var Is=/\{[^{}}]+\}/g;function Hs(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function Ms(e,t){const r={__proto__:null};for(const s of Object.keys(e))-1===t.indexOf(s)&&(r[s]=e[s]);return r}function Ns(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function qs(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function Ws(e,t,r){return t="+"===e||"#"===e?Ns(t):qs(t),r?qs(r)+"="+t:t}function zs(e){return null!=e}function Vs(e){return";"===e||"&"===e||"?"===e}function Ks(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,s,o){if(s){let e="";const o=[];if(-1!==r.indexOf(s.charAt(0))&&(e=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach(function(r){var s=/([^:\*]*)(?::(\d+)|(\*))?/.exec(r);o.push(function(e,t,r,s){var o=e[r],n=[];if(zs(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),s&&"*"!==s&&(o=o.substring(0,parseInt(s,10))),n.push(Ws(t,o,Vs(t)?r:""));else if("*"===s)Array.isArray(o)?o.filter(zs).forEach(function(e){n.push(Ws(t,e,Vs(t)?r:""))}):Object.keys(o).forEach(function(e){zs(o[e])&&n.push(Ws(t,o[e],e))});else{const e=[];Array.isArray(o)?o.filter(zs).forEach(function(r){e.push(Ws(t,r))}):Object.keys(o).forEach(function(r){zs(o[r])&&(e.push(qs(r)),e.push(Ws(t,o[r].toString())))}),Vs(t)?n.push(qs(r)+"="+e.join(",")):0!==e.length&&n.push(e.join(","))}else";"===t?zs(o)&&n.push(qs(r)):""!==o||"&"!==t&&"?"!==t?""===o&&n.push(""):n.push(qs(r)+"=");return n}(t,e,s[1],s[2]||s[3]))}),e&&"+"!==e){var n=",";return"?"===e?n="&":"#"!==e&&(n=e),(0!==o.length?e:"")+o.join(n)}return o.join(",")}return Ns(o)}),"/"===e?e:e.replace(/\/$/,"")}function Ys(e){let t,r=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n=Ms(e,["method","baseUrl","url","headers","request","mediaType"]);const i=function(e){const t=e.match(Is);return t?t.map(Hs).reduce((e,t)=>e.concat(t),[]):[]}(s);var a;s=(a=s,{expand:Ks.bind(null,a)}).expand(n),/^http/.test(s)||(s=e.baseUrl+s);const u=Ms(n,Object.keys(e).filter(e=>i.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&e.mediaType.previews?.length)){const t=o.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map(t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(r)?s=function(e,t){const r=/\?/.test(e)?"&":"?",s=Object.keys(t);return 0===s.length?e:e+r+s.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(s,u):"data"in u?t=u.data:Object.keys(u).length&&(t=u),o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&void 0===t&&(t=""),Object.assign({method:r,url:s,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}function Qs(e,t,r){return Ys(Us(e,t,r))}var Zs,Xs=function e(t,r){const s=Us(t,r),o=Qs.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:e.bind(null,s),merge:Us.bind(null,s),parse:Ys})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Ls},mediaType:{format:""}}),Js={};var eo=function(){if(Zs)return Js;Zs=1;const e=function(){};e.prototype=Object.create(null);const t=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,r=/\\([\v\u0020-\u00ff])/gu,s=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,o={type:"",parameters:new e};function n(o){if("string"!=typeof o)throw new TypeError("argument header is required and must be a string");let n=o.indexOf(";");const i=-1!==n?o.slice(0,n).trim():o.trim();if(!1===s.test(i))throw new TypeError("invalid media type");const a={type:i.toLowerCase(),parameters:new e};if(-1===n)return a;let u,c,l;for(t.lastIndex=n;c=t.exec(o);){if(c.index!==n)throw new TypeError("invalid parameter format");n+=c[0].length,u=c[1].toLowerCase(),l=c[2],'"'===l[0]&&(l=l.slice(1,l.length-1),r.test(l)&&(l=l.replace(r,"$1"))),a.parameters[u]=l}if(n!==o.length)throw new TypeError("invalid parameter format");return a}function i(n){if("string"!=typeof n)return o;let i=n.indexOf(";");const a=-1!==i?n.slice(0,i).trim():n.trim();if(!1===s.test(a))return o;const u={type:a.toLowerCase(),parameters:new e};if(-1===i)return u;let c,l,p;for(t.lastIndex=i;l=t.exec(n);){if(l.index!==i)return o;i+=l[0].length,c=l[1].toLowerCase(),p=l[2],'"'===p[0]&&(p=p.slice(1,p.length-1),r.test(p)&&(p=p.replace(r,"$1"))),u.parameters[c]=p}return i!==n.length?o:u}return Object.freeze(o.parameters),Object.freeze(o),Js.default={parse:n,safeParse:i},Js.parse=n,Js.safeParse=i,Js.defaultContentType=o,Js}();class to extends Error{name;status;request;response;constructor(e,t,r){super(e),this.name="HttpError",this.status=Number.parseInt(t),Number.isNaN(this.status)&&(this.status=0),"response"in r&&(this.response=r.response);const s=Object.assign({},r.request);r.request.headers.authorization&&(s.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),s.url=s.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=s}}async function ro(e){const t=e.request?.fetch||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const r=e.request?.log||console,s=!1!==e.request?.parseSuccessResponseBody,o=function(e){if("object"!=typeof e||null===e)return!1;if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);if(null===t)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,n=Object.fromEntries(Object.entries(e.headers).map(([e,t])=>[e,String(t)]));let i;try{i=await t(e.url,{method:e.method,body:o,redirect:e.request?.redirect,headers:n,signal:e.request?.signal,...e.body&&{duplex:"half"}})}catch(t){let r="Unknown Error";if(t instanceof Error){if("AbortError"===t.name)throw t.status=500,t;r=t.message,"TypeError"===t.name&&"cause"in t&&(t.cause instanceof Error?r=t.cause.message:"string"==typeof t.cause&&(r=t.cause))}const s=new to(r,500,{request:e});throw s.cause=t,s}const a=i.status,u=i.url,c={};for(const[e,t]of i.headers)c[e]=t;const l={url:u,status:a,headers:c,data:""};if("deprecation"in c){const t=c.link&&c.link.match(/<([^<>]+)>; rel="deprecation"/),s=t&&t.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${c.sunset}${s?`. See ${s}`:""}`)}if(204===a||205===a)return l;if("HEAD"===e.method){if(a<400)return l;throw new to(i.statusText,a,{response:l,request:e})}if(304===a)throw l.data=await so(i),new to("Not modified",a,{response:l,request:e});if(a>=400)throw l.data=await so(i),new to(function(e){if("string"==typeof e)return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(e=>JSON.stringify(e)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}(l.data),a,{response:l,request:e});return l.data=s?await so(i):i.body,l}async function so(e){const t=e.headers.get("content-type");if(!t)return e.text().catch(()=>"");const r=eo.safeParse(t);if(!function(e){return"application/json"===e.type||"application/scim+json"===e.type}(r))return r.type.startsWith("text/")||"utf-8"===r.parameters.charset?.toLowerCase()?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0));{let t="";try{return t=await e.text(),JSON.parse(t)}catch(e){return t}}}var oo=function e(t,r){const s=t.defaults(r);return Object.assign(function(t,r){const o=s.merge(t,r);if(!o.request||!o.request.hook)return ro(s.parse(o));const n=(e,t)=>ro(s.parse(s.merge(e,t)));return Object.assign(n,{endpoint:s,defaults:e.bind(null,s)}),o.request.hook(n,o)},{endpoint:s,defaults:e.bind(null,s)})}(Xs,{headers:{"user-agent":`octokit-request.js/10.0.3 ${ks()}`}});var no=class extends Error{constructor(e,t,r){super("Request failed due to following response errors:\n"+r.errors.map(e=>` - ${e.message}`).join("\n")),this.request=e,this.headers=t,this.response=r,this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},io=["method","baseUrl","url","headers","request","query","mediaType","operationName"],ao=["query","method","url"],uo=/\/api\/v3\/?$/;function co(e,t){const r=e.defaults(t);return Object.assign((e,t)=>function(e,t,r){if(r){if("string"==typeof t&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const e in r)if(ao.includes(e))return Promise.reject(new Error(`[@octokit/graphql] "${e}" cannot be used as variable name`))}const s="string"==typeof t?Object.assign({query:t},r):t,o=Object.keys(s).reduce((e,t)=>io.includes(t)?(e[t]=s[t],e):(e.variables||(e.variables={}),e.variables[t]=s[t],e),{}),n=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return uo.test(n)&&(o.url=n.replace(uo,"/api/graphql")),e(o).then(e=>{if(e.data.errors){const t={};for(const r of Object.keys(e.headers))t[r]=e.headers[r];throw new no(o,t,e.data)}return e.data.data})}(r,e,t),{defaults:co.bind(null,r),endpoint:r.endpoint})}co(oo,{headers:{"user-agent":`octokit-graphql.js/0.0.0-development ${ks()}`},method:"POST",url:"/graphql"});var lo="(?:[a-zA-Z0-9_-]+)",po=new RegExp(`^${lo}\\.${lo}\\.${lo}$`),ho=po.test.bind(po);async function go(e){const t=ho(e),r=e.startsWith("v1.")||e.startsWith("ghs_"),s=e.startsWith("ghu_");return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}}async function fo(e,t,r,s){const o=t.endpoint.merge(r,s);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(o)}var mo=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(go.bind(null,e),{hook:fo.bind(null,e)})};const Do="7.0.2",Eo=()=>{},yo=console.warn.bind(console),bo=console.error.bind(console),_o=`octokit-core.js/${Do} ${ks()}`;function vo(e,t,r){const s="function"==typeof t?t.endpoint(r):e.request.endpoint(t,r),o="function"==typeof t?t:e.request,n=s.method,i=s.headers;let a=s.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!a)return{done:!0};try{const e=function(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data)&&!("total_commits"in e.data)||"url"in e.data)return e;const t=e.data.incomplete_results,r=e.data.repository_selection,s=e.data.total_count,o=e.data.total_commits;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count,delete e.data.total_commits;const n=Object.keys(e.data)[0],i=e.data[n];return e.data=i,void 0!==t&&(e.data.incomplete_results=t),void 0!==r&&(e.data.repository_selection=r),e.data.total_count=s,e.data.total_commits=o,e}(await o({method:n,url:a,headers:i}));if(a=((e.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],!a&&"total_commits"in e.data){const t=new URL(e.url),r=t.searchParams,s=parseInt(r.get("page")||"1",10);s*parseInt(r.get("per_page")||"250",10)<e.data.total_commits&&(r.set("page",String(s+1)),a=t.toString())}return{value:e}}catch(e){if(409!==e.status)throw e;return a="",{value:{status:200,headers:{},data:[]}}}}})}}function Fo(e,t,r,s){return"function"==typeof r&&(s=r,r=void 0),wo(e,[],vo(e,t,r)[Symbol.asyncIterator](),s)}function wo(e,t,r,s){return r.next().then(o=>{if(o.done)return t;let n=!1;return t=t.concat(s?s(o.value,function(){n=!0}):o.value.data),n?t:wo(e,t,r,s)})}function To(e){return{paginate:Object.assign(Fo.bind(null,e),{iterator:vo.bind(null,e)})}}Object.assign(Fo,{iterator:vo}),To.VERSION="0.0.0-development";var Co=class extends Error{constructor(e,t){super(((e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`)(e.pathInQuery,t)),this.pageInfo=e,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingCursorChangeError"},Ao=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`),this.response=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingPageInfo"},Oo=e=>"[object Object]"===Object.prototype.toString.call(e);function ko(e){const t=Ro(e,"pageInfo");if(0===t.length)throw new Ao(e);return t}var Ro=(e,t,r=[])=>{for(const s of Object.keys(e)){const o=[...r,s],n=e[s];if(Oo(n)){if(n.hasOwnProperty(t))return o;const e=Ro(n,t,o);if(e.length>0)return e}}return[]},So=(e,t)=>t.reduce((e,t)=>e[t],e),Po=(e,t,r)=>{const s=t[t.length-1],o=[...t].slice(0,-1),n=So(e,o);n[s]="function"==typeof r?r(n[s]):r},Go=e=>e.hasOwnProperty("hasNextPage"),xo=e=>(t,r={})=>{let s=!0,o={...r};return{[Symbol.asyncIterator]:()=>({async next(){if(!s)return{done:!0,value:{}};const r=await e.graphql(t,o),n=(e=>{const t=ko(e);return{pathInQuery:t,pageInfo:So(e,[...t,"pageInfo"])}})(r),i=(a=n.pageInfo,Go(a)?a.endCursor:a.startCursor);var a;if(s=(e=>Go(e)?e.hasNextPage:e.hasPreviousPage)(n.pageInfo),s&&i===o.cursor)throw new Co(n,i);return o={...o,cursor:i},{done:!1,value:r}}})}},Bo=(e,t)=>{if(0===Object.keys(e).length)return Object.assign(e,t);const r=ko(e),s=[...r,"nodes"],o=So(t,s);o&&Po(e,s,e=>[...e,...o]);const n=[...r,"edges"],i=So(t,n);i&&Po(e,n,e=>[...e,...i]);const a=[...r,"pageInfo"];return Po(e,a,So(t,a)),e},Lo=e=>{const t=xo(e);return async(e,r={})=>{let s={};for await(const o of t(e,r))s=Bo(s,o);return s}};var $o={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createHostedRunnerForOrg:["POST /orgs/{org}/actions/hosted-runners"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteHostedRunnerForOrg:["DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getHostedRunnerForOrg:["GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],getHostedRunnersGithubOwnedImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/github-owned"],getHostedRunnersLimitsForOrg:["GET /orgs/{org}/actions/hosted-runners/limits"],getHostedRunnersMachineSpecsForOrg:["GET /orgs/{org}/actions/hosted-runners/machine-sizes"],getHostedRunnersPartnerImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/partner"],getHostedRunnersPlatformsForOrg:["GET /orgs/{org}/actions/hosted-runners/platforms"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listGithubHostedRunnersInGroupForOrg:["GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"],listHostedRunnersForOrg:["GET /orgs/{org}/actions/hosted-runners"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateHostedRunnerForOrg:["PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubBillingUsageReportUser:["GET /users/{username}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},campaigns:{createCampaign:["POST /orgs/{org}/campaigns"],deleteCampaign:["DELETE /orgs/{org}/campaigns/{campaign_number}"],getCampaignSummary:["GET /orgs/{org}/campaigns/{campaign_number}"],listOrgCampaigns:["GET /orgs/{org}/campaigns"],updateCampaign:["PATCH /orgs/{org}/campaigns/{campaign_number}"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"]},credentials:{revoke:["POST /credentials/revoke"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},hostedCompute:{createNetworkConfigurationForOrg:["POST /orgs/{org}/settings/network-configurations"],deleteNetworkConfigurationFromOrg:["DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkConfigurationForOrg:["GET /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkSettingsForOrg:["GET /orgs/{org}/settings/network-settings/{network_settings_id}"],listNetworkConfigurationsForOrg:["GET /orgs/{org}/settings/network-configurations"],updateNetworkConfigurationForOrg:["PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createIssueType:["POST /orgs/{org}/issue-types"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteIssueType:["DELETE /orgs/{org}/issue-types/{issue_type_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getOrgRulesetHistory:["GET /orgs/{org}/rulesets/{ruleset_id}/history"],getOrgRulesetVersion:["GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listIssueTypes:["GET /orgs/{org}/issue-types"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateIssueType:["PUT /orgs/{org}/issue-types/{issue_type_id}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesetHistory:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history"],getRepoRulesetVersion:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues",{},{deprecated:"octokit.rest.search.issuesAndPullRequests() is deprecated, see https://docs.github.com/rest/search/search#search-issues-and-pull-requests"}],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};const jo=new Map;for(const[e,t]of Object.entries($o))for(const[r,s]of Object.entries(t)){const[t,o,n]=s,[i,a]=t.split(/ /),u=Object.assign({method:i,url:a},o);jo.has(e)||jo.set(e,new Map),jo.get(e).set(r,{scope:e,methodName:r,endpointDefaults:u,decorations:n})}const Uo={has:({scope:e},t)=>jo.get(e).has(t),getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty:(e,t,r)=>(Object.defineProperty(e.cache,t,r),!0),deleteProperty:(e,t)=>(delete e.cache[t],!0),ownKeys:({scope:e})=>[...jo.get(e).keys()],set:(e,t,r)=>e.cache[t]=r,get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];const o=jo.get(t).get(s);if(!o)return;const{endpointDefaults:n,decorations:i}=o;return r[s]=i?function(e,t,r,s,o){const n=e.request.defaults(s);function i(...s){let i=n.endpoint.merge(...s);if(o.mapToData)return i=Object.assign({},i,{data:i[o.mapToData],[o.mapToData]:void 0}),n(i);if(o.renamed){const[s,n]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${s}.${n}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const i=n.endpoint.merge(...s);for(const[s,n]of Object.entries(o.renamedParameters))s in i&&(e.log.warn(`"${s}" parameter is deprecated for "octokit.${t}.${r}()". Use "${n}" instead`),n in i||(i[n]=i[s]),delete i[s]);return n(i)}return n(...s)}return Object.assign(i,n)}(e,t,s,n,i):e.request.defaults(n),r[s]}};function Io(e){const t=function(e){const t={};for(const r of jo.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},Uo);return t}(e);return{rest:t}}Io.VERSION="16.0.0";var Ho,Mo={exports:{}};var No=(Ho||(Ho=1,Mo.exports=function(){var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==Te?Te:"undefined"!=typeof self?self:{};function t(e){return e&&e.default||e}var r,s,o={load:function(e,t,r={}){var s,o,n;for(s in t)n=t[s],r[s]=null!=(o=e[s])?o:n;return r},overwrite:function(e,t,r={}){var s,o;for(s in e)o=e[s],void 0!==t[s]&&(r[s]=o);return r}},n=class{constructor(e,t){this.incr=e,this.decr=t,this._first=null,this._last=null,this.length=0}push(e){var t;this.length++,"function"==typeof this.incr&&this.incr(),t={value:e,prev:this._last,next:null},null!=this._last?(this._last.next=t,this._last=t):this._first=this._last=t}shift(){var e;if(null!=this._first)return this.length--,"function"==typeof this.decr&&this.decr(),e=this._first.value,null!=(this._first=this._first.next)?this._first.prev=null:this._last=null,e}first(){if(null!=this._first)return this._first.value}getArray(){var e,t,r;for(e=this._first,r=[];null!=e;)r.push((t=e,e=e.next,t.value));return r}forEachShift(e){var t;for(t=this.shift();null!=t;)e(t),t=this.shift()}debug(){var e,t,r,s,o;for(e=this._first,o=[];null!=e;)o.push((t=e,e=e.next,{value:t.value,prev:null!=(r=t.prev)?r.value:void 0,next:null!=(s=t.next)?s.value:void 0}));return o}},i=class{constructor(e){if(this.instance=e,this._events={},null!=this.instance.on||null!=this.instance.once||null!=this.instance.removeAllListeners)throw new Error("An Emitter already exists for this object");this.instance.on=(e,t)=>this._addListener(e,"many",t),this.instance.once=(e,t)=>this._addListener(e,"once",t),this.instance.removeAllListeners=(e=null)=>null!=e?delete this._events[e]:this._events={}}_addListener(e,t,r){var s;return null==(s=this._events)[e]&&(s[e]=[]),this._events[e].push({cb:r,status:t}),this.instance}listenerCount(e){return null!=this._events[e]?this._events[e].length:0}async trigger(e,...t){var r,s;try{if("debug"!==e&&this.trigger("debug",`Event triggered: ${e}`,t),null==this._events[e])return;return this._events[e]=this._events[e].filter(function(e){return"none"!==e.status}),s=this._events[e].map(async e=>{var r,s;if("none"!==e.status){"once"===e.status&&(e.status="none");try{return"function"==typeof(null!=(s="function"==typeof e.cb?e.cb(...t):void 0)?s.then:void 0)?await s:s}catch(e){return r=e,this.trigger("error",r),null}}}),(await Promise.all(s)).find(function(e){return null!=e})}catch(e){return r=e,this.trigger("error",r),null}}};r=n,s=i;var a,u,c,l,p,h=class{constructor(e){this.Events=new s(this),this._length=0,this._lists=function(){var t,s,o;for(o=[],t=1,s=e;1<=s?t<=s:t>=s;1<=s?++t:--t)o.push(new r(()=>this.incr(),()=>this.decr()));return o}.call(this)}incr(){if(0===this._length++)return this.Events.trigger("leftzero")}decr(){if(0===--this._length)return this.Events.trigger("zero")}push(e){return this._lists[e.options.priority].push(e)}queued(e){return null!=e?this._lists[e].length:this._length}shiftAll(e){return this._lists.forEach(function(t){return t.forEachShift(e)})}getFirst(e=this._lists){var t,r,s;for(t=0,r=e.length;t<r;t++)if((s=e[t]).length>0)return s;return[]}shiftLastFrom(e){return this.getFirst(this._lists.slice(e).reverse()).shift()}},d=class extends Error{};l=10,u=5,p=o,a=d,c=class{constructor(e,t,r,s,o,n,i,a){this.task=e,this.args=t,this.rejectOnDrop=o,this.Events=n,this._states=i,this.Promise=a,this.options=p.load(r,s),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===s.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((e,t)=>{this._resolve=e,this._reject=t}),this.retryCount=0}_sanitizePriority(e){var t;return(t=~~e!==e?u:e)<0?0:t>l-1?l-1:t}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:e,message:t="This job has been dropped by Bottleneck"}={}){return!!this._states.remove(this.options.id)&&(this.rejectOnDrop&&this._reject(null!=e?e:new a(t)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0)}_assertStatus(e){var t;if((t=this._states.jobStatus(this.options.id))!==e&&("DONE"!==e||null!==t))throw new a(`Invalid job status ${t}, expected ${e}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(e,t){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:e,blocked:t})}doRun(){return 0===this.retryCount?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(e,t,r,s){var o,n,i;0===this.retryCount?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),n={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",n);try{if(i=await(null!=e?e.schedule(this.options,this.task,...this.args):this.task(...this.args)),t())return this.doDone(n),await s(this.options,n),this._assertStatus("DONE"),this._resolve(i)}catch(e){return o=e,this._onFailure(o,n,t,r,s)}}doExpire(e,t,r){var s,o;return this._states.jobStatus("RUNNING"===this.options.id)&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),o={args:this.args,options:this.options,retryCount:this.retryCount},s=new a(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(s,o,e,t,r)}async _onFailure(e,t,r,s,o){var n,i;if(r())return null!=(n=await this.Events.trigger("failed",e,t))?(i=~~n,this.Events.trigger("retry",`Retrying ${this.options.id} after ${i} ms`,t),this.retryCount++,s(i)):(this.doDone(t),await o(this.options,t),this._assertStatus("DONE"),this._reject(e))}doDone(e){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",e)}};var g,f,m,D=c;m=o,g=d,f=class{constructor(e,t,r){this.instance=e,this.storeOptions=t,this.clientId=this.instance._randomIndex(),m.load(r,r,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var e;return null==this.heartbeat&&(null!=this.storeOptions.reservoirRefreshInterval&&null!=this.storeOptions.reservoirRefreshAmount||null!=this.storeOptions.reservoirIncreaseInterval&&null!=this.storeOptions.reservoirIncreaseAmount)?"function"==typeof(e=this.heartbeat=setInterval(()=>{var e,t,r,s,o;if(s=Date.now(),null!=this.storeOptions.reservoirRefreshInterval&&s>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=s,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),null!=this.storeOptions.reservoirIncreaseInterval&&s>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&(({reservoirIncreaseAmount:e,reservoirIncreaseMaximum:r,reservoir:o}=this.storeOptions),this._lastReservoirIncrease=s,(t=null!=r?Math.min(e,r-o):e)>0))return this.storeOptions.reservoir+=t,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref?e.unref():void 0:clearInterval(this.heartbeat)}async __publish__(e){return await this.yieldLoop(),this.instance.Events.trigger("message",e.toString())}async __disconnect__(e){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(e=0){return new this.Promise(function(t,r){return setTimeout(t,e)})}computePenalty(){var e;return null!=(e=this.storeOptions.penalty)?e:15*this.storeOptions.minTime||5e3}async __updateSettings__(e){return await this.yieldLoop(),m.overwrite(e,e,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(e){return await this.yieldLoop(),this._nextRequest+this.timeout<e}computeCapacity(){var e,t;return({maxConcurrent:e,reservoir:t}=this.storeOptions),null!=e&&null!=t?Math.min(e-this._running,t):null!=e?e-this._running:null!=t?t:null}conditionsCheck(e){var t;return null==(t=this.computeCapacity())||e<=t}async __incrementReservoir__(e){var t;return await this.yieldLoop(),t=this.storeOptions.reservoir+=e,this.instance._drainAll(this.computeCapacity()),t}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(e){return this._unblockTime>=e}check(e,t){return this.conditionsCheck(e)&&this._nextRequest-t<=0}async __check__(e){var t;return await this.yieldLoop(),t=Date.now(),this.check(e,t)}async __register__(e,t,r){var s,o;return await this.yieldLoop(),s=Date.now(),this.conditionsCheck(t)?(this._running+=t,null!=this.storeOptions.reservoir&&(this.storeOptions.reservoir-=t),o=Math.max(this._nextRequest-s,0),this._nextRequest=s+o+this.storeOptions.minTime,{success:!0,wait:o,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return 3===this.storeOptions.strategy}async __submit__(e,t){var r,s,o;if(await this.yieldLoop(),null!=this.storeOptions.maxConcurrent&&t>this.storeOptions.maxConcurrent)throw new g(`Impossible to add a job having a weight of ${t} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return s=Date.now(),o=null!=this.storeOptions.highWater&&e===this.storeOptions.highWater&&!this.check(t,s),(r=this.strategyIsBlock()&&(o||this.isBlocked(s)))&&(this._unblockTime=s+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:o,blocked:r,strategy:this.storeOptions.strategy}}async __free__(e,t){return await this.yieldLoop(),this._running-=t,this._done+=t,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var E,y=f;E=d;var b,_,v=class{constructor(e){this.status=e,this._jobs={},this.counts=this.status.map(function(){return 0})}next(e){var t,r;return r=(t=this._jobs[e])+1,null!=t&&r<this.status.length?(this.counts[t]--,this.counts[r]++,this._jobs[e]++):null!=t?(this.counts[t]--,delete this._jobs[e]):void 0}start(e){var t;return t=0,this._jobs[e]=t,this.counts[t]++}remove(e){var t;return null!=(t=this._jobs[e])&&(this.counts[t]--,delete this._jobs[e]),null!=t}jobStatus(e){var t;return null!=(t=this.status[this._jobs[e]])?t:null}statusJobs(e){var t,r,s,o;if(null!=e){if((r=this.status.indexOf(e))<0)throw new E(`status must be one of ${this.status.join(", ")}`);for(t in o=[],s=this._jobs)s[t]===r&&o.push(t);return o}return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((e,t,r)=>(e[this.status[r]]=t,e),{})}};b=n,_=class{constructor(e,t){this.schedule=this.schedule.bind(this),this.name=e,this.Promise=t,this._running=0,this._queue=new b}isEmpty(){return 0===this._queue.length}async _tryToRun(){var e,t,r,s,o,n,i;if(this._running<1&&this._queue.length>0)return this._running++,({task:i,args:e,resolve:o,reject:s}=this._queue.shift()),t=await async function(){try{return n=await i(...e),function(){return o(n)}}catch(e){return r=e,function(){return s(r)}}}(),this._running--,this._tryToRun(),t()}schedule(e,...t){var r,s,o;return o=s=null,r=new this.Promise(function(e,t){return o=e,s=t}),this._queue.push({task:e,args:t,resolve:o,reject:s}),this._tryToRun(),r}};var F,w,T,C,A,O=_,k="2.19.5",R={version:k},S=Object.freeze({version:k,default:R}),P=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),G=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),x=()=>console.log("You must import the full version of Bottleneck in order to use this feature.");A=o,F=i,T=P,w=G,C=x;var B,L,$=function(){class e{constructor(e={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=e,A.load(this.limiterOptions,this.defaults,this),this.Events=new F(this),this.instances={},this.Bottleneck=J,this._startAutoCleanup(),this.sharedConnection=null!=this.connection,null==this.connection&&("redis"===this.limiterOptions.datastore?this.connection=new T(Object.assign({},this.limiterOptions,{Events:this.Events})):"ioredis"===this.limiterOptions.datastore&&(this.connection=new w(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(e=""){var t;return null!=(t=this.instances[e])?t:(()=>{var t;return t=this.instances[e]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${e}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",t,e),t})()}async deleteKey(e=""){var t,r;return r=this.instances[e],this.connection&&(t=await this.connection.__runCommand__(["del",...C.allKeys(`${this.id}-${e}`)])),null!=r&&(delete this.instances[e],await r.disconnect()),null!=r||t>0}limiters(){var e,t,r,s;for(e in r=[],t=this.instances)s=t[e],r.push({key:e,limiter:s});return r}keys(){return Object.keys(this.instances)}async clusterKeys(){var e,t,r,s,o,n,i,a,u;if(null==this.connection)return this.Promise.resolve(this.keys());for(n=[],e=null,u=`b_${this.id}-`.length,t=9;0!==e;)for([a,r]=await this.connection.__runCommand__(["scan",null!=e?e:0,"match",`b_${this.id}-*_settings`,"count",1e4]),e=~~a,s=0,i=r.length;s<i;s++)o=r[s],n.push(o.slice(u,-t));return n}_startAutoCleanup(){var e;return clearInterval(this.interval),"function"==typeof(e=this.interval=setInterval(async()=>{var e,t,r,s,o,n;for(t in o=Date.now(),s=[],r=this.instances){n=r[t];try{await n._store.__groupCheck__(o)?s.push(this.deleteKey(t)):s.push(void 0)}catch(t){e=t,s.push(n.Events.trigger("error",e))}}return s},this.timeout/2)).unref?e.unref():void 0}updateSettings(e={}){if(A.overwrite(e,this.defaults,this),A.overwrite(e,e,this.limiterOptions),null!=e.timeout)return this._startAutoCleanup()}disconnect(e=!0){var t;if(!this.sharedConnection)return null!=(t=this.connection)?t.disconnect(e):void 0}}return e.prototype.defaults={timeout:3e5,connection:null,Promise:Promise,id:"group-key"},e}.call(e);L=o,B=i;var j,U,I,H,M,N,q,W,z,V,K,Y=function(){class e{constructor(e={}){this.options=e,L.load(this.options,this.defaults,this),this.Events=new B(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((e,t)=>this._resolve=e)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(e){var t;return this._arr.push(e),t=this._promise,this._arr.length===this.maxSize?this._flush():null!=this.maxTime&&1===this._arr.length&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),t}}return e.prototype.defaults={maxTime:null,maxSize:null,Promise:Promise},e}.call(e),Q=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Z=t(S),X=[].splice;N=10,U=5,K=o,q=h,H=D,M=y,W=Q,I=i,z=v,V=O,j=function(){class e{constructor(t={},...r){var s,o;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(t,r),K.load(t,this.instanceDefaults,this),this._queues=new q(N),this._scheduled={},this._states=new z(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new I(this),this._submitLock=new V("submit",this.Promise),this._registerLock=new V("register",this.Promise),o=K.load(t,this.storeDefaults,{}),this._store=function(){if("redis"===this.datastore||"ioredis"===this.datastore||null!=this.connection)return s=K.load(t,this.redisStoreDefaults,{}),new W(this,o,s);if("local"===this.datastore)return s=K.load(t,this.localStoreDefaults,{}),new M(this,o,s);throw new e.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}.call(this),this._queues.on("leftzero",()=>{var e;return null!=(e=this._store.heartbeat)&&"function"==typeof e.ref?e.ref():void 0}),this._queues.on("zero",()=>{var e;return null!=(e=this._store.heartbeat)&&"function"==typeof e.unref?e.unref():void 0})}_validateOptions(t,r){if(null==t||"object"!=typeof t||0!==r.length)throw new e.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(e){return this._store.__publish__(e)}disconnect(e=!0){return this._store.__disconnect__(e)}chain(e){return this._limiter=e,this}queued(e){return this._queues.queued(e)}clusterQueued(){return this._store.__queued__()}empty(){return 0===this.queued()&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(e){return this._states.jobStatus(e)}jobs(e){return this._states.statusJobs(e)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(e=1){return this._store.__check__(e)}_clearGlobalState(e){return null!=this._scheduled[e]&&(clearTimeout(this._scheduled[e].expiration),delete this._scheduled[e],!0)}async _free(e,t,r,s){var o,n;try{if(({running:n}=await this._store.__free__(e,r.weight)),this.Events.trigger("debug",`Freed ${r.id}`,s),0===n&&this.empty())return this.Events.trigger("idle")}catch(e){return o=e,this.Events.trigger("error",o)}}_run(e,t,r){var s,o,n;return t.doRun(),s=this._clearGlobalState.bind(this,e),n=this._run.bind(this,e,t),o=this._free.bind(this,e,t),this._scheduled[e]={timeout:setTimeout(()=>t.doExecute(this._limiter,s,n,o),r),expiration:null!=t.options.expiration?setTimeout(function(){return t.doExpire(s,n,o)},r+t.options.expiration):void 0,job:t}}_drainOne(e){return this._registerLock.schedule(()=>{var t,r,s,o,n;return 0===this.queued()?this.Promise.resolve(null):(n=this._queues.getFirst(),({options:o,args:t}=s=n.first()),null!=e&&o.weight>e?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${o.id}`,{args:t,options:o}),r=this._randomIndex(),this._store.__register__(r,o.weight,o.expiration).then(({success:e,wait:i,reservoir:a})=>{var u;return this.Events.trigger("debug",`Drained ${o.id}`,{success:e,args:t,options:o}),e?(n.shift(),(u=this.empty())&&this.Events.trigger("empty"),0===a&&this.Events.trigger("depleted",u),this._run(r,s,i),this.Promise.resolve(o.weight)):this.Promise.resolve(null)})))})}_drainAll(e,t=0){return this._drainOne(e).then(r=>{var s;return null!=r?(s=null!=e?e-r:e,this._drainAll(s,t+r)):this.Promise.resolve(t)}).catch(e=>this.Events.trigger("error",e))}_dropAllQueued(e){return this._queues.shiftAll(function(t){return t.doDrop({message:e})})}stop(t={}){var r,s;return t=K.load(t,this.stopDefaults),s=e=>{var t;return t=()=>{var t;return(t=this._states.counts)[0]+t[1]+t[2]+t[3]===e},new this.Promise((e,r)=>t()?e():this.on("done",()=>{if(t())return this.removeAllListeners("done"),e()}))},r=t.dropWaitingJobs?(this._run=function(e,r){return r.doDrop({message:t.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var e,r,o;for(e in r=this._scheduled)o=r[e],"RUNNING"===this.jobStatus(o.job.options.id)&&(clearTimeout(o.timeout),clearTimeout(o.expiration),o.job.doDrop({message:t.dropErrorMessage}));return this._dropAllQueued(t.dropErrorMessage),s(0)}))):this.schedule({priority:N-1,weight:0},()=>s(1)),this._receive=function(r){return r._reject(new e.prototype.BottleneckError(t.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new e.prototype.BottleneckError("stop() has already been called")),r}async _addToQueue(t){var r,s,o,n,i,a,u;({args:r,options:n}=t);try{({reachedHWM:i,blocked:s,strategy:u}=await this._store.__submit__(this.queued(),n.weight))}catch(e){return o=e,this.Events.trigger("debug",`Could not queue ${n.id}`,{args:r,options:n,error:o}),t.doDrop({error:o}),!1}return s?(t.doDrop(),!0):i&&(null!=(a=u===e.prototype.strategy.LEAK?this._queues.shiftLastFrom(n.priority):u===e.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(n.priority+1):u===e.prototype.strategy.OVERFLOW?t:void 0)&&a.doDrop(),null==a||u===e.prototype.strategy.OVERFLOW)?(null==a&&t.doDrop(),i):(t.doQueue(i,s),this._queues.push(t),await this._drainAll(),i)}_receive(t){return null!=this._states.jobStatus(t.options.id)?(t._reject(new e.prototype.BottleneckError(`A job with the same id already exists (id=${t.options.id})`)),!1):(t.doReceive(),this._submitLock.schedule(this._addToQueue,t))}submit(...e){var t,r,s,o,n,i,a;return"function"==typeof e[0]?(n=e,[r,...e]=n,[t]=X.call(e,-1),o=K.load({},this.jobDefaults)):(i=e,[o,r,...e]=i,[t]=X.call(e,-1),o=K.load(o,this.jobDefaults)),a=(...e)=>new this.Promise(function(t,s){return r(...e,function(...e){return(null!=e[0]?s:t)(e)})}),(s=new H(a,e,o,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise)).promise.then(function(e){return"function"==typeof t?t(...e):void 0}).catch(function(e){return Array.isArray(e)?"function"==typeof t?t(...e):void 0:"function"==typeof t?t(e):void 0}),this._receive(s)}schedule(...e){var t,r,s;return"function"==typeof e[0]?([s,...e]=e,r={}):[r,s,...e]=e,t=new H(s,e,r,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(t),t.promise}wrap(e){var t,r;return t=this.schedule.bind(this),(r=function(...r){return t(e.bind(this),...r)}).withOptions=function(r,...s){return t(r,e,...s)},r}async updateSettings(e={}){return await this._store.__updateSettings__(K.overwrite(e,this.storeDefaults)),K.overwrite(e,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(e=0){return this._store.__incrementReservoir__(e)}}return e.default=e,e.Events=I,e.version=e.prototype.version=Z.version,e.strategy=e.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},e.BottleneckError=e.prototype.BottleneckError=d,e.Group=e.prototype.Group=$,e.RedisConnection=e.prototype.RedisConnection=P,e.IORedisConnection=e.prototype.IORedisConnection=G,e.Batcher=e.prototype.Batcher=Y,e.prototype.jobDefaults={priority:U,weight:1,expiration:null,id:"<no-id>"},e.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:e.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},e.prototype.localStoreDefaults={Promise:Promise,timeout:null,heartbeatInterval:250},e.prototype.redisStoreDefaults={Promise:Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},e.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise:Promise},e.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},e}.call(e);var J=j;return J}()),Mo.exports),qo=Ce(No);async function Wo(e,t,r,s){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){const o=null!=s.request.retries?s.request.retries:e.retries,n=Math.pow((s.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,o,n)}throw r}async function zo(e,t,r,s){const o=new qo;return o.on("failed",function(t,r){const o=~~t.request.request.retries,n=~~t.request.request.retryAfter;if(s.request.retryCount=r.retryCount+1,o>r.retryCount)return n*e.retryAfterBaseValue}),o.schedule(Vo.bind(null,e,t,r),s)}async function Vo(e,t,r,s){const o=await r(r,s);if(o.data&&o.data.errors&&o.data.errors.length>0&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){return Wo(e,t,new to(o.data.errors[0].message,500,{request:s,response:o}),s)}return o}function Ko(e,t){const r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,410,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",Wo.bind(null,r,e)),e.hook.wrap("request",zo.bind(null,r,e))),{retry:{retryRequest:(e,t,r)=>(e.request.request=Object.assign({},e.request.request,{retries:t,retryAfter:r}),e)}}}Ko.VERSION="0.0.0-development";var Yo=()=>Promise.resolve();function Qo(e,t,r){return e.retryLimiter.schedule(Zo,e,t,r)}async function Zo(e,t,r){const{pathname:s}=new URL(r.url,"http://github.test"),o=function(e,t){return"PATCH"===e&&/^\/applications\/[^/]+\/token\/scoped$/.test(t)||"POST"===e&&(/^\/applications\/[^/]+\/token$/.test(t)||/^\/app\/installations\/[^/]+\/access_tokens$/.test(t)||"/login/oauth/access_token"===t)}(r.method,s),n=!o&&"GET"!==r.method&&"HEAD"!==r.method,i="GET"===r.method&&s.startsWith("/search/"),a=s.startsWith("/graphql"),u=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(u.expiration=6e4),(n||a)&&await e.write.key(e.id).schedule(u,Yo),n&&e.triggersNotification(s)&&await e.notifications.key(e.id).schedule(u,Yo),i&&await e.search.key(e.id).schedule(u,Yo);const c=(o?e.auth:e.global).key(e.id).schedule(u,t,r);if(a){const e=await c;if(null!=e.data.errors&&e.data.errors.some(e=>"RATE_LIMITED"===e.type)){throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:e,data:e.data})}}return c}var Xo=function(e){const t=`^(?:${e.map(e=>e.split("/").map(e=>e.startsWith("{")?"(?:.+?)":e).join("/")).map(e=>`(?:${e})`).join("|")})[^/]*$`;return new RegExp(t,"i")}(["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/issues/{issue_number}/sub_issue","/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"]),Jo=Xo.test.bind(Xo),en={};function tn(e,t){const{enabled:r=!0,Bottleneck:s=qo,id:o="no-id",timeout:n=12e4,connection:i}=t.throttle||{};if(!r)return{};const a={timeout:n};void 0!==i&&(a.connection=i),null==en.global&&function(e,t){en.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),en.auth=new e.Group({id:"octokit-auth",maxConcurrent:1,...t}),en.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),en.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),en.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})}(s,a);const u=Object.assign({clustering:null!=i,triggersNotification:Jo,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new s,id:o,...en},t.throttle);if("function"!=typeof u.onSecondaryRateLimit||"function"!=typeof u.onRateLimit)throw new Error("octokit/plugin-throttling error:\n        You must pass the onSecondaryRateLimit and onRateLimit error handlers.\n        See https://octokit.github.io/rest.js/#throttling\n\n        const octokit = new Octokit({\n          throttle: {\n            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},\n            onRateLimit: (retryAfter, options) => {/* ... */}\n          }\n        })\n    ");const c={},l=new s.Events(c);return c.on("secondary-limit",u.onSecondaryRateLimit),c.on("rate-limit",u.onRateLimit),c.on("error",t=>e.log.warn("Error in throttling-plugin limit handler",t)),u.retryLimiter.on("failed",async function(t,r){const[s,o,n]=r.args,{pathname:i}=new URL(n.url,"http://github.test");if(!(i.startsWith("/graphql")&&401!==t.status)&&403!==t.status&&429!==t.status)return;const a=~~o.retryCount;o.retryCount=a,n.request.retryCount=a;const{wantRetry:u,retryAfter:c=0}=await async function(){if(/\bsecondary rate\b/i.test(t.message)){const r=Number(t.response.headers["retry-after"])||s.fallbackSecondaryRateRetryAfter;return{wantRetry:await l.trigger("secondary-limit",r,n,e,a),retryAfter:r}}if(null!=t.response.headers&&"0"===t.response.headers["x-ratelimit-remaining"]||(t.response.data?.errors??[]).some(e=>"RATE_LIMITED"===e.type)){const r=new Date(1e3*~~t.response.headers["x-ratelimit-reset"]).getTime(),s=Math.max(Math.ceil((r-Date.now())/1e3)+1,0);return{wantRetry:await l.trigger("rate-limit",s,n,e,a),retryAfter:s}}return{}}();return u?(o.retryCount++,c*s.retryAfterBaseValue):void 0}),e.hook.wrap("request",Qo.bind(null,u)),{}}tn.VERSION="0.0.0-development",tn.triggersNotification=Jo;var rn=class{static VERSION=Do;static defaults(e){return class extends(this){constructor(...t){const r=t[0]||{};super("function"!=typeof e?Object.assign({},e,r,r.userAgent&&e.userAgent?{userAgent:`${r.userAgent} ${e.userAgent}`}:null):e(r))}}}static plugins=[];static plugin(...e){const t=this.plugins;return class extends(this){static plugins=t.concat(e.filter(e=>!t.includes(e)))}}constructor(e={}){const t=new Bs.Collection,r={baseUrl:oo.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};var s;if(r.headers["user-agent"]=e.userAgent?`${e.userAgent} ${_o}`:_o,e.baseUrl&&(r.baseUrl=e.baseUrl),e.previews&&(r.mediaType.previews=e.previews),e.timeZone&&(r.headers["time-zone"]=e.timeZone),this.request=oo.defaults(r),this.graphql=(s=this.request,co(s,{method:"POST",url:"/graphql"})).defaults(r),this.log=Object.assign({debug:Eo,info:Eo,warn:yo,error:bo},e.log),this.hook=t,e.authStrategy){const{authStrategy:r,...s}=e,o=r(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:s},e.auth));t.wrap("request",o.hook),this.auth=o}else if(e.auth){const r=mo(e.auth);t.wrap("request",r.hook),this.auth=r}else this.auth=async()=>({type:"unauthenticated"});const o=this.constructor;for(let t=0;t<o.plugins.length;++t)Object.assign(this,o.plugins[t](this,e))}request;graphql;log;hook;auth}.plugin(Io,To,function(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Lo(e),{iterator:xo(e)})})}},Ko,tn).defaults({userAgent:"octokit.js/0.0.0-development",throttle:{onRateLimit:function(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),0===t.request.retryCount)return r.log.info(`Retrying after ${e} seconds!`),!0},onSecondaryRateLimit:function(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),0===t.request.retryCount)return r.log.info(`Retrying after ${e} seconds!`),!0}}});var sn=function(){function e(e){void 0===e&&(e=!1),this._verbose=e}var t=e.prototype;return t.log=function(e){this._verbose},t.info=function(e){},t.error=function(e,t){t?console.error(e,t):console.error(e)},t.warn=function(e){console.warn(e)},T(e,[{key:"verbose",get:function(){return this._verbose}}])}();es.config();var on=new rn({auth:process.env.GH_TOKEN});function nn(e,t,r,s){return an.apply(this,arguments)}function an(){return(an=w(A().m(function e(t,r,s,o){var n,i;return A().w(function(e){for(;;)switch(e.n){case 0:return o.log("Making single API call to get PR commits..."),e.n=1,on.rest.pulls.listCommits({owner:t,repo:r,pull_number:s});case 1:return n=e.v,i=n.data,o.log("Retrieved ".concat(i.length," commits from API")),e.a(2,i)}},e)}))).apply(this,arguments)}function un(e,t){var r=new Map;if(0===e.length)return r.set("Unknown",{additions:t.additions,deletions:t.deletions}),r;var s,o=new Map,n=C(e);try{for(n.s();!(s=n.n()).done;){var i,a,u,c,l=s.value,p=(null==(i=l.author)?void 0:i.login)||(null==(a=l.commit)||null==(a=a.author)?void 0:a.name)||"Unknown",h=null==(u=l.commit)||null==(u=u.author)?void 0:u.name,d=null==(c=l.commit)||null==(c=c.author)?void 0:c.email;o.has(p)||o.set(p,{name:h,email:d})}}catch(e){n.e(e)}finally{n.f()}for(var g=Array.from(o.keys()),f=Math.floor(t.additions/g.length),m=Math.floor(t.deletions/g.length),D=0;D<g.length;D++){var E=g[D],y=o.get(E),b=D===g.length-1,_=b?t.additions-f*(g.length-1):f,v=b?t.deletions-m*(g.length-1):m;r.set(E,{additions:_,deletions:v,name:null==y?void 0:y.name,email:null==y?void 0:y.email})}return r}function cn(e,t,r,s,o){return ln.apply(this,arguments)}function ln(){return(ln=w(A().m(function e(t,r,s,o,n){var i,a,u,c,l,p,h,d,g,f,m,D,E;return A().w(function(e){for(;;)switch(e.n){case 0:n.log("Searching for PRs between ".concat(s," and ").concat(o,"...")),i=[],a=1,u=100;case 1:return n.log("Fetching PRs page ".concat(a,"...")),e.n=2,on.rest.pulls.list({owner:t,repo:r,state:"closed",sort:"updated",direction:"desc",per_page:u,page:a});case 2:if(c=e.v,0!==(l=c.data).length){e.n=3;break}return e.a(3,14);case 3:p=!1,h=C(l),e.p=4,h.s();case 5:if((d=h.n()).done){e.n=9;break}if((g=d.value).merged_at){e.n=6;break}return e.a(3,8);case 6:if(f=new Date(g.merged_at),m=new Date(s),(D=new Date(o)).setHours(23,59,59,999),!(f>=m&&f<=D)){e.n=7;break}i.push(g.number),n.log("Found PR #".concat(g.number," merged on ").concat(g.merged_at)),e.n=8;break;case 7:if(!(f<m)){e.n=8;break}return p=!0,e.a(3,9);case 8:e.n=5;break;case 9:e.n=11;break;case 10:e.p=10,E=e.v,h.e(E);case 11:return e.p=11,h.f(),e.f(11);case 12:if(!(p||l.length<u)){e.n=13;break}return e.a(3,14);case 13:a++,e.n=1;break;case 14:return n.log("Found ".concat(i.length," PRs in the specified date range")),e.a(2,i.sort(function(e,t){return e-t}))}},e,null,[[4,10,11,12]])}))).apply(this,arguments)}function pn(e,t,r,s,o){return hn.apply(this,arguments)}function hn(){return(hn=w(A().m(function e(t,r,s,o,n){var i,a,u,c,l,p,h,d,g,f,m,D,E,y,b,_,v,F,w,T,O,S,P,G,x,B,L,$,j,U,I,H,M,N,q,W,z,V,K,Y,Q,Z,X,J,ee,te,re,se;return A().w(function(e){for(;;)switch(e.n){case 0:void 0===o&&(o={}),void 0===n&&(n=!1),(i=new sn(n)).info("Analyzing ".concat(t.length," repositories...")),a=0,u=0,c=new Map,l=[],p=C(t),e.p=1,p.s();case 2:if((h=p.n()).done){e.n=31;break}return d=h.value,g=d.owner,f=d.repo,i.info("\nProcessing repository: ".concat(g,"/").concat(f)),e.p=3,e.n=4,cn(g,f,r,s,i);case 4:if(0!==(m=e.v).length){e.n=5;break}return i.info("No PRs found in the specified date range for ".concat(g,"/").concat(f)),e.a(3,30);case 5:i.info("Found ".concat(m.length," PRs in the specified date range")),l.push.apply(l,R(m)),i.log("Analyzing ".concat(m.length," PRs...")),D=0;case 6:if(!(D<m.length)){e.n=28;break}return E=m[D],i.log("\n[".concat(D+1,"/").concat(m.length,"] Analyzing PR #").concat(E,"...")),e.p=7,e.n=8,on.rest.pulls.listFiles({owner:g,repo:f,pull_number:E});case 8:return y=e.v,b=y.data,i.log("Analyzing ".concat(b.length," changed files...")),i.log("Fetching PR commits..."),e.n=9,nn(g,f,E,i);case 9:_=e.v,i.log("Found ".concat(_.length," commits in PR")),(v=_.filter(function(e){var t;return!fn((null==(t=e.commit)?void 0:t.message)||"",o.excludeCommitMessages)})).length!==_.length&&i.log("Filtered out ".concat(_.length-v.length," commits based on exclusion criteria")),F=b.filter(function(e){return!dn(e.filename,o.excludeFiles)}),F.length!==b.length&&i.log("Filtered out ".concat(b.length-F.length," files based on exclusion criteria")),w=C(F),e.p=10,w.s();case 11:if((T=w.n()).done){e.n=21;break}O=T.value,i.log("Processing file: ".concat(O.filename," (+").concat(O.additions,"/-").concat(O.deletions,")")),S=un(v,O),P=0,G=0,x=C(S),e.p=12,x.s();case 13:if((B=x.n()).done){e.n=16;break}if(L=k(B.value,2),$=L[0],j=L[1],!gn($,j.name,j.email,o)){e.n=14;break}return i.log("Excluding user: ".concat($," (").concat(j.name||"no name",") <").concat(j.email||"no email",">")),e.a(3,15);case 14:(U=c.get($)||{additions:0,deletions:0,name:j.name,email:j.email}).additions+=j.additions,U.deletions+=j.deletions,P+=j.additions,G+=j.deletions,!U.name&&j.name&&(U.name=j.name),!U.email&&j.email&&(U.email=j.email),c.set($,U);case 15:e.n=13;break;case 16:e.n=18;break;case 17:e.p=17,J=e.v,x.e(J);case 18:return e.p=18,x.f(),e.f(18);case 19:a+=P,u+=G;case 20:e.n=11;break;case 21:e.n=23;break;case 22:e.p=22,ee=e.v,w.e(ee);case 23:return e.p=23,w.f(),e.f(23);case 24:e.n=26;break;case 25:e.p=25,te=e.v,i.error("Error analyzing PR #".concat(E,":"),te);case 26:i.verbose||process.stdout.write(".");case 27:D++,e.n=6;break;case 28:!i.verbose&&m.length,e.n=30;break;case 29:e.p=29,re=e.v,i.error("Error analyzing repository ".concat(g,"/").concat(f,":"),re);case 30:e.n=2;break;case 31:e.n=33;break;case 32:e.p=32,se=e.v,p.e(se);case 33:return e.p=33,p.f(),e.f(33);case 34:return I=a+u,H=Array.from(c.entries()).map(function(e){var t=k(e,2),r=t[0],s=t[1];return{user:r,name:s.name,email:s.email,additions:s.additions,deletions:s.deletions,totalLines:s.additions+s.deletions,percentage:I>0?Math.round((s.additions+s.deletions)/I*100):0}}).sort(function(e,t){return t.totalLines-e.totalLines}),M=o.aiEmails||[],N=H.filter(function(e){return!M.some(function(t){return e.email===t})}),q=H.filter(function(e){return M.some(function(t){return e.email===t})}),W=N.reduce(function(e,t){return e+t.additions},0),z=N.reduce(function(e,t){return e+t.deletions},0),V=W+z,K=I>0?Math.round(V/I*100):0,Y=q.reduce(function(e,t){return e+t.additions},0),Q=q.reduce(function(e,t){return e+t.deletions},0),Z=Y+Q,X=I>0?Math.round(Z/I*100):0,e.a(2,{startDate:r,endDate:s,totalPRs:l.length,prNumbers:l.sort(function(e,t){return e-t}),totalAdditions:a,totalDeletions:u,totalEditLines:I,userContributions:H,humanContributions:{totalAdditions:W,totalDeletions:z,totalEditLines:V,percentage:K,peopleCount:N.length},aiContributions:{totalAdditions:Y,totalDeletions:Q,totalEditLines:Z,percentage:X,peopleCount:q.length}})}},e,null,[[12,17,18,19],[10,22,23,24],[7,25],[3,29],[1,32,33,34]])}))).apply(this,arguments)}function dn(e,t){return void 0===t&&(t=[]),t.some(function(t){return Os.isMatch(e,t)})}function gn(e,t,r,s){var o=s.excludeUsers,n=void 0===o?[]:o,i=s.excludeEmails,a=void 0===i?[]:i;return!!n.includes(e)||!(!r||!a.includes(r))}function fn(e,t){return void 0===t&&(t=[]),t.some(function(t){return e.includes(t)})}function mn(){return(mn=w(A().m(function e(){var t,r,s,o,n,i,a,u,c,l,p,h,d,g,f,m,D,E,y,b,_,v,F;return A().w(function(e){for(;;)switch(e.n){case 0:return e.p=0,e.n=1,Rr(ye(process.argv)).option("repo",{alias:"r",type:"array",description:'GitHub repository in format "owner/repo". Multiple repositories can be specified.',demandOption:!0}).option("start-date",{alias:"s",type:"string",description:"Start date for PR search (ISO format: YYYY-MM-DD)",demandOption:!0}).option("end-date",{alias:"e",type:"string",description:"End date for PR search (ISO format: YYYY-MM-DD)",demandOption:!0}).option("exclude-files",{type:"array",description:'Glob patterns for files to exclude (e.g., "*.md" "test/**")'}).option("exclude-users",{type:"array",description:"Usernames to exclude from contribution analysis"}).option("exclude-emails",{type:"array",description:"Email addresses to exclude from contribution analysis"}).option("exclude-commit-messages",{type:"array",description:"Text patterns to exclude commits containing these strings"}).option("ai-emails",{type:"array",description:"Email addresses to identify as AI contributors for human vs AI breakdown"}).option("verbose",{alias:"v",type:"boolean",description:"Enable verbose logging (shows detailed progress information)",default:!1}).check(function(e){var t,r=C(e.repo);try{for(r.s();!(t=r.n()).done;){var s=t.value;if(!s.includes("/")||2!==s.split("/").length)throw new Error('Invalid repository format: "'.concat(s,'". Expected format: "owner/repo"'))}}catch(e){r.e(e)}finally{r.f()}var o=new Date(e["start-date"]),n=new Date(e["end-date"]);if(Number.isNaN(o.getTime()))throw new Error("Invalid start-date format. Use YYYY-MM-DD");if(Number.isNaN(n.getTime()))throw new Error("Invalid end-date format. Use YYYY-MM-DD");if(o>n)throw new Error("start-date must be before or equal to end-date");return!0}).help().alias("help","h").example("$0 --repo WillBooster/gen-pr --start-date 2024-01-01 --end-date 2024-01-31","Analyze all PRs from single repository in January 2024").example("$0 -r WillBooster/gen-pr -s 2024-01-01 -e 2024-01-31","Same as above using short options").example("$0 -r WillBooster/gen-pr WillBooster/calc-ai-contrib -s 2024-01-01 -e 2024-01-31","Analyze PRs from multiple repositories in January 2024").example('$0 -r WillBooster/gen-pr -s 2024-01-01 -e 2024-01-31 --exclude-files "*.md" "test/**" --exclude-users "bot"',"Analyze PRs excluding markdown files, test directory, and bot user").example('$0 -r WillBooster/gen-pr -s 2024-01-01 -e 2024-01-31 --exclude-emails "bot@example.com" --exclude-commit-messages "auto-generated"','Analyze PRs excluding specific email and commits with "auto-generated" text').example('$0 -r WillBooster/gen-pr -s 2024-01-01 -e 2024-01-31 --ai-emails "bot@willbooster.com" "ai@example.com"',"Analyze PRs with human vs AI breakdown, identifying specified emails as AI").parse();case 1:return i=e.v,a=i.repo,u=i.startDate,c=i.endDate,l=i.excludeFiles,p=i.excludeUsers,h=i.excludeEmails,d=i.excludeCommitMessages,g=i.aiEmails,f=i.verbose,m=a.map(function(e){var t=k(e.split("/"),2);return{owner:t[0],repo:t[1]}}),((null==(t=(D={excludeFiles:l,excludeUsers:p,excludeEmails:h,excludeCommitMessages:d,aiEmails:g}).excludeFiles)?void 0:t.length)||(null==(r=D.excludeUsers)?void 0:r.length)||(null==(s=D.excludeEmails)?void 0:s.length)||(null==(o=D.excludeCommitMessages)?void 0:o.length)||(null==(n=D.aiEmails)?void 0:n.length))&&f&&(null!=(E=D.excludeFiles)&&E.length,null!=(y=D.excludeUsers)&&y.length,null!=(b=D.excludeEmails)&&b.length,null!=(_=D.excludeCommitMessages)&&_.length,null!=(v=D.aiEmails)&&v.length),e.n=2,pn(m,u,c,D,f);case 2:e.v,e.n=4;break;case 3:e.p=3,F=e.v,console.error("Error analyzing PR:",F);case 4:return e.a(2)}},e,null,[[0,3]])}))).apply(this,arguments)}await function(){return mn.apply(this,arguments)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
